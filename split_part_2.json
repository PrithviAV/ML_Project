[
  {
    "input": "Find the Jordan Normal Form of A = [[3.3, 0.2, 0], [0, 3.3, 0.2], [0, 0, 3.3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.3, 0.2, 0], [0, 3.3, 0.2], [0, 0, 3.3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of matrix A = [[6, 0, 2], [0, 6, 0], [0, 0, 6]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 0, 2], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[1, 0, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[2.2, 1.1, 0], [0, 2.2, 1.1], [0, 0, 2.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.2, 1.1, 0], [0, 2.2, 1.1], [0, 0, 2.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[4, 0, 1], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 0, 1], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[5.5, 0, 0], [0, 6.6, 0], [0, 0, 5.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.5, 0, 0], [0, 6.6, 0], [0, 0, 5.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[3, 1, 0], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 0], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[1, 1, 0], [0, 1, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 0], [0, 1, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of matrix A = [[7, 0, 1], [0, 7, 0], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 1], [0, 7, 0], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[2, 1, 0], [0, 2, 0], [0, 0, 1]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[9, 1, 0], [0, 9, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 1, 0], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[1.1, 0, 0], [0, 1.1, 1.1], [0, 0, 1.1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.1, 0, 0], [0, 1.1, 1.1], [0, 0, 1.1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[5, 1, 0], [0, 5, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[0, 1, 1], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 1], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form for A = [[4.2, 1.1, 0], [0, 4.2, 0], [0, 0, 4.2]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.2, 1.1, 0], [0, 4.2, 0], [0, 0, 4.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[6, 2, 0], [0, 6, 2], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 2, 0], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[2, 0, 0], [1, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [1, 2, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form for A = [[7, 1, 1], [0, 7, 1], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 1, 1], [0, 7, 1], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[1, 0, 0], [0, 1, 0], [0, 1, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 0], [0, 1, 0], [0, 1, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[4, 2, 0], [0, 4, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 2, 0], [0, 4, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[3, 1, 0], [0, 3, 0], [0, 0, 4]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 0], [0, 3, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[5.5, 0, 0], [0, 5.5, 1.5], [0, 0, 5.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.5, 0, 0], [0, 5.5, 1.5], [0, 0, 5.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form for A = [[7, 1, 0], [0, 7, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 1, 0], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[2, 1, 0], [0, 2, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[8.8, 0, 0], [0, 8.8, 1.1], [0, 0, 8.8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8.8, 0, 0], [0, 8.8, 1.1], [0, 0, 8.8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form for A = [[0, 0, 0], [1, 0, 0], [0, 1, 0]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 0], [1, 0, 0], [0, 1, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[3, 0, 1], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 1], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[5, 1, 0], [0, 5, 1], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[2, 1, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[4, 2, 1], [0, 4, 2], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 2, 1], [0, 4, 2], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[3.5, 0, 1.1], [0, 3.5, 0], [0, 0, 3.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.5, 0, 1.1], [0, 3.5, 0], [0, 0, 3.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form for A = [[1, 2, 0], [0, 1, 2], [0, 0, 1]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 2, 0], [0, 1, 2], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of matrix A = [[6, 1, 0], [0, 6, 0], [1, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 0], [0, 6, 0], [1, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[8, 2, 1], [0, 8, 2], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 2, 1], [0, 8, 2], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[9, 0, 1], [0, 9, 1], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 1], [0, 9, 1], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[5, 1, 1], [0, 5, 1], [0, 0, 5]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 1], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[1.2, 0, 1.2], [0, 1.2, 0], [0, 0, 1.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.2, 0, 1.2], [0, 1.2, 0], [0, 0, 1.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for matrix A = [[7.7, 1.1, 0], [0, 7.7, 1.1], [0, 0, 7.7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7.7, 1.1, 0], [0, 7.7, 1.1], [0, 0, 7.7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[4, 1, 1], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 1, 1], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[2, 1, 1], [0, 2, 1], [0, 0, 2]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 1], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[0, 1, 1], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 1], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[6, 1, 0], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 0], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[1.1, 1.1, 0], [0, 1.1, 1.1], [0, 0, 1.1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.1, 1.1, 0], [0, 1.1, 1.1], [0, 0, 1.1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[7, 0, 0], [0, 7, 1], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [0, 7, 1], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for A = [[5, 2, 0], [0, 5, 2], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 2, 0], [0, 5, 2], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[9, 0, 0], [0, 9, 1], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 0], [0, 9, 1], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[3, 2, 1], [0, 3, 2], [0, 0, 3]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 2, 1], [0, 3, 2], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[4.4, 0, 1], [0, 4.4, 1], [0, 0, 4.4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.4, 0, 1], [0, 4.4, 1], [0, 0, 4.4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[5.5, 2.2, 0], [0, 5.5, 2.2], [0, 0, 5.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.5, 2.2, 0], [0, 5.5, 2.2], [0, 0, 5.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[3, 1, 0], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 0], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of matrix A = [[9, 0, 3], [0, 9, 0], [0, 0, 9]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 3], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for matrix A = [[1.1, 0, 1], [0, 1.1, 0], [0, 0, 1.1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.1, 0, 1], [0, 1.1, 0], [0, 0, 1.1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[7.7, 1.3, 0], [0, 7.7, 1.3], [0, 0, 7.7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7.7, 1.3, 0], [0, 7.7, 1.3], [0, 0, 7.7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of matrix A = [[4.4, 0.5, 0], [0, 4.4, 0.5], [0, 0, 4.4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.4, 0.5, 0], [0, 4.4, 0.5], [0, 0, 4.4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[6.6, 0, 2], [0, 6.6, 0], [0, 0, 6.6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6.6, 0, 2], [0, 6.6, 0], [0, 0, 6.6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[2, 0, 2], [0, 2, 0], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 2], [0, 2, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[0.9, 1, 1], [0, 0.9, 1], [0, 0, 0.9]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0.9, 1, 1], [0, 0.9, 1], [0, 0, 0.9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[5, 1, 1], [0, 5, 1], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 1], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[7, 0, 4], [0, 7, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 4], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[3.3, 0, 0.5], [0, 3.3, 0], [0, 0, 3.3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.3, 0, 0.5], [0, 3.3, 0], [0, 0, 3.3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[1.5, 1, 0], [0, 1.5, 0], [0, 0, 1.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.5, 1, 0], [0, 1.5, 0], [0, 0, 1.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for matrix A = [[0.2, 0.2, 0], [0, 0.2, 0.2], [0, 0, 0.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0.2, 0.2, 0], [0, 0.2, 0.2], [0, 0, 0.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[4.1, 0, 2.2], [0, 4.1, 0], [0, 0, 4.1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.1, 0, 2.2], [0, 4.1, 0], [0, 0, 4.1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[6, 2, 3], [0, 6, 2], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 2, 3], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[0, 3, 2], [0, 0, 3], [0, 0, 0]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 3, 2], [0, 0, 3], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[8.5, 0.5, 0.5], [0, 8.5, 0.5], [0, 0, 8.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8.5, 0.5, 0.5], [0, 8.5, 0.5], [0, 0, 8.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[3, 0, 0.3], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 0.3], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[10, 1, 0], [0, 10, 1], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 1, 0], [0, 10, 1], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[2.2, 0, 1], [0, 2.2, 0], [0, 0, 2.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.2, 0, 1], [0, 2.2, 0], [0, 0, 2.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of matrix A = [[0.5, 1, 0], [0, 0.5, 1], [0, 0, 0.5]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0.5, 1, 0], [0, 0.5, 1], [0, 0, 0.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form for matrix A = [[6, 0, 1], [0, 6, 0], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 0, 1], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[3.3, 1.1, 0], [0, 3.3, 1.1], [0, 0, 3.3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.3, 1.1, 0], [0, 3.3, 1.1], [0, 0, 3.3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[1, 2, 0], [0, 1, 2], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 2, 0], [0, 1, 2], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for A = [[9, 0, 0.9], [0, 9, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 0.9], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[4.4, 0.4, 0], [0, 4.4, 0.4], [0, 0, 4.4]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.4, 0.4, 0], [0, 4.4, 0.4], [0, 0, 4.4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2.5, 0, 0.3], [0, 2.5, 0], [0, 0, 2.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.5, 0, 0.3], [0, 2.5, 0], [0, 0, 2.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for matrix A = [[7, 0, 7], [0, 7, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 7], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[8.8, 0, 0.8], [0, 8.8, 0.8], [0, 0, 8.8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8.8, 0, 0.8], [0, 8.8, 0.8], [0, 0, 8.8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[6.3, 0, 6.3], [0, 6.3, 0], [0, 0, 6.3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6.3, 0, 6.3], [0, 6.3, 0], [0, 0, 6.3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[3, 3, 0], [0, 3, 3], [0, 0, 3]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 3, 0], [0, 3, 3], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[1, 0.5, 0], [0, 1, 0.5], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0.5, 0], [0, 1, 0.5], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[5.5, 5.5, 0], [0, 5.5, 5.5], [0, 0, 5.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.5, 5.5, 0], [0, 5.5, 5.5], [0, 0, 5.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[2, 2, 2], [0, 2, 2], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 2, 2], [0, 2, 2], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form for A = [[3.7, 0, 1.1], [0, 3.7, 0], [0, 0, 3.7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.7, 0, 1.1], [0, 3.7, 0], [0, 0, 3.7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[0, 0, 0.1], [0, 0, 0], [0, 0, 0]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 0.1], [0, 0, 0], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[18.96, 1, 0], [0, 18.96, 1], [0, 0, 18.96]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[18.96, 1, 0], [0, 18.96, 1], [0, 0, 18.96]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[6.79, 1, 0], [0, 6.79, 1], [0, 0, 6.79]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6.79, 1, 0], [0, 6.79, 1], [0, 0, 6.79]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[5.16, 1, 0], [0, 5.16, 1], [0, 0, 5.16]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.16, 1, 0], [0, 5.16, 1], [0, 0, 5.16]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[11.82, 1, 0], [0, 11.82, 1], [0, 0, 11.82]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[11.82, 1, 0], [0, 11.82, 1], [0, 0, 11.82]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[12.6, 1, 0], [0, 12.6, 1], [0, 0, 12.6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[12.6, 1, 0], [0, 12.6, 1], [0, 0, 12.6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[7.59, 1, 0], [0, 7.59, 1], [0, 0, 7.59]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7.59, 1, 0], [0, 7.59, 1], [0, 0, 7.59]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[6.17, 1, 0], [0, 6.17, 1], [0, 0, 6.17]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6.17, 1, 0], [0, 6.17, 1], [0, 0, 6.17]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[8.38, 1, 0], [0, 8.38, 1], [0, 0, 8.38]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8.38, 1, 0], [0, 8.38, 1], [0, 0, 8.38]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[11.25, 1, 0], [0, 11.25, 1], [0, 0, 11.25]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[11.25, 1, 0], [0, 11.25, 1], [0, 0, 11.25]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[19.75, 1, 0], [0, 19.75, 1], [0, 0, 19.75]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[19.75, 1, 0], [0, 19.75, 1], [0, 0, 19.75]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[17.67, 1, 0], [0, 17.67, 1], [0, 0, 17.67]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[17.67, 1, 0], [0, 17.67, 1], [0, 0, 17.67]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[5.6, 1, 0], [0, 5.6, 1], [0, 0, 5.6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.6, 1, 0], [0, 5.6, 1], [0, 0, 5.6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[11.85, 1, 0], [0, 11.85, 1], [0, 0, 11.85]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[11.85, 1, 0], [0, 11.85, 1], [0, 0, 11.85]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[4.92, 1, 0], [0, 4.92, 1], [0, 0, 4.92]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.92, 1, 0], [0, 4.92, 1], [0, 0, 4.92]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[8.21, 1, 0], [0, 8.21, 1], [0, 0, 8.21]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8.21, 1, 0], [0, 8.21, 1], [0, 0, 8.21]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[16.04, 1, 0], [0, 16.04, 1], [0, 0, 16.04]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[16.04, 1, 0], [0, 16.04, 1], [0, 0, 16.04]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[5.48, 1, 0], [0, 5.48, 1], [0, 0, 5.48]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.48, 1, 0], [0, 5.48, 1], [0, 0, 5.48]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[3.19, 1, 0], [0, 3.19, 1], [0, 0, 3.19]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.19, 1, 0], [0, 3.19, 1], [0, 0, 3.19]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[5.51, 1, 0], [0, 5.51, 1], [0, 0, 5.51]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.51, 1, 0], [0, 5.51, 1], [0, 0, 5.51]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[14.62, 1, 0], [0, 14.62, 1], [0, 0, 14.62]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[14.62, 1, 0], [0, 14.62, 1], [0, 0, 14.62]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[5.81, 1, 0], [0, 5.81, 1], [0, 0, 5.81]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5.81, 1, 0], [0, 5.81, 1], [0, 0, 5.81]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[2.01, 1, 0], [0, 2.01, 1], [0, 0, 2.01]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.01, 1, 0], [0, 2.01, 1], [0, 0, 2.01]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[14.38, 1, 0], [0, 14.38, 1], [0, 0, 14.38]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[14.38, 1, 0], [0, 14.38, 1], [0, 0, 14.38]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[17.65, 1, 0], [0, 17.65, 1], [0, 0, 17.65]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[17.65, 1, 0], [0, 17.65, 1], [0, 0, 17.65]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[18.66, 1, 0], [0, 18.66, 1], [0, 0, 18.66]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[18.66, 1, 0], [0, 18.66, 1], [0, 0, 18.66]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[5, 1, 0], [0, 5, 1], [0, 0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2, 1, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 1, 0], [0, 2, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[1, 0, 1], [0, 1, 0], [0, 0, 1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 0, 1], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 1], [0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 1], [0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[1, 3, 0], [0, 1, 3], [0, 0, 1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 3, 0], [0, 1, 3], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[5, 4], [0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 4], [0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[-1, 1, 0], [0, -1, 1], [0, 0, -1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[-1, 1, 0], [0, -1, 1], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2, 1, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 1, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[4, 1, 0], [0, 4, 0], [0, 0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4, 1, 0], [0, 4, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[3, 2], [0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3, 2], [0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[6, 1, 0], [0, 6, 0], [0, 0, 6]].",
    "output": "import sympy as sp\nA = sp.Matrix([[6, 1, 0], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[2, 0], [0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 0], [0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[9, 1, 0], [0, 9, 1], [0, 0, 9]].",
    "output": "import sympy as sp\nA = sp.Matrix([[9, 1, 0], [0, 9, 1], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[7, 0, 0], [0, 7, 0], [0, 0, 8]].",
    "output": "import sympy as sp\nA = sp.Matrix([[7, 0, 0], [0, 7, 0], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2, 5], [0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 5], [0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[4, 1], [0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4, 1], [0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[-2, 1], [0, -2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[-2, 1], [0, -2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[3, 0, 0], [0, 4, 0], [0, 0, 4]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3, 0, 0], [0, 4, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[5, 0], [0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 0], [0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[6, 2, 0], [0, 6, 2], [0, 0, 6]].",
    "output": "import sympy as sp\nA = sp.Matrix([[6, 2, 0], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[0, 1], [0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 1], [0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[2, 1], [0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 1], [0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[4, 0, 1], [0, 4, 0], [0, 0, 4]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4, 0, 1], [0, 4, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[1, 0], [0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 0], [0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[5, 0, 1], [0, 5, 0], [0, 0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 0, 1], [0, 5, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[6, 2, 0], [0, 6, 1], [0, 0, 6]].",
    "output": "import sympy as sp\nA = sp.Matrix([[6, 2, 0], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[1, 0, 0], [0, 1, 1], [0, 0, 1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 0, 0], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 1, 0], [0, 3, 0], [0, 0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3, 1, 0], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[4, 1, 1], [0, 4, 1], [0, 0, 4]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4, 1, 1], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2, 0, 0], [0, 2, 0], [0, 0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 0, 0], [0, 2, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[7, 0, 1], [0, 7, 0], [0, 0, 7]]?",
    "output": "import sympy as sp\nA = sp.Matrix([[7, 0, 1], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan form of the matrix A = [[9, 0, 0], [0, 9, 0], [0, 0, 9]].",
    "output": "import sympy as sp\nA = sp.Matrix([[9, 0, 0], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[5, 1, 0], [0, 5, 1], [0, 0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan form of A = [[3, 3, 0], [0, 3, 3], [0, 0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3, 3, 0], [0, 3, 3], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan form of A = [[6, 0, 2], [0, 6, 0], [0, 0, 6]].",
    "output": "import sympy as sp\nA = sp.Matrix([[6, 0, 2], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[1, 1, 1], [0, 1, 1], [0, 0, 1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 1, 1], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form for A = [[0, 0, 1], [0, 0, 0], [0, 0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 0, 1], [0, 0, 0], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[2, 1, 1], [0, 2, 1], [0, 0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 1, 1], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form for A = [[10, 2, 0], [0, 10, 2], [0, 0, 10]].",
    "output": "import sympy as sp\nA = sp.Matrix([[10, 2, 0], [0, 10, 2], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan form of matrix A = [[-1, 1, 0], [0, -1, 1], [0, 0, -1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[-1, 1, 0], [0, -1, 1], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[8, 2, 1], [0, 8, 2], [0, 0, 8]].",
    "output": "import sympy as sp\nA = sp.Matrix([[8, 2, 1], [0, 8, 2], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan form of A = [[0, 1, 1], [0, 0, 1], [0, 0, 0]].",
    "output": "import sympy as sp\nA = sp.Matrix([[0, 1, 1], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[11, 0, 0], [0, 11, 0], [0, 0, 11]].",
    "output": "import sympy as sp\nA = sp.Matrix([[11, 0, 0], [0, 11, 0], [0, 0, 11]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[3, 2, 1], [0, 3, 2], [0, 0, 3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3, 2, 1], [0, 3, 2], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan form of A = [[1, 0, 1], [0, 1, 0], [0, 0, 1]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1, 0, 1], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[4, 4, 4], [0, 4, 4], [0, 0, 4]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4, 4, 4], [0, 4, 4], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan form of A = [[5, 5, 0], [0, 5, 5], [0, 0, 5]].",
    "output": "import sympy as sp\nA = sp.Matrix([[5, 5, 0], [0, 5, 5], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for A = [[2, 0, 1], [0, 2, 0], [0, 0, 2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2, 0, 1], [0, 2, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of matrix A = [[7, 3, 0], [0, 7, 3], [0, 0, 7]].",
    "output": "import sympy as sp\nA = sp.Matrix([[7, 3, 0], [0, 7, 3], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the result of the transformation T(x, y) = [x + y, x - y] on the vector [-2, -2].",
    "output": "import numpy as np\nv = np.array([-2, -2])\nT = np.array([[1, 1], [1, -1]])\nresult = T @ v\nprint('Result of T(x, y) on [-2, -2]:', result)"
  },
  {
    "input": "Find T(3, -1) for the transformation T(x, y) = [3x - 2y, x + 4y].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[3, -2], [1, 4]])\nresult = T @ v\nprint(\"T(3, -1) =\", result)"
  },
  {
    "input": "Determine the output of the transformation T(x, y) = [-x + y, 2x - 3y] applied to vector (2, 5).",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[-1, 1], [2, -3]])\nresult = T @ v\nprint(\"T(2, 5) =\", result)"
  },
  {
    "input": "Evaluate T(-3, 4) where T(x, y) = [x + 2y, -3x + y].",
    "output": "import numpy as np\nv = np.array([-3, 4])\nT = np.array([[1, 2], [-3, 1]])\nresult = T @ v\nprint(\"T(-3, 4) =\", result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x - y, y] to the vector (0, 7).",
    "output": "import numpy as np\nv = np.array([0, 7])\nT = np.array([[1, -1], [0, 1]])\nresult = T @ v\nprint(\"T(0, 7) =\", result)"
  },
  {
    "input": "Compute T(1, 1) for T(x, y) = [4x + 2y, -2x + y].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[4, 2], [-2, 1]])\nresult = T @ v\nprint(\"T(1, 1) =\", result)"
  },
  {
    "input": "Find the transformation of (5, -3) under T(x, y) = [x, 3x + 2y].",
    "output": "import numpy as np\nv = np.array([5, -3])\nT = np.array([[1, 0], [3, 2]])\nresult = T @ v\nprint(\"T(5, -3) =\", result)"
  },
  {
    "input": "Evaluate T(-1, -1) where T(x, y) = [x - 2y, y - x].",
    "output": "import numpy as np\nv = np.array([-1, -1])\nT = np.array([[1, -2], [-1, 1]])\nresult = T @ v\nprint(\"T(-1, -1) =\", result)"
  },
  {
    "input": "Compute the result of T(2, 0) for T(x, y) = [3x, y - x].",
    "output": "import numpy as np\nv = np.array([2, 0])\nT = np.array([[3, 0], [-1, 1]])\nresult = T @ v\nprint(\"T(2, 0) =\", result)"
  },
  {
    "input": "Find T(4, 1) for T(x, y) = [2x + y, -x + 3y].",
    "output": "import numpy as np\nv = np.array([4, 1])\nT = np.array([[2, 1], [-1, 3]])\nresult = T @ v\nprint(\"T(4, 1) =\", result)"
  },
  {
    "input": "Apply T(x, y) = [x, x + y] to vector (-2, 3).",
    "output": "import numpy as np\nv = np.array([-2, 3])\nT = np.array([[1, 0], [1, 1]])\nresult = T @ v\nprint(\"T(-2, 3) =\", result)"
  },
  {
    "input": "Evaluate T(6, -2) where T(x, y) = [2x, y + x].",
    "output": "import numpy as np\nv = np.array([6, -2])\nT = np.array([[2, 0], [1, 1]])\nresult = T @ v\nprint(\"T(6, -2) =\", result)"
  },
  {
    "input": "Determine T(0, 0) under T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([0, 0])\nT = np.array([[1, -1], [2, 1]])\nresult = T @ v\nprint(\"T(0, 0) =\", result)"
  },
  {
    "input": "Find T(-1, 2) for T(x, y) = [-x + 3y, 4x - y].",
    "output": "import numpy as np\nv = np.array([-1, 2])\nT = np.array([[-1, 3], [4, -1]])\nresult = T @ v\nprint(\"T(-1, 2) =\", result)"
  },
  {
    "input": "Compute T(2, 2) where T(x, y) = [x + y, x - y].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 1], [1, -1]])\nresult = T @ v\nprint(\"T(2, 2) =\", result)"
  },
  {
    "input": "Apply T(x, y) = [3x - y, 5y] to vector (1, 4).",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[3, -1], [0, 5]])\nresult = T @ v\nprint(\"T(1, 4) =\", result)"
  },
  {
    "input": "Find the output for T(-2, 1) with T(x, y) = [x + 2y, y - x].",
    "output": "import numpy as np\nv = np.array([-2, 1])\nT = np.array([[1, 2], [-1, 1]])\nresult = T @ v\nprint(\"T(-2, 1) =\", result)"
  },
  {
    "input": "Evaluate T(3, 3) for T(x, y) = [4x, -2y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[4, 0], [0, -2]])\nresult = T @ v\nprint(\"T(3, 3) =\", result)"
  },
  {
    "input": "Determine the result of T(5, 0) for T(x, y) = [x, y, x - y].",
    "output": "import numpy as np\nv = np.array([5, 0])\nT = np.array([[1, 0], [0, 1], [1, -1]])\nresult = T @ v\nprint(\"T(5, 0) =\", result)"
  },
  {
    "input": "Apply transformation T(x, y) = [x + y, x + 2y] to (1, -1).",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[1, 1], [1, 2]])\nresult = T @ v\nprint(\"T(1, -1) =\", result)"
  },
  {
    "input": "Compute T(-4, -4) for T(x, y) = [x - 3y, 2x + y].",
    "output": "import numpy as np\nv = np.array([-4, -4])\nT = np.array([[1, -3], [2, 1]])\nresult = T @ v\nprint(\"T(-4, -4) =\", result)"
  },
  {
    "input": "Find T(7, 2) for T(x, y) = [2x - y, x + y].",
    "output": "import numpy as np\nv = np.array([7, 2])\nT = np.array([[2, -1], [1, 1]])\nresult = T @ v\nprint(\"T(7, 2) =\", result)"
  },
  {
    "input": "Evaluate T(3, -2) where T(x, y) = [-x + y, x + 2y].",
    "output": "import numpy as np\nv = np.array([3, -2])\nT = np.array([[-1, 1], [1, 2]])\nresult = T @ v\nprint(\"T(3, -2) =\", result)"
  },
  {
    "input": "Find the output of T(0, 2) for T(x, y) = [3y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 2])\nT = np.array([[0, 3], [1, -1]])\nresult = T @ v\nprint(\"T(0, 2) =\", result)"
  },
  {
    "input": "Evaluate T(1, 0) where T(x, y) = [2x + 3y, -x + y].",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[2, 3], [-1, 1]])\nresult = T @ v\nprint(\"T(1, 0) =\", result)"
  },
  {
    "input": "Evaluate T(2, -5) where T(x, y) = [x - y, 2x + 3y].",
    "output": "import numpy as np\nv = np.array([2, -5])\nT = np.array([[1, -1], [2, 3]])\nresult = T @ v\nprint(\"T(2, -5) =\", result)"
  },
  {
    "input": "Find T(-1, 3) for T(x, y) = [2x + y, 4x - y].",
    "output": "import numpy as np\nv = np.array([-1, 3])\nT = np.array([[2, 1], [4, -1]])\nresult = T @ v\nprint(\"T(-1, 3) =\", result)"
  },
  {
    "input": "Compute the image of vector (0, 4) under T(x, y) = [x + 2y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 4])\nT = np.array([[1, 2], [1, -1]])\nresult = T @ v\nprint(\"T(0, 4) =\", result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [-3x + y, x + y] to vector (1, 2).",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[-3, 1], [1, 1]])\nresult = T @ v\nprint(\"T(1, 2) =\", result)"
  },
  {
    "input": "Evaluate T(6, -1) where T(x, y) = [x, x - 2y].",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[1, 0], [1, -2]])\nresult = T @ v\nprint(\"T(6, -1) =\", result)"
  },
  {
    "input": "Find T(3, 3) for T(x, y) = [x + 3y, 2x - y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, 3], [2, -1]])\nresult = T @ v\nprint(\"T(3, 3) =\", result)"
  },
  {
    "input": "Determine the output of T(1, 5) where T(x, y) = [2x, x - y].",
    "output": "import numpy as np\nv = np.array([1, 5])\nT = np.array([[2, 0], [1, -1]])\nresult = T @ v\nprint(\"T(1, 5) =\", result)"
  },
  {
    "input": "Compute T(-3, -3) using T(x, y) = [x + y, 2x + y].",
    "output": "import numpy as np\nv = np.array([-3, -3])\nT = np.array([[1, 1], [2, 1]])\nresult = T @ v\nprint(\"T(-3, -3) =\", result)"
  },
  {
    "input": "Find T(5, 2) for the transformation T(x, y) = [x, -x + 2y].",
    "output": "import numpy as np\nv = np.array([5, 2])\nT = np.array([[1, 0], [-1, 2]])\nresult = T @ v\nprint(\"T(5, 2) =\", result)"
  },
  {
    "input": "Evaluate T(-2, 6) under T(x, y) = [3x - y, 2y + x].",
    "output": "import numpy as np\nv = np.array([-2, 6])\nT = np.array([[3, -1], [1, 2]])\nresult = T @ v\nprint(\"T(-2, 6) =\", result)"
  },
  {
    "input": "Apply transformation T(x, y) = [4x, x + y] to vector (-1, 3).",
    "output": "import numpy as np\nv = np.array([-1, 3])\nT = np.array([[4, 0], [1, 1]])\nresult = T @ v\nprint(\"T(-1, 3) =\", result)"
  },
  {
    "input": "Compute T(0, 9) where T(x, y) = [y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 9])\nT = np.array([[0, 1], [1, -1]])\nresult = T @ v\nprint(\"T(0, 9) =\", result)"
  },
  {
    "input": "Evaluate T(2, 2) for T(x, y) = [-x, y].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[-1, 0], [0, 1]])\nresult = T @ v\nprint(\"T(2, 2) =\", result)"
  },
  {
    "input": "Find the image of (1, -2) under T(x, y) = [5x + y, 3x - 2y].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[5, 1], [3, -2]])\nresult = T @ v\nprint(\"T(1, -2) =\", result)"
  },
  {
    "input": "Compute T(4, 4) where T(x, y) = [x + y, x + y].",
    "output": "import numpy as np\nv = np.array([4, 4])\nT = np.array([[1, 1], [1, 1]])\nresult = T @ v\nprint(\"T(4, 4) =\", result)"
  },
  {
    "input": "Evaluate T(-2, 7) where T(x, y) = [x, y, x + y].",
    "output": "import numpy as np\nv = np.array([-2, 7])\nT = np.array([[1, 0], [0, 1], [1, 1]])\nresult = T @ v\nprint(\"T(-2, 7) =\", result)"
  },
  {
    "input": "Find T(8, 0) for T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([8, 0])\nT = np.array([[1, -1], [2, 1]])\nresult = T @ v\nprint(\"T(8, 0) =\", result)"
  },
  {
    "input": "Determine the transformation of (1, 1) using T(x, y) = [2x + y, 3x + 2y].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[2, 1], [3, 2]])\nresult = T @ v\nprint(\"T(1, 1) =\", result)"
  },
  {
    "input": "Evaluate T(0, -1) where T(x, y) = [x + y, x - y, y].",
    "output": "import numpy as np\nv = np.array([0, -1])\nT = np.array([[1, 1], [1, -1], [0, 1]])\nresult = T @ v\nprint(\"T(0, -1) =\", result)"
  },
  {
    "input": "Compute T(-3, 2) under T(x, y) = [x, x, y].",
    "output": "import numpy as np\nv = np.array([-3, 2])\nT = np.array([[1, 0], [1, 0], [0, 1]])\nresult = T @ v\nprint(\"T(-3, 2) =\", result)"
  },
  {
    "input": "Apply T(x, y) = [x + 2y, y - 3x] to vector (1, 0).",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[1, 2], [-3, 1]])\nresult = T @ v\nprint(\"T(1, 0) =\", result)"
  },
  {
    "input": "Evaluate T(2, 7) where T(x, y) = [4x, y].",
    "output": "import numpy as np\nv = np.array([2, 7])\nT = np.array([[4, 0], [0, 1]])\nresult = T @ v\nprint(\"T(2, 7) =\", result)"
  },
  {
    "input": "Compute T(-1, 0) using T(x, y) = [3x - y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([-1, 0])\nT = np.array([[3, -1], [-1, 2]])\nresult = T @ v\nprint(\"T(-1, 0) =\", result)"
  },
  {
    "input": "Find T(5, -2) for T(x, y) = [x + y, x, y].",
    "output": "import numpy as np\nv = np.array([5, -2])\nT = np.array([[1, 1], [1, 0], [0, 1]])\nresult = T @ v\nprint(\"T(5, -2) =\", result)"
  },
  {
    "input": "Evaluate T(3, 2) where T(x, y) = [x, y, x - y].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[1, 0], [0, 1], [1, -1]])\nresult = T @ v\nprint(\"T(3, 2) =\", result)"
  },
  {
    "input": "Find the image of vector [1, 2] under the transformation T(x, y) = [3x - y, 2x + 4y].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[3, -1], [2, 4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine T(3, -1) if T(x, y) = [4x + 2y, -x + y].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[4, 2], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What is the result of applying T(x, y) = [x, 2y] on the vector [7, 3]?",
    "output": "import numpy as np\nv = np.array([7, 3])\nT = np.array([[1, 0], [0, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [-2x + 3y, x + 4y] to the vector [2, 5].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[-2, 3], [1, 4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute T(-1, 2) where T(x, y) = [x - y, 3x + 2y].",
    "output": "import numpy as np\nv = np.array([-1, 2])\nT = np.array([[1, -1], [3, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [2x, -3y] at vector [-4, 6].",
    "output": "import numpy as np\nv = np.array([-4, 6])\nT = np.array([[2, 0], [0, -3]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 2y, y - x] on vector [3, 1].",
    "output": "import numpy as np\nv = np.array([3, 1])\nT = np.array([[1, 2], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(5, -3) for transformation T(x, y) = [x, x + y].",
    "output": "import numpy as np\nv = np.array([5, -3])\nT = np.array([[1, 0], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the result of T(x, y) = [x - 2y, 3x + y] when applied to vector [0, 2].",
    "output": "import numpy as np\nv = np.array([0, 2])\nT = np.array([[1, -2], [3, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute the transformation T(x, y) = [3x + y, x - y] for vector [2, 0].",
    "output": "import numpy as np\nv = np.array([2, 0])\nT = np.array([[3, 1], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What is the transformed vector for T(x, y) = [2x - 3y, x + y] applied to [1, 4]?",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[2, -3], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find T(0, 0) where T(x, y) = [x + y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 0])\nT = np.array([[1, 1], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [y, x] on vector [6, -2].",
    "output": "import numpy as np\nv = np.array([6, -2])\nT = np.array([[0, 1], [1, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x - y, 2x + y] at [4, 2].",
    "output": "import numpy as np\nv = np.array([4, 2])\nT = np.array([[1, -1], [2, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the result of T(x, y) = [-x, y] on vector [-5, -3].",
    "output": "import numpy as np\nv = np.array([-5, -3])\nT = np.array([[-1, 0], [0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What is T(7, 0) for transformation T(x, y) = [4x, 2y]?",
    "output": "import numpy as np\nv = np.array([7, 0])\nT = np.array([[4, 0], [0, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [5x - y, -3x + 2y] to [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[5, -1], [-3, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(2, 3) where T(x, y) = [0x + y, x + 0y].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[0, 1], [1, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute T(-3, 1) for transformation T(x, y) = [x + 4y, 2x - y].",
    "output": "import numpy as np\nv = np.array([-3, 1])\nT = np.array([[1, 4], [2, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What\u00e2\u20ac\u2122s the output of T(1, 1) for T(x, y) = [x, y]?",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.eye(2)\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the transformed vector when T(x, y) = [2x + y, x - 4y] is applied to [5, 1].",
    "output": "import numpy as np\nv = np.array([5, 1])\nT = np.array([[2, 1], [1, -4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply the linear transformation T(x, y) = [x + 3y, 2x + y] on vector [-2, 4].",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[1, 3], [2, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(0, 3) for transformation T(x, y) = [x - y, y].",
    "output": "import numpy as np\nv = np.array([0, 3])\nT = np.array([[1, -1], [0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the result of T(x, y) = [3x, 2y] when applied to vector [2, 6].",
    "output": "import numpy as np\nv = np.array([2, 6])\nT = np.array([[3, 0], [0, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute the transformation T(x, y) = [x + y, x - y] at vector [-1, 1].",
    "output": "import numpy as np\nv = np.array([-1, 1])\nT = np.array([[1, 1], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the result of the transformation T(x, y) = [3x + 4y, 2x - y] on the vector [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[3, 4], [2, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x - 3y, 2x + y] to the vector [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[1, -3], [2, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(-1, 4) where T(x, y) = [4x - y, x + 5y].",
    "output": "import numpy as np\nv = np.array([-1, 4])\nT = np.array([[4, -1], [1, 5]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What is T(2, 3) if T(x, y) = [-x + y, x + y]?",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[-1, 1], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the image of the vector [0, 5] under the transformation T(x, y) = [6x, -2y].",
    "output": "import numpy as np\nv = np.array([0, 5])\nT = np.array([[6, 0], [0, -2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute T(1, -3) for T(x, y) = [x + y, 4x - y].",
    "output": "import numpy as np\nv = np.array([1, -3])\nT = np.array([[1, 1], [4, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the result of the transformation T(x, y) = [2x + y, y - 3x] on the vector [-2, 2].",
    "output": "import numpy as np\nv = np.array([-2, 2])\nT = np.array([[2, 1], [-3, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x, -x + y] to the vector [4, 5].",
    "output": "import numpy as np\nv = np.array([4, 5])\nT = np.array([[1, 0], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(3, 2) where T(x, y) = [x - y, x + 2y].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[1, -1], [1, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find T(-4, 1) for the transformation T(x, y) = [3x + 2y, -x + y].",
    "output": "import numpy as np\nv = np.array([-4, 1])\nT = np.array([[3, 2], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the transformation result T(x, y) = [2x, x + y] applied to (6, -2).",
    "output": "import numpy as np\nv = np.array([6, -2])\nT = np.array([[2, 0], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [-2x + 3y, 5x] on vector [1, 4].",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[-2, 3], [5, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x - y, 2x + 3y] on (0, -3).",
    "output": "import numpy as np\nv = np.array([0, -3])\nT = np.array([[1, -1], [2, 3]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find T(-1, -2) for T(x, y) = [3x, 4x + y].",
    "output": "import numpy as np\nv = np.array([-1, -2])\nT = np.array([[3, 0], [4, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x + 3y, 5x - y] on vector (2, 2).",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 3], [5, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute T(2, 1) where T(x, y) = [3x + y, x - y].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[3, 1], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the image of [5, 0] under T(x, y) = [-x + y, 4x].",
    "output": "import numpy as np\nv = np.array([5, 0])\nT = np.array([[-1, 1], [4, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(1, 3) for T(x, y) = [2x, y - x].",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[2, 0], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x, x + 2y] on the vector (4, -1).",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[1, 0], [1, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Compute T(3, 0) where T(x, y) = [5x, x - 4y].",
    "output": "import numpy as np\nv = np.array([3, 0])\nT = np.array([[5, 0], [1, -4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "What is T(-3, 1) if T(x, y) = [x + 2y, -x - y]?",
    "output": "import numpy as np\nv = np.array([-3, 1])\nT = np.array([[1, 2], [-1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Evaluate T(0, 2) where T(x, y) = [3y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 2])\nT = np.array([[0, 3], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Apply T(x, y) = [2x + 3y, x - 2y] to the vector (1, 1).",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[2, 3], [1, -2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find T(-2, 2) where T(x, y) = [x + y, 4x - y].",
    "output": "import numpy as np\nv = np.array([-2, 2])\nT = np.array([[1, 1], [4, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the image of the vector [2, -3] under the transformation T(x, y) = [x + 2y, 3x - y].",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[1, 2], [3, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-1, 4) for the transformation T(x, y) = [2x - y, x + 3y].",
    "output": "import numpy as np\nv = np.array([-1, 4])\nT = np.array([[2, -1], [1, 3]])\nprint(T @ v)"
  },
  {
    "input": "Determine T(3, 3) if T(x, y) = [-x + y, 2x + y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[-1, 1], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [4x - 2y, x + y] to the vector [0, 5].",
    "output": "import numpy as np\nv = np.array([0, 5])\nT = np.array([[4, -2], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find T(1, 2) where T(x, y) = [x, x + 2y].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[1, 0], [1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(6, -1) where T(x, y) = [3x, x - y].",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[3, 0], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute the transformation T(5, 0) where T(x, y) = [-2x + y, 4x].",
    "output": "import numpy as np\nv = np.array([5, 0])\nT = np.array([[-2, 1], [4, 0]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-3, -2) where T(x, y) = [x - y, 2x + 3y].",
    "output": "import numpy as np\nv = np.array([-3, -2])\nT = np.array([[1, -1], [2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x + y, 5x - y] to the vector [4, -2].",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[1, 1], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of vector [7, 3] under T(x, y) = [2x + 2y, -x + y].",
    "output": "import numpy as np\nv = np.array([7, 3])\nT = np.array([[2, 2], [-1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(0, 0) for T(x, y) = [x - y, x + y].",
    "output": "import numpy as np\nv = np.array([0, 0])\nT = np.array([[1, -1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Calculate T(-1, -1) where T(x, y) = [x + 3y, 2x - 2y].",
    "output": "import numpy as np\nv = np.array([-1, -1])\nT = np.array([[1, 3], [2, -2]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of T(x, y) = [3x - y, -x + 2y] on [1, -3].",
    "output": "import numpy as np\nv = np.array([1, -3])\nT = np.array([[3, -1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, 2) for T(x, y) = [-x + y, x + y].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[-1, 1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x - 2y, 4x + y] to the vector [3, 2].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[1, -2], [4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(5, -3) where T(x, y) = [x + y, 3x + y].",
    "output": "import numpy as np\nv = np.array([5, -3])\nT = np.array([[1, 1], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-4, 2) for T(x, y) = [x - y, x - 3y].",
    "output": "import numpy as np\nv = np.array([-4, 2])\nT = np.array([[1, -1], [1, -3]])\nprint(T @ v)"
  },
  {
    "input": "Find T(3, 1) if T(x, y) = [5x + y, -x + 4y].",
    "output": "import numpy as np\nv = np.array([3, 1])\nT = np.array([[5, 1], [-1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Determine T(6, -2) where T(x, y) = [x - y, 2x + 2y].",
    "output": "import numpy as np\nv = np.array([6, -2])\nT = np.array([[1, -1], [2, 2]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 4y, -2x + y] to the vector [-1, 1].",
    "output": "import numpy as np\nv = np.array([-1, 1])\nT = np.array([[1, 4], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-5, 5) for T(x, y) = [3x + y, -x - y].",
    "output": "import numpy as np\nv = np.array([-5, 5])\nT = np.array([[3, 1], [-1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the transformation T(8, 1) where T(x, y) = [x - y, 2x - y].",
    "output": "import numpy as np\nv = np.array([8, 1])\nT = np.array([[1, -1], [2, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(1, -2) under T(x, y) = [-x + 2y, 4x + y].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[-1, 2], [4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-2, 3) where T(x, y) = [2x, 3y].",
    "output": "import numpy as np\nv = np.array([-2, 3])\nT = np.array([[2, 0], [0, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find T(0, 6) where T(x, y) = [x + y, 5x - y].",
    "output": "import numpy as np\nv = np.array([0, 6])\nT = np.array([[1, 1], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of applying T(x, y) = [2x + 3y, -x + 4y] to the vector [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[2, 3], [-1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x - 2y, y + 3x] on [4, -1].",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[1, -2], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Compute the transformation T(x, y) = [5x, x - 2y] for the vector [2, 1].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[5, 0], [1, -2]])\nprint(T @ v)"
  },
  {
    "input": "Determine T(-3, 5) for T(x, y) = [-x + y, x + y].",
    "output": "import numpy as np\nv = np.array([-3, 5])\nT = np.array([[-1, 1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of [1, 0] under T(x, y) = [3x - y, x + y].",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[3, -1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x, -x + 2y] to the vector [2, 2].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 0], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the result of T(3, -2) where T(x, y) = [x + y, y - x].",
    "output": "import numpy as np\nv = np.array([3, -2])\nT = np.array([[1, 1], [-1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find T(0, -5) under the transformation T(x, y) = [x - y, 3x + y].",
    "output": "import numpy as np\nv = np.array([0, -5])\nT = np.array([[1, -1], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(1, 1) where T(x, y) = [2x + y, x - y].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[2, 1], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(2, -3) for T(x, y) = [4x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[4, -1], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of [3, 3] under T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, -1], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 2y, -3x + y] to the vector [-2, 1].",
    "output": "import numpy as np\nv = np.array([-2, 1])\nT = np.array([[1, 2], [-3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-1, 3) for T(x, y) = [2x + 4y, -x - y].",
    "output": "import numpy as np\nv = np.array([-1, 3])\nT = np.array([[2, 4], [-1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find T(1, -2) under the transformation T(x, y) = [x + y, -2x + y].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[1, 1], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(4, 1) where T(x, y) = [2x - 3y, x + 2y].",
    "output": "import numpy as np\nv = np.array([4, 1])\nT = np.array([[2, -3], [1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 3y, 2x - y] to the vector [3, 0].",
    "output": "import numpy as np\nv = np.array([3, 0])\nT = np.array([[1, 3], [2, -1]])\nprint(T @ v)"
  },
  {
    "input": "Determine the transformation T(-4, -2) where T(x, y) = [3x + y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([-4, -2])\nT = np.array([[3, 1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Find T(0, 3) for T(x, y) = [x + 2y, 4x - y].",
    "output": "import numpy as np\nv = np.array([0, 3])\nT = np.array([[1, 2], [4, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(5, -5) where T(x, y) = [-2x + y, x + 3y].",
    "output": "import numpy as np\nv = np.array([5, -5])\nT = np.array([[-2, 1], [1, 3]])\nprint(T @ v)"
  },
  {
    "input": "Compute the transformation T(x, y) = [x - 4y, x + y] on vector [6, 2].",
    "output": "import numpy as np\nv = np.array([6, 2])\nT = np.array([[1, -4], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(1, -1) under T(x, y) = [x + 2y, 5x - y].",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[1, 2], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Determine the output of T(x, y) = [3x + 2y, -x - 2y] for vector [-3, 1].",
    "output": "import numpy as np\nv = np.array([-3, 1])\nT = np.array([[3, 2], [-1, -2]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [2x - y, x - y] to vector [1, 3].",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[2, -1], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(7, 2) where T(x, y) = [x + 3y, 2x - y].",
    "output": "import numpy as np\nv = np.array([7, 2])\nT = np.array([[1, 3], [2, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute the transformation T(x, y) = [4x + y, -2x + 3y] for [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[4, 1], [-2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(4, 3) where T(x, y) = [2x + y, -x + 4y].",
    "output": "import numpy as np\nv = np.array([4, 3])\nT = np.array([[2, 1], [-1, 4]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(-2, 1) for the transformation T(x, y) = [x - 2y, 3x + y].",
    "output": "import numpy as np\nv = np.array([-2, 1])\nT = np.array([[1, -2], [3, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute the result of applying T(x, y) = [x + y, -x + y] to (0, 2).",
    "output": "import numpy as np\nv = np.array([0, 2])\nT = np.array([[1, 1], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "What is T(5, -1) under T(x, y) = [3x + y, 2x - y]?",
    "output": "import numpy as np\nv = np.array([5, -1])\nT = np.array([[3, 1], [2, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [-2x + 3y, x + y] on the vector (2, -2).",
    "output": "import numpy as np\nv = np.array([2, -2])\nT = np.array([[-2, 3], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Determine T(3, 0) where T(x, y) = [4x - y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([3, 0])\nT = np.array([[4, -1], [-1, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x + 5y, 2x - 3y] to (1, 2).",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[1, 5], [2, -3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(0, -3) for T(x, y) = [2x - y, 3x + 4y].",
    "output": "import numpy as np\nv = np.array([0, -3])\nT = np.array([[2, -1], [3, 4]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(-2, -2) under T(x, y) = [x + 2y, -3x - y].",
    "output": "import numpy as np\nv = np.array([-2, -2])\nT = np.array([[1, 2], [-3, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute the image of (2, 1) under T(x, y) = [x, 2x + 3y].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[1, 0], [2, 3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "What is the result of applying T(x, y) = [5x - y, -2x + 3y] to (1, -1)?",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[5, -1], [-2, 3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(2, 2) if T(x, y) = [x + y, 4x - 3y].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 1], [4, -3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(-1, 1) for transformation T(x, y) = [-x + 3y, 2x + y].",
    "output": "import numpy as np\nv = np.array([-1, 1])\nT = np.array([[-1, 3], [2, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [2x + y, x - 4y] on vector (3, -1).",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[2, 1], [1, -4]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute the image of (1, 3) under T(x, y) = [3x, 2y].",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[3, 0], [0, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Determine T(0, 1) where T(x, y) = [x + 2y, 5x - y].",
    "output": "import numpy as np\nv = np.array([0, 1])\nT = np.array([[1, 2], [5, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(-2, 4) under transformation T(x, y) = [4x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[4, -1], [2, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "What is T(2, -3) if T(x, y) = [-x + y, 3x + 2y]?",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[-1, 1], [3, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute the transformation T(4, 1) where T(x, y) = [2x + 3y, -x + y].",
    "output": "import numpy as np\nv = np.array([4, 1])\nT = np.array([[2, 3], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(1, -2) under T(x, y) = [x - 2y, -2x + 5y].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[1, -2], [-2, 5]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(3, 2) for T(x, y) = [x + y, x - y].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[1, 1], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "What is the result of T(5, 0) under T(x, y) = [2x - 3y, -4x + y]?",
    "output": "import numpy as np\nv = np.array([5, 0])\nT = np.array([[2, -3], [-4, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [x + 3y, 3x - y] to the vector (-1, 2).",
    "output": "import numpy as np\nv = np.array([-1, 2])\nT = np.array([[1, 3], [3, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(0, 0) for T(x, y) = [5x + y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 0])\nT = np.array([[5, 1], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(1, 4) if T(x, y) = [-x + 2y, x + y].",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[-1, 2], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [3x, 2y] on the vector [5, 2].",
    "output": "import numpy as np\nv = np.array([5, 2])\nT = np.array([[3, 0], [0, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(3, -1) where T(x, y) = [x - 2y, y + x].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[1, -2], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(1, 4) for T(x, y) = [2x + y, x - y].",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[2, 1], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Determine the image of [0, 5] under T(x, y) = [x + y, 4x - y].",
    "output": "import numpy as np\nv = np.array([0, 5])\nT = np.array([[1, 1], [4, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Transform the vector [3, 3] using T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, -1], [2, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(-2, 4) for T(x, y) = [x + 2y, 3x - y].",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[1, 2], [3, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [5x - 3y, x + y] on the vector [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[5, -3], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find the result of T(6, 0) where T(x, y) = [x, y - x].",
    "output": "import numpy as np\nv = np.array([6, 0])\nT = np.array([[1, 0], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Determine T(-1, -2) for T(x, y) = [x + 2y, 2x + 3y].",
    "output": "import numpy as np\nv = np.array([-1, -2])\nT = np.array([[1, 2], [2, 3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Transform [2, 1] using T(x, y) = [2x - y, x + 3y].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[2, -1], [1, 3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [4x, x - y] on [3, 5].",
    "output": "import numpy as np\nv = np.array([3, 5])\nT = np.array([[4, 0], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find the image of [4, -1] under T(x, y) = [x + 3y, 2x - y].",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[1, 3], [2, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x - y, 2y] on the vector [1, 0].",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[1, -1], [0, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(2, 2) where T(x, y) = [x + y, y - x].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 1], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(0, 3) for T(x, y) = [2y, x - y].",
    "output": "import numpy as np\nv = np.array([0, 3])\nT = np.array([[0, 2], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute T(5, 1) for T(x, y) = [x + 4y, 2x].",
    "output": "import numpy as np\nv = np.array([5, 1])\nT = np.array([[1, 4], [2, 0]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Transform [1, -1] using T(x, y) = [x + y, 3x - y].",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[1, 1], [3, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(2, 0) for T(x, y) = [x, x + y].",
    "output": "import numpy as np\nv = np.array([2, 0])\nT = np.array([[1, 0], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [3x + 2y, y - x] to [2, 2].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[3, 2], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Transform [6, -3] using T(x, y) = [x + y, 2x - 3y].",
    "output": "import numpy as np\nv = np.array([6, -3])\nT = np.array([[1, 1], [2, -3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find the output of T(x, y) = [2x + y, x - 2y] on the vector [1, 1].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[2, 1], [1, -2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(4, 5) for T(x, y) = [x + 2y, 4x - y].",
    "output": "import numpy as np\nv = np.array([4, 5])\nT = np.array([[1, 2], [4, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute T(1, 2) for T(x, y) = [3x, x + 2y].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[3, 0], [1, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(0, -2) where T(x, y) = [x + y, 2y].",
    "output": "import numpy as np\nv = np.array([0, -2])\nT = np.array([[1, 1], [0, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Determine T(3, 3) for T(x, y) = [x - y, y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, -1], [0, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [2x - y, 3x + 4y] to the vector [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[2, -1], [3, 4]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find T(-2, 4) where T(x, y) = [x + 3y, 2x - y].",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[1, 3], [2, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [-x + 2y, 5x - y] at (1, 2).",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[-1, 2], [5, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute the result of T(4, 0) where T(x, y) = [4x + y, -2x + 3y].",
    "output": "import numpy as np\nv = np.array([4, 0])\nT = np.array([[4, 1], [-2, 3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x - y, x + 2y] on the vector [1, 5].",
    "output": "import numpy as np\nv = np.array([1, 5])\nT = np.array([[1, -1], [1, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(0, 6) where T(x, y) = [3x + 2y, y - x].",
    "output": "import numpy as np\nv = np.array([0, 6])\nT = np.array([[3, 2], [-1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Find the result of T(-3, -2) for T(x, y) = [x + 4y, 2x - 3y].",
    "output": "import numpy as np\nv = np.array([-3, -2])\nT = np.array([[1, 4], [2, -3]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate T(x, y) = [5x - y, x + y] for the vector (2, 3).",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[5, -1], [1, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [2x + y, -x + 2y] to the vector [-1, 2].",
    "output": "import numpy as np\nv = np.array([-1, 2])\nT = np.array([[2, 1], [-1, 2]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [-x - y, 4x + y] at (1, -2).",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[-1, -1], [4, 1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Compute T(3, 3) for the transformation T(x, y) = [x + y, 2x - y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, 1], [2, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply T(x, y) = [x, x - y] to the vector [-4, 1].",
    "output": "import numpy as np\nv = np.array([-4, 1])\nT = np.array([[1, 0], [1, -1]])\nresult = T @ v\nprint('Transformed vector:', result)"
  },
  {
    "input": "Apply the linear transformation T(x, y) = [3x - y, 2x + 4y] to the vector [2, -1].",
    "output": "import numpy as np\nv = np.array([2, -1])\nT = np.array([[3, -1], [2, 4]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find T(5, 0) where T(x, y) = [x + 2y, 3x - y].",
    "output": "import numpy as np\nv = np.array([5, 0])\nT = np.array([[1, 2], [3, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute the image of vector [-3, 2] under the transformation T(x, y) = [4x + y, x - 2y].",
    "output": "import numpy as np\nv = np.array([-3, 2])\nT = np.array([[4, 1], [1, -2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate T(-1, 4) for T(x, y) = [2x, y].",
    "output": "import numpy as np\nv = np.array([-1, 4])\nT = np.array([[2, 0], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the result of the transformation T(x, y) = [-x + 2y, 3x + y] on the vector [1, 3].",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[-1, 2], [3, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x - y, 2x + 3y] to the vector [0, -2].",
    "output": "import numpy as np\nv = np.array([0, -2])\nT = np.array([[1, -1], [2, 3]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [4x + y, x - y] at (6, 2).",
    "output": "import numpy as np\nv = np.array([6, 2])\nT = np.array([[4, 1], [1, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute T(-2, 1) where T(x, y) = [-x + 4y, 3x - y].",
    "output": "import numpy as np\nv = np.array([-2, 1])\nT = np.array([[-1, 4], [3, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "What is T(3, -3) for T(x, y) = [5x + y, -x + 2y]?",
    "output": "import numpy as np\nv = np.array([3, -3])\nT = np.array([[5, 1], [-1, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply T(x, y) = [2x, 3y] to the vector [-1, 4].",
    "output": "import numpy as np\nv = np.array([-1, 4])\nT = np.array([[2, 0], [0, 3]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the image of [0, 7] under T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([0, 7])\nT = np.array([[1, -1], [2, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate T(1, 2) where T(x, y) = [3x + 4y, 2x - y].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[3, 4], [2, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find T(-5, -5) where T(x, y) = [x + y, 3x + 2y].",
    "output": "import numpy as np\nv = np.array([-5, -5])\nT = np.array([[1, 1], [3, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute T(2, 3) where T(x, y) = [-2x + y, x + 5y].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[-2, 1], [1, 5]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x, x + y] on the vector [4, 6].",
    "output": "import numpy as np\nv = np.array([4, 6])\nT = np.array([[1, 0], [1, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find T(-1, 0) where T(x, y) = [x - 2y, 4x + y].",
    "output": "import numpy as np\nv = np.array([-1, 0])\nT = np.array([[1, -2], [4, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute the image of vector [2, 1] under T(x, y) = [3x - y, 2x + 2y].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[3, -1], [2, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 3y, y - 2x] to the vector [1, -2].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[1, 3], [-2, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the result of T(-3, 1) where T(x, y) = [2x + 3y, x - y].",
    "output": "import numpy as np\nv = np.array([-3, 1])\nT = np.array([[2, 3], [1, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate T(4, -2) for T(x, y) = [x + y, x - 3y].",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[1, 1], [1, -3]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [-x, y] to (6, -1).",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[-1, 0], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the image of [2, 5] under T(x, y) = [3x, -2y].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[3, 0], [0, -2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute T(-4, 2) where T(x, y) = [x + y, 3x].",
    "output": "import numpy as np\nv = np.array([-4, 2])\nT = np.array([[1, 1], [3, 0]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate T(1, -5) where T(x, y) = [4x - y, 2y].",
    "output": "import numpy as np\nv = np.array([1, -5])\nT = np.array([[4, -1], [0, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [y, x] to the vector [-7, 8].",
    "output": "import numpy as np\nv = np.array([-7, 8])\nT = np.array([[0, 1], [1, 0]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the matrix representation of the transformation T(x, y) = (2x + y, 3x - y) and apply it to the vector [1, 4].",
    "output": "import numpy as np\nT = np.array([[2, 1], [3, -1]])\nv = np.array([1, 4])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix representation of T(x, y) = (x - 2y, 4y) and transform the vector [-2, 3].",
    "output": "import numpy as np\nT = np.array([[1, -2], [0, 4]])\nv = np.array([-2, 3])\nprint(T @ v)"
  },
  {
    "input": "Apply the linear transformation T(x, y) = (5x + y, -x + 2y) to the vector [0, 7].",
    "output": "import numpy as np\nT = np.array([[5, 1], [-1, 2]])\nv = np.array([0, 7])\nprint(T @ v)"
  },
  {
    "input": "What is the image of vector [3, 2] under the transformation T(x, y) = (x, x + y)?",
    "output": "import numpy as np\nT = np.array([[1, 0], [1, 1]])\nv = np.array([3, 2])\nprint(T @ v)"
  },
  {
    "input": "Find the transformed vector of [4, -1] using T(x, y) = (2x - 3y, y).",
    "output": "import numpy as np\nT = np.array([[2, -3], [0, 1]])\nv = np.array([4, -1])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = (x + 2y, -2x + y). Compute T([5, 2]).",
    "output": "import numpy as np\nT = np.array([[1, 2], [-2, 1]])\nv = np.array([5, 2])\nprint(T @ v)"
  },
  {
    "input": "Find T([1, -3]) for T(x, y) = (3x, 4y - x).",
    "output": "import numpy as np\nT = np.array([[3, 0], [-1, 4]])\nv = np.array([1, -3])\nprint(T @ v)"
  },
  {
    "input": "Use the matrix for T(x, y) = (0, x + 2y) to find T([-5, 1]).",
    "output": "import numpy as np\nT = np.array([[0, 0], [1, 2]])\nv = np.array([-5, 1])\nprint(T @ v)"
  },
  {
    "input": "Find the image of [6, 6] under T(x, y) = (x + y, x - y).",
    "output": "import numpy as np\nT = np.array([[1, 1], [1, -1]])\nv = np.array([6, 6])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, -2) where T(x, y) = (x, -x + y).",
    "output": "import numpy as np\nT = np.array([[1, 0], [-1, 1]])\nv = np.array([2, -2])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = (-2x + y, 3x). Find T([1, 0]).",
    "output": "import numpy as np\nT = np.array([[-2, 1], [3, 0]])\nv = np.array([1, 0])\nprint(T @ v)"
  },
  {
    "input": "What is the output of the transformation T(x, y) = (3x - y, y) on the vector [7, 3]?",
    "output": "import numpy as np\nT = np.array([[3, -1], [0, 1]])\nv = np.array([7, 3])\nprint(T @ v)"
  },
  {
    "input": "Compute the matrix representation of T(x, y) = (x + 3y, 2y) and apply it to [2, 5].",
    "output": "import numpy as np\nT = np.array([[1, 3], [0, 2]])\nv = np.array([2, 5])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = (2x, 3x - 4y) on [3, 2].",
    "output": "import numpy as np\nT = np.array([[2, 0], [3, -4]])\nv = np.array([3, 2])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = (x - y, x + y) to the vector [-1, 4].",
    "output": "import numpy as np\nT = np.array([[1, -1], [1, 1]])\nv = np.array([-1, 4])\nprint(T @ v)"
  },
  {
    "input": "Find T([-2, 2]) where T(x, y) = (x, x + y).",
    "output": "import numpy as np\nT = np.array([[1, 0], [1, 1]])\nv = np.array([-2, 2])\nprint(T @ v)"
  },
  {
    "input": "Transform the vector [1, 6] using T(x, y) = (-x, x - y).",
    "output": "import numpy as np\nT = np.array([[-1, 0], [1, -1]])\nv = np.array([1, 6])\nprint(T @ v)"
  },
  {
    "input": "Determine T([4, 2]) for the transformation T(x, y) = (x + 4y, y - x).",
    "output": "import numpy as np\nT = np.array([[1, 4], [-1, 1]])\nv = np.array([4, 2])\nprint(T @ v)"
  },
  {
    "input": "Compute T([1, 1]) for T(x, y) = (2x + y, x - y).",
    "output": "import numpy as np\nT = np.array([[2, 1], [1, -1]])\nv = np.array([1, 1])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = (4x, x + y) to the vector [0, 3].",
    "output": "import numpy as np\nT = np.array([[4, 0], [1, 1]])\nv = np.array([0, 3])\nprint(T @ v)"
  },
  {
    "input": "Find the image of vector [-3, 5] under the transformation T(x, y) = (x, y - x).",
    "output": "import numpy as np\nT = np.array([[1, 0], [-1, 1]])\nv = np.array([-3, 5])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T([-2, -1]) for T(x, y) = (3x + y, 2y).",
    "output": "import numpy as np\nT = np.array([[3, 1], [0, 2]])\nv = np.array([-2, -1])\nprint(T @ v)"
  },
  {
    "input": "Transform the vector [2, -4] using the matrix for T(x, y) = (-x + y, x).",
    "output": "import numpy as np\nT = np.array([[-1, 1], [1, 0]])\nv = np.array([2, -4])\nprint(T @ v)"
  },
  {
    "input": "What is the result of T(1, 3) where T(x, y) = (x - y, 2x + y)?",
    "output": "import numpy as np\nT = np.array([[1, -1], [2, 1]])\nv = np.array([1, 3])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representation of the transformation T(x, y) = [2x + 3y, x - 4y] and apply it to the vector [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[2, 3], [1, -4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Let T(x, y) = [x + 2y, 5x - y]. Represent T as a matrix and apply it to [1, 2].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[1, 2], [5, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Represent T(x, y, z) = [x + y, y + z, z + x] as a matrix and apply to [1, 0, -1].",
    "output": "import numpy as np\nv = np.array([1, 0, -1])\nT = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Define the matrix for T(x, y) = [3x, -2y] and find T([4, 3]).",
    "output": "import numpy as np\nv = np.array([4, 3])\nT = np.array([[3, 0], [0, -2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the matrix that represents T(x, y, z) = [2x - y, y - z, z - x] and compute T([2, 1, 3]).",
    "output": "import numpy as np\nv = np.array([2, 1, 3])\nT = np.array([[2, -1, 0], [0, 1, -1], [-1, 0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the matrix for T(x, y) = [-x, y] and apply it to [-5, 6].",
    "output": "import numpy as np\nv = np.array([-5, 6])\nT = np.array([[-1, 0], [0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Represent T(x, y) = [4x + y, -3y] as a matrix and evaluate it on the vector [0, 1].",
    "output": "import numpy as np\nv = np.array([0, 1])\nT = np.array([[4, 1], [0, -3]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Given T(x, y) = [x - y, x + y], represent T as a matrix and evaluate T([7, -3]).",
    "output": "import numpy as np\nv = np.array([7, -3])\nT = np.array([[1, -1], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the transformation matrix for T(x, y, z) = [x + 2y + z, 2x - y + 3z, x + y - z] and apply it to [1, 1, 1].",
    "output": "import numpy as np\nv = np.array([1, 1, 1])\nT = np.array([[1, 2, 1], [2, -1, 3], [1, 1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the matrix representation of T(x, y) = [x, -x + y] and apply it to [2, 5].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[1, 0], [-1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Let T(x, y, z) = [x, y, x + z]. Represent T as a matrix and compute T([3, 2, 4]).",
    "output": "import numpy as np\nv = np.array([3, 2, 4])\nT = np.array([[1, 0, 0], [0, 1, 0], [1, 0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the matrix representation of T(x, y) = [2x, 3y] and apply it to [-3, 4].",
    "output": "import numpy as np\nv = np.array([-3, 4])\nT = np.array([[2, 0], [0, 3]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Matrix represent T(x, y, z) = [2x - z, y + 2z, x + y + z] and evaluate on [1, 2, 3].",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\nT = np.array([[2, 0, -1], [0, 1, 2], [1, 1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Given T(x, y) = [y, x], write its matrix form and apply it to [9, 6].",
    "output": "import numpy as np\nv = np.array([9, 6])\nT = np.array([[0, 1], [1, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Express T(x, y) = [-2x, 3x + y] as a matrix and apply it to [1, 3].",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[-2, 0], [3, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Matrix for T(x, y, z) = [x + y, y + z, x + z], apply to [1, 0, -1].",
    "output": "import numpy as np\nv = np.array([1, 0, -1])\nT = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Determine the transformation matrix for T(x, y) = [x - 2y, 3x + 4y] and apply it to [2, -2].",
    "output": "import numpy as np\nv = np.array([2, -2])\nT = np.array([[1, -2], [3, 4]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Represent T(x, y) = [x + y, x + 2y] as a matrix and compute T([0, 3]).",
    "output": "import numpy as np\nv = np.array([0, 3])\nT = np.array([[1, 1], [1, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Write matrix for T(x, y) = [2x + y, y] and evaluate T([4, 2]).",
    "output": "import numpy as np\nv = np.array([4, 2])\nT = np.array([[2, 1], [0, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Let T(x, y, z) = [x, y, 2z], express as matrix and apply to [3, 0, 1].",
    "output": "import numpy as np\nv = np.array([3, 0, 1])\nT = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 2]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Create a matrix for T(x, y) = [4x, x + y] and apply T([1, 2]).",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[4, 0], [1, 1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Represent T(x, y, z) = [y, z, x] as a matrix and apply to [-1, 0, 2].",
    "output": "import numpy as np\nv = np.array([-1, 0, 2])\nT = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Write T(x, y) = [-y, x] in matrix form and compute T([1, 1]).",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[0, -1], [1, 0]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Matrix form of T(x, y) = [3x + 2y, x - y], and apply to [2, 3].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[3, 2], [1, -1]])\nprint('Transformed vector:', T @ v)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T: R\u00c2\u00b2 \u00e2\u2020\u2019 R\u00c2\u00b2 defined by T(x, y) = (3x, 4y).",
    "output": "import numpy as np\nT = np.array([[3, 0], [0, 4]])\nv = np.array([1, 1])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix representing the transformation T(x, y) = (x + y, y - x).",
    "output": "import numpy as np\nT = np.array([[1, 1], [-1, 1]])\nv = np.array([2, 3])\nprint(T @ v)"
  },
  {
    "input": "Get the matrix representation of T: R\u00c2\u00b2 \u00e2\u2020\u2019 R\u00c2\u00b2 where T(x, y) = (2x - y, x + 3y).",
    "output": "import numpy as np\nT = np.array([[2, -1], [1, 3]])\nv = np.array([4, 1])\nprint(T @ v)"
  },
  {
    "input": "What is the matrix form of T(x, y) = (5x, -2y)?",
    "output": "import numpy as np\nT = np.array([[5, 0], [0, -2]])\nv = np.array([3, 2])\nprint(T @ v)"
  },
  {
    "input": "Compute the matrix of T(x, y) = (x - 2y, 3x + y).",
    "output": "import numpy as np\nT = np.array([[1, -2], [3, 1]])\nv = np.array([1, 4])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representing T(x, y) = (-x + y, x + y).",
    "output": "import numpy as np\nT = np.array([[-1, 1], [1, 1]])\nv = np.array([2, 5])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix for T: R\u00c2\u00b2 \u00e2\u2020\u2019 R\u00c2\u00b2 given by T(x, y) = (x + 2y, y - 3x).",
    "output": "import numpy as np\nT = np.array([[1, 2], [-3, 1]])\nv = np.array([2, 1])\nprint(T @ v)"
  },
  {
    "input": "Get the matrix for the transformation T(x, y) = (4x + y, 2y).",
    "output": "import numpy as np\nT = np.array([[4, 1], [0, 2]])\nv = np.array([3, 5])\nprint(T @ v)"
  },
  {
    "input": "What is the matrix representation for T(x, y) = (x + y, 2x + 2y)?",
    "output": "import numpy as np\nT = np.array([[1, 1], [2, 2]])\nv = np.array([2, 2])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the matrix form of T(x, y) = (0, x + 4y).",
    "output": "import numpy as np\nT = np.array([[0, 0], [1, 4]])\nv = np.array([1, 3])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix of the transformation T(x, y) = (3x - y, -2x).",
    "output": "import numpy as np\nT = np.array([[3, -1], [-2, 0]])\nv = np.array([5, 1])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix that represents T(x, y) = (x, x - y).",
    "output": "import numpy as np\nT = np.array([[1, 0], [1, -1]])\nv = np.array([2, 7])\nprint(T @ v)"
  },
  {
    "input": "What matrix represents T(x, y) = (2x + y, x - 2y)?",
    "output": "import numpy as np\nT = np.array([[2, 1], [1, -2]])\nv = np.array([3, 1])\nprint(T @ v)"
  },
  {
    "input": "Compute matrix representation for T(x, y) = (x, y + x).",
    "output": "import numpy as np\nT = np.array([[1, 0], [1, 1]])\nv = np.array([4, 6])\nprint(T @ v)"
  },
  {
    "input": "Get matrix for T(x, y) = (y, x).",
    "output": "import numpy as np\nT = np.array([[0, 1], [1, 0]])\nv = np.array([8, 3])\nprint(T @ v)"
  },
  {
    "input": "What is the matrix for the linear transformation T(x, y) = (-2x + y, x + y)?",
    "output": "import numpy as np\nT = np.array([[-2, 1], [1, 1]])\nv = np.array([5, 0])\nprint(T @ v)"
  },
  {
    "input": "Find matrix representation of T(x, y) = (x + 3y, 2x - y).",
    "output": "import numpy as np\nT = np.array([[1, 3], [2, -1]])\nv = np.array([1, 1])\nprint(T @ v)"
  },
  {
    "input": "Matrix of T(x, y) = (2x, y - 3x)?",
    "output": "import numpy as np\nT = np.array([[2, 0], [-3, 1]])\nv = np.array([4, 7])\nprint(T @ v)"
  },
  {
    "input": "Determine T(x, y) = (x - y, 4x + y) as a matrix.",
    "output": "import numpy as np\nT = np.array([[1, -1], [4, 1]])\nv = np.array([3, 5])\nprint(T @ v)"
  },
  {
    "input": "Matrix form of T(x, y) = (-x - y, y)?",
    "output": "import numpy as np\nT = np.array([[-1, -1], [0, 1]])\nv = np.array([1, 2])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix for T(x, y) = (x + y, 3y - x).",
    "output": "import numpy as np\nT = np.array([[1, 1], [-1, 3]])\nv = np.array([2, 6])\nprint(T @ v)"
  },
  {
    "input": "Get the matrix of T(x, y) = (x - y, -x - y).",
    "output": "import numpy as np\nT = np.array([[1, -1], [-1, -1]])\nv = np.array([2, 1])\nprint(T @ v)"
  },
  {
    "input": "Compute matrix of T(x, y) = (y - x, x + 2y).",
    "output": "import numpy as np\nT = np.array([[-1, 1], [1, 2]])\nv = np.array([1, 1])\nprint(T @ v)"
  },
  {
    "input": "Matrix for T(x, y) = (0, x - y)?",
    "output": "import numpy as np\nT = np.array([[0, 0], [1, -1]])\nv = np.array([2, 2])\nprint(T @ v)"
  },
  {
    "input": "Matrix representation for T(x, y) = (5x - y, 2y)?",
    "output": "import numpy as np\nT = np.array([[5, -1], [0, 2]])\nv = np.array([2, 3])\nprint(T @ v)"
  },
  {
    "input": "What is the matrix representation of the transformation T(x, y) = (4x + 2y, -x + y) applied to the vector (2, -3)?",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[4, 2], [-1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = (x - 2y, 3x + y) to the vector (5, 2).",
    "output": "import numpy as np\nv = np.array([5, 2])\nT = np.array([[1, -2], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Use a matrix to represent the transformation T(x, y) = (-x, 2y) and apply it to the vector (-4, 1).",
    "output": "import numpy as np\nv = np.array([-4, 1])\nT = np.array([[-1, 0], [0, 2]])\nprint(T @ v)"
  },
  {
    "input": "What is the result of the matrix transformation T(x, y) = (0, x - y) on the vector (3, 6)?",
    "output": "import numpy as np\nv = np.array([3, 6])\nT = np.array([[0, 0], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of applying the matrix T = [[2, 0], [0, 3]] to the vector (-3, 5).",
    "output": "import numpy as np\nv = np.array([-3, 5])\nT = np.array([[2, 0], [0, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find T(1, -2) where T(x, y) = (5x + y, x + 4y) using matrix representation.",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[5, 1], [1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Transform (2, 3) using the matrix T = [[0, 1], [-2, 0]].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[0, 1], [-2, 0]])\nprint(T @ v)"
  },
  {
    "input": "Apply the matrix T = [[3, -1], [2, 2]] to the vector (-1, 4).",
    "output": "import numpy as np\nv = np.array([-1, 4])\nT = np.array([[3, -1], [2, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(0, 7) where T(x, y) = (-3y, x + y) in matrix form.",
    "output": "import numpy as np\nv = np.array([0, 7])\nT = np.array([[0, -3], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Use matrix multiplication to apply T(x, y) = (y, x) to the vector (9, -4).",
    "output": "import numpy as np\nv = np.array([9, -4])\nT = np.array([[0, 1], [1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T = [[1, 3], [0, -1]] to the vector (-2, 6).",
    "output": "import numpy as np\nv = np.array([-2, 6])\nT = np.array([[1, 3], [0, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(3, -3) for T(x, y) = (2x + 2y, x - y) using a matrix.",
    "output": "import numpy as np\nv = np.array([3, -3])\nT = np.array([[2, 2], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the transformed vector using T = [[0, -1], [1, 0]] on vector (7, 8).",
    "output": "import numpy as np\nv = np.array([7, 8])\nT = np.array([[0, -1], [1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Find T(6, -1) where T(x, y) = (x + 3y, 2x - y).",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[1, 3], [2, -1]])\nprint(T @ v)"
  },
  {
    "input": "What is the result of applying T(x, y) = (x - y, 4y) to (1, 3)?",
    "output": "import numpy as np\nv = np.array([1, 3])\nT = np.array([[1, -1], [0, 4]])\nprint(T @ v)"
  },
  {
    "input": "Use the matrix representation T = [[2, -3], [1, 0]] on vector (0, 5).",
    "output": "import numpy as np\nv = np.array([0, 5])\nT = np.array([[2, -3], [1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the matrix transformation T(x, y) = (-2x, 3y) on the vector (4, -2).",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[-2, 0], [0, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of (3, 0) under T(x, y) = (5x, -y).",
    "output": "import numpy as np\nv = np.array([3, 0])\nT = np.array([[5, 0], [0, -1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T = [[3, 3], [1, -1]] to the vector (1, 2).",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[3, 3], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, 2) where T(x, y) = (x + 2y, 2x - y).",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 2], [2, -1]])\nprint(T @ v)"
  },
  {
    "input": "Transform the vector (-5, -5) using matrix [[1, 0], [2, 3]].",
    "output": "import numpy as np\nv = np.array([-5, -5])\nT = np.array([[1, 0], [2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix-transformed result of T(x, y) = (0, 2x + 2y) on the vector (1, 1).",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[0, 0], [2, 2]])\nprint(T @ v)"
  },
  {
    "input": "Find T(0, 1) using the matrix T = [[4, 1], [1, 4]].",
    "output": "import numpy as np\nv = np.array([0, 1])\nT = np.array([[4, 1], [1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Apply the matrix T = [[-1, 4], [3, 2]] to vector (1, -1).",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[-1, 4], [3, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(x, y) = (2x, -2y) on the vector (-2, 3).",
    "output": "import numpy as np\nv = np.array([-2, 3])\nT = np.array([[2, 0], [0, -2]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T that rotates vectors in R\u00c2\u00b2 by 270 degrees counterclockwise, and apply it to the vector [3, 2].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[0, 1], [-1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix representation for the transformation T(x, y) = [x, -2y] and compute T on vector [5, 3].",
    "output": "import numpy as np\nv = np.array([5, 3])\nT = np.array([[1, 0], [0, -2]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representation of the reflection of vectors in R\u00c2\u00b2 across the line y = -x and apply it to [2, -3].",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[0, -1], [-1, 0]])\nprint(T @ v)"
  },
  {
    "input": "What is the result of applying the transformation T(x, y) = [2x, x + y] to the vector [4, -2] using matrix representation?",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[2, 0], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix for the transformation T(x, y) = [y, x], and evaluate it for vector [7, 1].",
    "output": "import numpy as np\nv = np.array([7, 1])\nT = np.array([[0, 1], [1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Determine the result of the transformation T(x, y) = [3x + 2y, y] using matrix multiplication for input [1, -1].",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[3, 2], [0, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x - 2y, 2x + y] for the vector [6, 2] using matrix form.",
    "output": "import numpy as np\nv = np.array([6, 2])\nT = np.array([[1, -2], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representation of the projection onto the x-axis in R\u00c2\u00b2 and apply it to vector [-2, 8].",
    "output": "import numpy as np\nv = np.array([-2, 8])\nT = np.array([[1, 0], [0, 0]])\nprint(T @ v)"
  },
  {
    "input": "Use matrix representation to apply the transformation T(x, y) = [4x - y, -x + 2y] on [0, 3].",
    "output": "import numpy as np\nv = np.array([0, 3])\nT = np.array([[4, -1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Represent the transformation T(x, y) = [x + 3y, x - y] as a matrix and evaluate it on vector [2, 5].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[1, 3], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix that reflects vectors across the y-axis in R\u00c2\u00b2 and use it on [6, -4].",
    "output": "import numpy as np\nv = np.array([6, -4])\nT = np.array([[-1, 0], [0, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x + y, 3y] using its matrix representation to vector [-3, 2].",
    "output": "import numpy as np\nv = np.array([-3, 2])\nT = np.array([[1, 1], [0, 3]])\nprint(T @ v)"
  },
  {
    "input": "Represent T(x, y) = [2x + 3y, 5x - y] as a matrix and evaluate on [1, 1].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[2, 3], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x, y - 4x] using matrix representation for vector [2, 5].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[1, 0], [-4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of T(x, y) = [-x + 2y, x + y] on [4, -1] using a matrix.",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[-1, 2], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Matrix-represent the transformation T(x, y) = [x - y, x + y] and apply it to [3, 3].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, -1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Determine the result of T(x, y) = [x + 2y, -3x + y] on vector [-2, 1] using matrix form.",
    "output": "import numpy as np\nv = np.array([-2, 1])\nT = np.array([[1, 2], [-3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the matrix of T(x, y) = [-x, 2x + y] to vector [5, 4].",
    "output": "import numpy as np\nv = np.array([5, 4])\nT = np.array([[-1, 0], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix representation of T(x, y) = [y, -x] and apply it to [1, 0].",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[0, 1], [-1, 0]])\nprint(T @ v)"
  },
  {
    "input": "Determine the output of T(x, y) = [2x - y, 4y] on the vector [3, 1] using matrix representation.",
    "output": "import numpy as np\nv = np.array([3, 1])\nT = np.array([[2, -1], [0, 4]])\nprint(T @ v)"
  },
  {
    "input": "Represent T(x, y) = [3y, x - y] as a matrix and compute T([4, -2]).",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[0, 3], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the matrix for T(x, y) = [x + y, 2x] and apply it to [1, 1].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[1, 1], [2, 0]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x, -x - y] on [2, -3] using a matrix.",
    "output": "import numpy as np\nv = np.array([2, -3])\nT = np.array([[1, 0], [-1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Use a matrix to compute T(x, y) = [2y, x + y] for vector [5, -2].",
    "output": "import numpy as np\nv = np.array([5, -2])\nT = np.array([[0, 2], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [-y, x - 2y] to [0, 6] using its matrix form.",
    "output": "import numpy as np\nv = np.array([0, 6])\nT = np.array([[0, -1], [1, -2]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of the vector [3, 1] under the transformation T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([3, 1])\nT = np.array([[1, -1], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [4x, -2y] to the vector [1, -3].",
    "output": "import numpy as np\nv = np.array([1, -3])\nT = np.array([[4, 0], [0, -2]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(2, 5) where T(x, y) = [x + 2y, 3x - y].",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[1, 2], [3, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of T(x, y) = [2x + y, x + 3y] on the vector [4, -1].",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[2, 1], [1, 3]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x, x + y] for the vector [7, 3].",
    "output": "import numpy as np\nv = np.array([7, 3])\nT = np.array([[1, 0], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [-x + 2y, 3x - y] to the vector [2, 6].",
    "output": "import numpy as np\nv = np.array([2, 6])\nT = np.array([[-1, 2], [3, -1]])\nprint(T @ v)"
  },
  {
    "input": "Transform [1, 1] using T(x, y) = [3x + 4y, -2x + y].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[3, 4], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Determine T(0, -3) where T(x, y) = [2x - y, 4x + 5y].",
    "output": "import numpy as np\nv = np.array([0, -3])\nT = np.array([[2, -1], [4, 5]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x - 3y, 2x + y] on vector [-2, 4].",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[1, -3], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [5x + y, -x + 2y] to [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[5, 1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Compute the result of T(x, y) = [x + 4y, 3x + y] on the vector [2, 2].",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[1, 4], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-1, 2) where T(x, y) = [-2x + y, x + 3y].",
    "output": "import numpy as np\nv = np.array([-1, 2])\nT = np.array([[-2, 1], [1, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of the vector [0, 7] under the transformation T(x, y) = [x - 2y, 3x + y].",
    "output": "import numpy as np\nv = np.array([0, 7])\nT = np.array([[1, -2], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + y, x - 2y] to the vector [5, -3].",
    "output": "import numpy as np\nv = np.array([5, -3])\nT = np.array([[1, 1], [1, -2]])\nprint(T @ v)"
  },
  {
    "input": "Transform the vector [4, 1] using T(x, y) = [3x + 2y, -x + y].",
    "output": "import numpy as np\nv = np.array([4, 1])\nT = np.array([[3, 2], [-1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(6, 2) where T(x, y) = [-x, x + y].",
    "output": "import numpy as np\nv = np.array([6, 2])\nT = np.array([[-1, 0], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find T(1, -1) if T(x, y) = [2x + 3y, -3x + 4y].",
    "output": "import numpy as np\nv = np.array([1, -1])\nT = np.array([[2, 3], [-3, 4]])\nprint(T @ v)"
  },
  {
    "input": "Determine the result of T(x, y) = [x - y, 2x + 3y] on vector [3, 5].",
    "output": "import numpy as np\nv = np.array([3, 5])\nT = np.array([[1, -1], [2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [3x - y, x + 2y] to [2, -2].",
    "output": "import numpy as np\nv = np.array([2, -2])\nT = np.array([[3, -1], [1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-3, -1) where T(x, y) = [-2x + y, x - 3y].",
    "output": "import numpy as np\nv = np.array([-3, -1])\nT = np.array([[-2, 1], [1, -3]])\nprint(T @ v)"
  },
  {
    "input": "Find T(7, 0) under the transformation T(x, y) = [x + 3y, 4x - y].",
    "output": "import numpy as np\nv = np.array([7, 0])\nT = np.array([[1, 3], [4, -1]])\nprint(T @ v)"
  },
  {
    "input": "Transform [1, 4] using T(x, y) = [5x + y, -2x + y].",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[5, 1], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, -5) where T(x, y) = [x + y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([2, -5])\nT = np.array([[1, 1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of [3, 2] under T(x, y) = [3x + y, x - y].",
    "output": "import numpy as np\nv = np.array([3, 2])\nT = np.array([[3, 1], [1, -1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x, 2x + 5y] to the vector [-1, 3].",
    "output": "import numpy as np\nv = np.array([-1, 3])\nT = np.array([[1, 0], [2, 5]])\nprint(T @ v)"
  },
  {
    "input": "Let T be a transformation defined by T(x, y) = [3x - 2y, x + 4y]. Evaluate T on the vector [7, -3].",
    "output": "import numpy as np\nv = np.array([7, -3])\nT = np.array([[3, -2], [1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [4x + y, -2x + 3y] to the vector [-2, 5].",
    "output": "import numpy as np\nv = np.array([-2, 5])\nT = np.array([[4, 1], [-2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Find T(1, -7) where T(x, y) = [2x + 3y, 5x - y].",
    "output": "import numpy as np\nv = np.array([1, -7])\nT = np.array([[2, 3], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(3, 3) for the transformation T(x, y) = [x - y, 2x + y].",
    "output": "import numpy as np\nv = np.array([3, 3])\nT = np.array([[1, -1], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x + 2y, -3x + y] at the vector [0, -6].",
    "output": "import numpy as np\nv = np.array([0, -6])\nT = np.array([[1, 2], [-3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [7x + y, -x + 6y]. Evaluate T on the vector [3, 4].",
    "output": "import numpy as np\nv = np.array([3, 4])\nT = np.array([[7, 1], [-1, 6]])\nprint(T @ v)"
  },
  {
    "input": "Find T(-4, 2) for T(x, y) = [5x - y, x + y].",
    "output": "import numpy as np\nv = np.array([-4, 2])\nT = np.array([[5, -1], [1, 1]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [3x + 4y, -2x + y]. Compute T(6, -2).",
    "output": "import numpy as np\nv = np.array([6, -2])\nT = np.array([[3, 4], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(1, 2) where T(x, y) = [-x + 5y, 4x - 3y].",
    "output": "import numpy as np\nv = np.array([1, 2])\nT = np.array([[-1, 5], [4, -3]])\nprint(T @ v)"
  },
  {
    "input": "Given T(x, y) = [6x + 7y, 3x - 2y], compute T(-1, -1).",
    "output": "import numpy as np\nv = np.array([-1, -1])\nT = np.array([[6, 7], [3, -2]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [8x - y, -x + 2y] on the vector [0, 5].",
    "output": "import numpy as np\nv = np.array([0, 5])\nT = np.array([[8, -1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [-3x + 4y, 2x + y]. Find T(3, -5).",
    "output": "import numpy as np\nv = np.array([3, -5])\nT = np.array([[-3, 4], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(10, -3) where T(x, y) = [x + 6y, 2x - 5y].",
    "output": "import numpy as np\nv = np.array([10, -3])\nT = np.array([[1, 6], [2, -5]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(9, 4) under the transformation T(x, y) = [x - y, 4x + y].",
    "output": "import numpy as np\nv = np.array([9, 4])\nT = np.array([[1, -1], [4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [7x - 3y, -x - 4y]. Find T(2, 3).",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[7, -3], [-1, -4]])\nprint(T @ v)"
  },
  {
    "input": "Apply transformation T(x, y) = [5x + 2y, -2x + 4y] to vector [-3, 2].",
    "output": "import numpy as np\nv = np.array([-3, 2])\nT = np.array([[5, 2], [-2, 4]])\nprint(T @ v)"
  },
  {
    "input": "Compute the result of T(6, 6) for T(x, y) = [-x + y, 3x + 2y].",
    "output": "import numpy as np\nv = np.array([6, 6])\nT = np.array([[-1, 1], [3, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(0, 9) where T(x, y) = [4x + y, -6x + 2y].",
    "output": "import numpy as np\nv = np.array([0, 9])\nT = np.array([[4, 1], [-6, 2]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [x + y, 6x - 7y]. Find T(-5, -1).",
    "output": "import numpy as np\nv = np.array([-5, -1])\nT = np.array([[1, 1], [6, -7]])\nprint(T @ v)"
  },
  {
    "input": "Find the transformed vector T(7, 0) where T(x, y) = [-x + 2y, 5x + 3y].",
    "output": "import numpy as np\nv = np.array([7, 0])\nT = np.array([[-1, 2], [5, 3]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [2x + y, -3x + 4y]. Evaluate T(-6, 1).",
    "output": "import numpy as np\nv = np.array([-6, 1])\nT = np.array([[2, 1], [-3, 4]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(8, 2) where T(x, y) = [x - 2y, -x + 5y].",
    "output": "import numpy as np\nv = np.array([8, 2])\nT = np.array([[1, -2], [-1, 5]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [3x + 6y, -7x + y] to the vector [4, -1].",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[3, 6], [-7, 1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-2, 8) under the transformation T(x, y) = [x + 4y, 2x - 3y].",
    "output": "import numpy as np\nv = np.array([-2, 8])\nT = np.array([[1, 4], [2, -3]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [-4x + 2y, 5x - y]. Find T(3, -4).",
    "output": "import numpy as np\nv = np.array([3, -4])\nT = np.array([[-4, 2], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(4, -3) where T(x, y) = [2x + 3y, 4x - 5y].",
    "output": "import numpy as np\nv = np.array([4, -3])\nT = np.array([[2, 3], [4, -5]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [6x - y, -3x + 7y] to the vector [1, 6].",
    "output": "import numpy as np\nv = np.array([1, 6])\nT = np.array([[6, -1], [-3, 7]])\nprint(T @ v)"
  },
  {
    "input": "Find T(0, -9) where T(x, y) = [x + 2y, -2x - 3y].",
    "output": "import numpy as np\nv = np.array([0, -9])\nT = np.array([[1, 2], [-2, -3]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [-x + 5y, 7x - 2y]. Compute T(2, 3).",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[-1, 5], [7, -2]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [3x + 4y, 2x - 6y] to [5, -2].",
    "output": "import numpy as np\nv = np.array([5, -2])\nT = np.array([[3, 4], [2, -6]])\nprint(T @ v)"
  },
  {
    "input": "Compute the result of T(7, 7) for T(x, y) = [-2x + y, x + 8y].",
    "output": "import numpy as np\nv = np.array([7, 7])\nT = np.array([[-2, 1], [1, 8]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(6, -1) under the transformation T(x, y) = [4x - y, -5x + 3y].",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[4, -1], [-5, 3]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [x + y, 9x - 4y]. Find T(-4, -4).",
    "output": "import numpy as np\nv = np.array([-4, -4])\nT = np.array([[1, 1], [9, -4]])\nprint(T @ v)"
  },
  {
    "input": "Find T(3, 0) for the transformation T(x, y) = [-2x + 3y, 6x - y].",
    "output": "import numpy as np\nv = np.array([3, 0])\nT = np.array([[-2, 3], [6, -1]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [5x - 3y, -x - 6y]. Evaluate T(8, 1).",
    "output": "import numpy as np\nv = np.array([8, 1])\nT = np.array([[5, -3], [-1, -6]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, 6) where T(x, y) = [-4x + 2y, 3x + y].",
    "output": "import numpy as np\nv = np.array([2, 6])\nT = np.array([[-4, 2], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x - 3y, 7x + y] on [1, -2].",
    "output": "import numpy as np\nv = np.array([1, -2])\nT = np.array([[1, -3], [7, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find T(5, -5) for the transformation T(x, y) = [4x + y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([5, -5])\nT = np.array([[4, 1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [3x + 3y, 4x - y]. Evaluate T(-2, 4).",
    "output": "import numpy as np\nv = np.array([-2, 4])\nT = np.array([[3, 3], [4, -1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(0, 10) where T(x, y) = [-x + y, 3x + 4y].",
    "output": "import numpy as np\nv = np.array([0, 10])\nT = np.array([[-1, 1], [3, 4]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [6x + 2y, -2x + 5y]. Find T(-1, 8).",
    "output": "import numpy as np\nv = np.array([-1, 8])\nT = np.array([[6, 2], [-2, 5]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the transformation T(x, y) = [x + 6y, -4x + 2y] at vector [3, -2].",
    "output": "import numpy as np\nv = np.array([3, -2])\nT = np.array([[1, 6], [-4, 2]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [-6x + y, 3x + 2y] on the vector [-3, 3].",
    "output": "import numpy as np\nv = np.array([-3, 3])\nT = np.array([[-6, 1], [3, 2]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [4x - y, x - 5y]. Evaluate T(1, 4).",
    "output": "import numpy as np\nv = np.array([1, 4])\nT = np.array([[4, -1], [1, -5]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of T(-6, 5) where T(x, y) = [7x + y, -x - 3y].",
    "output": "import numpy as np\nv = np.array([-6, 5])\nT = np.array([[7, 1], [-1, -3]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [2x + 4y, -5x + y]. Compute T(0, -7).",
    "output": "import numpy as np\nv = np.array([0, -7])\nT = np.array([[2, 4], [-5, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [-4x + 3y, 6x + 5y] to vector [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT = np.array([[-4, 3], [6, 5]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(2, 9) where T(x, y) = [5x - 2y, -x + 4y].",
    "output": "import numpy as np\nv = np.array([2, 9])\nT = np.array([[5, -2], [-1, 4]])\nprint(T @ v)"
  },
  {
    "input": "Let T(x, y) = [3x + y, -2x - 3y]. Compute T(-7, 1).",
    "output": "import numpy as np\nv = np.array([-7, 1])\nT = np.array([[3, 1], [-2, -3]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x + 7y, -6x + 4y] on [4, 0].",
    "output": "import numpy as np\nv = np.array([4, 0])\nT = np.array([[1, 7], [-6, 4]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x + 2y, 3x - y] followed by T'(x, y) = [x - y, x + y] on the vector [3, -1].",
    "output": "import numpy as np\nv = np.array([3, -1])\nT1 = np.array([[1, 2], [3, -1]])\nT2 = np.array([[1, -1], [1, 1]])\nresult = T2 @ (T1 @ v)\nprint(\"Transformed vector:\", result)"
  },
  {
    "input": "Let T: R\u00c2\u00b2 \u00e2\u2020\u2019 R\u00c2\u00b2 be defined by T(x, y) = [4x - y, x + 2y]. Find T(2, 5).",
    "output": "import numpy as np\nv = np.array([2, 5])\nT = np.array([[4, -1], [1, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Compute the result of applying T(x, y) = [2x + 3y, -x + 4y] to the vector [-3, 7].",
    "output": "import numpy as np\nv = np.array([-3, 7])\nT = np.array([[2, 3], [-1, 4]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply the transformation matrix [[0, 2], [-2, 0]] to the vector [4, -1].",
    "output": "import numpy as np\nv = np.array([4, -1])\nT = np.array([[0, 2], [-2, 0]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Given the vector [5, 3], apply the reflection transformation T(x, y) = [-x, y].",
    "output": "import numpy as np\nv = np.array([5, 3])\nT = np.array([[-1, 0], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Transform the vector [-6, 2] using the matrix [[3, 1], [0, -2]].",
    "output": "import numpy as np\nv = np.array([-6, 2])\nT = np.array([[3, 1], [0, -2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Let T(x, y) = [x - 3y, 2x + y]. Find the result of T on (0, -4).",
    "output": "import numpy as np\nv = np.array([0, -4])\nT = np.array([[1, -3], [2, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find T(1, -5) where T(x, y) = [2x + 4y, -x + y].",
    "output": "import numpy as np\nv = np.array([1, -5])\nT = np.array([[2, 4], [-1, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply shear transformation T(x, y) = [x + 3y, y] on the vector [2, 6].",
    "output": "import numpy as np\nv = np.array([2, 6])\nT = np.array([[1, 3], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Rotate the vector [2, 2] by 90 degrees counterclockwise using a transformation matrix.",
    "output": "import numpy as np\nv = np.array([2, 2])\nT = np.array([[0, -1], [1, 0]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Scale the vector [-1, 8] by 2 in x-direction and 0.5 in y-direction.",
    "output": "import numpy as np\nv = np.array([-1, 8])\nT = np.array([[2, 0], [0, 0.5]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [x + y, 2x - y] on vector [-4, 3].",
    "output": "import numpy as np\nv = np.array([-4, 3])\nT = np.array([[1, 1], [2, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Use transformation matrix [[5, -1], [1, 2]] on vector [1, 1].",
    "output": "import numpy as np\nv = np.array([1, 1])\nT = np.array([[5, -1], [1, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "What is the result of applying T(x, y) = [x - y, -2x + 3y] on vector [7, -2]?",
    "output": "import numpy as np\nv = np.array([7, -2])\nT = np.array([[1, -1], [-2, 3]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Find the output of T(x, y) = [-x + y, x + y] when applied to (4, -3).",
    "output": "import numpy as np\nv = np.array([4, -3])\nT = np.array([[-1, 1], [1, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply a horizontal shear T(x, y) = [x + 0.5y, y] on vector [3, 4].",
    "output": "import numpy as np\nv = np.array([3, 4])\nT = np.array([[1, 0.5], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply vertical shear T(x, y) = [x, y + 2x] to vector [-3, 2].",
    "output": "import numpy as np\nv = np.array([-3, 2])\nT = np.array([[1, 0], [2, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Reflect the vector [6, -1] over the y-axis using matrix representation.",
    "output": "import numpy as np\nv = np.array([6, -1])\nT = np.array([[-1, 0], [0, 1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply transformation matrix [[-1, -2], [3, 0]] to vector [2, 3].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[-1, -2], [3, 0]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply T(x, y) = [3x, -2y] to the vector [1, -3].",
    "output": "import numpy as np\nv = np.array([1, -3])\nT = np.array([[3, 0], [0, -2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Apply the transformation matrix [[1, -3], [-1, 2]] to vector [-2, 5].",
    "output": "import numpy as np\nv = np.array([-2, 5])\nT = np.array([[1, -3], [-1, 2]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Rotate the vector [1, 0] by 180 degrees using a transformation matrix.",
    "output": "import numpy as np\nv = np.array([1, 0])\nT = np.array([[-1, 0], [0, -1]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Use T(x, y) = [-2x + y, 3x + 4y] to transform vector [2, 1].",
    "output": "import numpy as np\nv = np.array([2, 1])\nT = np.array([[-2, 1], [3, 4]])\nprint(\"Transformed vector:\", T @ v)"
  },
  {
    "input": "Evaluate the composition of T1(x, y) = [2x, y - x] and T2(x, y) = [x + y, x - y] on the vector [3, 1].",
    "output": "import numpy as np\nv = np.array([3, 1])\nT1 = np.array([[2, 0], [-1, 1]])\nT2 = np.array([[1, 1], [1, -1]])\nresult = T2 @ (T1 @ v)\nprint(\"Transformed vector:\", result)"
  },
  {
    "input": "Apply the transformation T(x, y) = [4x - 3y, 2x + y] to the vector (7, -5).",
    "output": "import numpy as np\nv = np.array([7, -5])\nT = np.array([[4, -3], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of vector (-4, 6) under T(x, y) = [-x + 2y, 3x - y].",
    "output": "import numpy as np\nv = np.array([-4, 6])\nT = np.array([[-1, 2], [3, -1]])\nprint(T @ v)"
  },
  {
    "input": "What is T(8, -3) if T(x, y) = [x + 4y, 2x - 5y]?",
    "output": "import numpy as np\nv = np.array([8, -3])\nT = np.array([[1, 4], [2, -5]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate the linear transformation T(x, y) = [6x + y, x - 7y] for vector (1, 9).",
    "output": "import numpy as np\nv = np.array([1, 9])\nT = np.array([[6, 1], [1, -7]])\nprint(T @ v)"
  },
  {
    "input": "Compute the result of T(5, 2) for T(x, y) = [3x + 2y, -4x + y].",
    "output": "import numpy as np\nv = np.array([5, 2])\nT = np.array([[3, 2], [-4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Transform the vector (2, -6) using T(x, y) = [5x - y, x + 3y].",
    "output": "import numpy as np\nv = np.array([2, -6])\nT = np.array([[5, -1], [1, 3]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [7x + 4y, -2x + 3y] to the vector (-1, 5).",
    "output": "import numpy as np\nv = np.array([-1, 5])\nT = np.array([[7, 4], [-2, 3]])\nprint(T @ v)"
  },
  {
    "input": "What is the transformed vector T(3, 6) under T(x, y) = [x - y, 5x + 2y]?",
    "output": "import numpy as np\nv = np.array([3, 6])\nT = np.array([[1, -1], [5, 2]])\nprint(T @ v)"
  },
  {
    "input": "Find T(9, -7) for T(x, y) = [2x + y, 4x - 3y].",
    "output": "import numpy as np\nv = np.array([9, -7])\nT = np.array([[2, 1], [4, -3]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(0, 8) where T(x, y) = [3x - 2y, -5x + 4y].",
    "output": "import numpy as np\nv = np.array([0, 8])\nT = np.array([[3, -2], [-5, 4]])\nprint(T @ v)"
  },
  {
    "input": "Transform vector (11, 4) under T(x, y) = [x + 6y, -2x + y].",
    "output": "import numpy as np\nv = np.array([11, 4])\nT = np.array([[1, 6], [-2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the output of T(-6, 3) under transformation T(x, y) = [2x - 5y, 3x + y].",
    "output": "import numpy as np\nv = np.array([-6, 3])\nT = np.array([[2, -5], [3, 1]])\nprint(T @ v)"
  },
  {
    "input": "Apply T(x, y) = [x - 3y, 4x + y] on vector (-2, -7).",
    "output": "import numpy as np\nv = np.array([-2, -7])\nT = np.array([[1, -3], [4, 1]])\nprint(T @ v)"
  },
  {
    "input": "Compute T(5, 10) for transformation T(x, y) = [7x + y, -x + 2y].",
    "output": "import numpy as np\nv = np.array([5, 10])\nT = np.array([[7, 1], [-1, 2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(4, -2) where T(x, y) = [3x + 2y, 5x - y].",
    "output": "import numpy as np\nv = np.array([4, -2])\nT = np.array([[3, 2], [5, -1]])\nprint(T @ v)"
  },
  {
    "input": "Find the image of (7, 2) under transformation T(x, y) = [6x - y, -2x + 4y].",
    "output": "import numpy as np\nv = np.array([7, 2])\nT = np.array([[6, -1], [-2, 4]])\nprint(T @ v)"
  },
  {
    "input": "What is T(3, -3) under T(x, y) = [4x + y, x - 6y]?",
    "output": "import numpy as np\nv = np.array([3, -3])\nT = np.array([[4, 1], [1, -6]])\nprint(T @ v)"
  },
  {
    "input": "Find the transformed vector of (10, 1) with T(x, y) = [x - 5y, 2x + 3y].",
    "output": "import numpy as np\nv = np.array([10, 1])\nT = np.array([[1, -5], [2, 3]])\nprint(T @ v)"
  },
  {
    "input": "Apply the linear transformation T(x, y) = [5x + 2y, -3x + 4y] to vector (2, -1).",
    "output": "import numpy as np\nv = np.array([2, -1])\nT = np.array([[5, 2], [-3, 4]])\nprint(T @ v)"
  },
  {
    "input": "Transform (6, -3) using T(x, y) = [-x + 6y, 2x + y].",
    "output": "import numpy as np\nv = np.array([6, -3])\nT = np.array([[-1, 6], [2, 1]])\nprint(T @ v)"
  },
  {
    "input": "Find the result of T(0, 11) where T(x, y) = [3x + y, 6x - 2y].",
    "output": "import numpy as np\nv = np.array([0, 11])\nT = np.array([[3, 1], [6, -2]])\nprint(T @ v)"
  },
  {
    "input": "Evaluate T(-5, 4) for T(x, y) = [7x + y, x - 4y].",
    "output": "import numpy as np\nv = np.array([-5, 4])\nT = np.array([[7, 1], [1, -4]])\nprint(T @ v)"
  },
  {
    "input": "Compute the output of T(2, 3) under T(x, y) = [-x - y, 2x + 5y].",
    "output": "import numpy as np\nv = np.array([2, 3])\nT = np.array([[-1, -1], [2, 5]])\nprint(T @ v)"
  },
  {
    "input": "Apply the transformation T(x, y) = [8x - 2y, -4x + 3y] to vector (3, -2).",
    "output": "import numpy as np\nv = np.array([3, -2])\nT = np.array([[8, -2], [-4, 3]])\nprint(T @ v)"
  },
  {
    "input": "What is T(-1, 7) under T(x, y) = [x + 2y, -6x + y]?",
    "output": "import numpy as np\nv = np.array([-1, 7])\nT = np.array([[1, 2], [-6, 1]])\nprint(T @ v)"
  },
  {
    "input": "Determine the matrix representation of a 90-degree counterclockwise rotation in R\u00c2\u00b2.",
    "output": "import numpy as np\nT = np.array([[0, -1], [1, 0]])\nprint(T)"
  },
  {
    "input": "What is the matrix that scales vectors in R\u00c2\u00b2 by 4 in the x-direction and 2 in the y-direction?",
    "output": "import numpy as np\nT = np.array([[4, 0], [0, 2]])\nprint(T)"
  },
  {
    "input": "Find the matrix representation of the linear transformation that projects any vector in R\u00c2\u00b2 onto the x-axis.",
    "output": "import numpy as np\nT = np.array([[1, 0], [0, 0]])\nprint(T)"
  },
  {
    "input": "Give the matrix representation for a transformation in R\u00c2\u00b2 that reflects across the x-axis.",
    "output": "import numpy as np\nT = np.array([[1, 0], [0, -1]])\nprint(T)"
  },
  {
    "input": "Find the matrix that rotates vectors in R\u00c2\u00b2 by 180 degrees.",
    "output": "import numpy as np\nT = np.array([[-1, 0], [0, -1]])\nprint(T)"
  },
  {
    "input": "What is the matrix representation of the linear transformation that doubles all vectors in R\u00c2\u00b2?",
    "output": "import numpy as np\nT = np.array([[2, 0], [0, 2]])\nprint(T)"
  },
  {
    "input": "Find the matrix for a linear transformation that swaps the x and y coordinates of vectors in R\u00c2\u00b2.",
    "output": "import numpy as np\nT = np.array([[0, 1], [1, 0]])\nprint(T)"
  },
  {
    "input": "Determine the matrix that projects vectors in R\u00c2\u00b2 onto the line y = x.",
    "output": "import numpy as np\nT = np.array([[0.5, 0.5], [0.5, 0.5]])\nprint(T)"
  },
  {
    "input": "Give the matrix for a shear in the x-direction with factor 3.",
    "output": "import numpy as np\nT = np.array([[1, 3], [0, 1]])\nprint(T)"
  },
  {
    "input": "Find the matrix that performs a shear in the y-direction with factor -2.",
    "output": "import numpy as np\nT = np.array([[1, 0], [-2, 1]])\nprint(T)"
  },
  {
    "input": "What is the matrix that rotates vectors in R\u00c2\u00b2 by 45 degrees counterclockwise?",
    "output": "import numpy as np\nimport math\nangle = math.radians(45)\nT = np.array([[math.cos(angle), -math.sin(angle)], [math.sin(angle), math.cos(angle)]])\nprint(T)"
  },
  {
    "input": "Give the matrix representation for a dilation by a factor of 5 in all directions.",
    "output": "import numpy as np\nT = np.array([[5, 0], [0, 5]])\nprint(T)"
  },
  {
    "input": "Find the matrix that performs a vertical reflection in R\u00c2\u00b2.",
    "output": "import numpy as np\nT = np.array([[-1, 0], [0, 1]])\nprint(T)"
  },
  {
    "input": "What is the matrix representation of a projection onto the y-axis?",
    "output": "import numpy as np\nT = np.array([[0, 0], [0, 1]])\nprint(T)"
  },
  {
    "input": "Give the matrix that rotates vectors 270 degrees counterclockwise in R\u00c2\u00b2.",
    "output": "import numpy as np\nT = np.array([[0, 1], [-1, 0]])\nprint(T)"
  },
  {
    "input": "Find the matrix representing a horizontal reflection across the y-axis.",
    "output": "import numpy as np\nT = np.array([[-1, 0], [0, 1]])\nprint(T)"
  },
  {
    "input": "What is the matrix that maps every vector in R\u00c2\u00b2 to the zero vector?",
    "output": "import numpy as np\nT = np.array([[0, 0], [0, 0]])\nprint(T)"
  },
  {
    "input": "Determine the matrix that reflects vectors across the line y = -x.",
    "output": "import numpy as np\nT = np.array([[0, -1], [-1, 0]])\nprint(T)"
  },
  {
    "input": "Give the matrix for a transformation that rotates vectors by 60 degrees counterclockwise.",
    "output": "import numpy as np\nimport math\nangle = math.radians(60)\nT = np.array([[math.cos(angle), -math.sin(angle)], [math.sin(angle), math.cos(angle)]])\nprint(T)"
  },
  {
    "input": "What is the matrix that maps a vector (x, y) to (3x, 2y)?",
    "output": "import numpy as np\nT = np.array([[3, 0], [0, 2]])\nprint(T)"
  },
  {
    "input": "Find the matrix representation of a transformation that triples the x-component and halves the y-component of a vector.",
    "output": "import numpy as np\nT = np.array([[3, 0], [0, 0.5]])\nprint(T)"
  },
  {
    "input": "What is the matrix that adds the x and y components and assigns it to both components?",
    "output": "import numpy as np\nT = np.array([[1, 1], [1, 1]])\nprint(T)"
  },
  {
    "input": "Give the matrix for a transformation T(x, y) = (x + 2y, x + y).",
    "output": "import numpy as np\nT = np.array([[1, 2], [1, 1]])\nprint(T)"
  },
  {
    "input": "Add the matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply the matrices A = [[2, 4], [6, 8]] and B = [[1, 3], [5, 7]].",
    "output": "import numpy as np\nA = np.array([[2, 4], [6, 8]])\nB = np.array([[1, 3], [5, 7]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Determine the inverse of matrix A = [[4, 7], [2, 6]].",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[3, 5], [7, 9]] and B = [[2, 4], [6, 8]].",
    "output": "import numpy as np\nA = np.array([[3, 5], [7, 9]])\nB = np.array([[2, 4], [6, 8]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply the matrices A = [[1, 0], [0, 1]] and B = [[5, 6], [7, 8]].",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\nB = np.array([[5, 6], [7, 8]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[2, 4, 6], [8, 10, 12]].",
    "output": "import numpy as np\nA = np.array([[2, 4, 6], [8, 10, 12]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Determine the inverse of matrix A = [[1, 2], [3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[0, 1], [1, 0]] and B = [[1, 1], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [1, 0]])\nB = np.array([[1, 1], [1, 1]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply the matrices A = [[2, 3], [4, 5]] and B = [[6, 7], [8, 9]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[6, 7], [8, 9]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[1, 3, 5], [7, 9, 11]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 5], [7, 9, 11]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Determine the inverse of matrix A = [[3, 4], [2, 5]].",
    "output": "import numpy as np\nA = np.array([[3, 4], [2, 5]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[5, 5], [5, 5]] and B = [[2, 2], [2, 2]].",
    "output": "import numpy as np\nA = np.array([[5, 5], [5, 5]])\nB = np.array([[2, 2], [2, 2]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply the matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[0, 2, 4], [6, 8, 10]].",
    "output": "import numpy as np\nA = np.array([[0, 2, 4], [6, 8, 10]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Determine the inverse of matrix A = [[7, 2], [3, 4]].",
    "output": "import numpy as np\nA = np.array([[7, 2], [3, 4]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[9, 8], [7, 6]] and B = [[1, 2], [3, 4]].",
    "output": "import numpy as np\nA = np.array([[9, 8], [7, 6]])\nB = np.array([[1, 2], [3, 4]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[2, 3], [4, 5]] and B = [[6, 7], [8, 9]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[6, 7], [8, 9]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply the matrices A = [[3, 1], [4, 2]] and B = [[5, 6], [7, 8]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [4, 2]])\nB = np.array([[5, 6], [7, 8]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[1, 4, 7], [2, 5, 8]].",
    "output": "import numpy as np\nA = np.array([[1, 4, 7], [2, 5, 8]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Determine the inverse of matrix A = [[4, 3], [3, 2]].",
    "output": "import numpy as np\nA = np.array([[4, 3], [3, 2]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Add the matrices A = [[1, 1], [1, 1]] and B = [[2, 2], [2, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]])\nB = np.array([[2, 2], [2, 2]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Given matrices A = [[3, 5], [7, 9]] and B = [[2, 4], [6, 8]], compute the product AB and then find the transpose of the result.",
    "output": "import numpy as np\nA = np.array([[3, 5], [7, 9]])\nB = np.array([[2, 4], [6, 8]])\nproduct = np.dot(A, B)\nresult = np.transpose(product)\nprint(result)"
  },
  {
    "input": "For matrix A = [[2, -1, 0], [1, 3, 2], [0, 4, 5]], calculate the determinant and verify if A is invertible.",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [1, 3, 2], [0, 4, 5]])\ndet_A = np.linalg.det(A)\nprint('Determinant:', det_A)\nif det_A != 0:\n    print('Matrix is invertible')\nelse:\n    print('Matrix is not invertible')"
  },
  {
    "input": "Compute the inverse of matrix A = [[4, 7], [2, 6]] and verify the result by multiplying A with its inverse.",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\nA_inv = np.linalg.inv(A)\nverification = np.dot(A, A_inv)\nprint('Inverse of A:', A_inv)\nprint('Verification (A * A_inv):', verification)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute AB - BA.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nresult = AB - BA\nprint(result)"
  },
  {
    "input": "For matrix A = [[0, -1], [1, 0]], compute A^3.",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\nA_cubed = np.linalg.matrix_power(A, 3)\nprint(A_cubed)"
  },
  {
    "input": "Determine if the matrix A = [[2, 3], [2, 3]] is singular or non-singular.",
    "output": "import numpy as np\nA = np.array([[2, 3], [2, 3]])\ndet_A = np.linalg.det(A)\nif det_A == 0:\n    print('Matrix is singular')\nelse:\n    print('Matrix is non-singular')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of matrix A = [[4, -2], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[4, -2], [1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Given matrix A = [[3, 1], [4, 2]], compute the determinant of A^2.",
    "output": "import numpy as np\nA = np.array([[3, 1], [4, 2]])\nA_squared = np.dot(A, A)\ndet_A_squared = np.linalg.det(A_squared)\nprint(det_A_squared)"
  },
  {
    "input": "Verify if matrix A = [[1, 2], [3, 4]] satisfies the equation A^2 - 5A + 6I = 0, where I is the identity matrix.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nI = np.identity(2)\nleft_side = np.dot(A, A) - 5*A + 6*I\nprint(left_side)"
  },
  {
    "input": "Compute the rank of matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank_A = np.linalg.matrix_rank(A)\nprint(rank_A)"
  },
  {
    "input": "For matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], verify if (AB)^T = B^T A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nAB_transpose = np.transpose(np.dot(A, B))\nBT_AT = np.dot(np.transpose(B), np.transpose(A))\nprint(np.array_equal(AB_transpose, BT_AT))"
  },
  {
    "input": "Given matrix A = [[2, 3], [5, 7]], compute the inverse of A and then find the inverse of A^T.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 7]])\nA_inv = np.linalg.inv(A)\nA_T_inv = np.linalg.inv(np.transpose(A))\nprint('Inverse of A:', A_inv)\nprint('Inverse of A^T:', A_T_inv)"
  },
  {
    "input": "Compute the determinant of the 3x3 matrix A = [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndet_A = np.linalg.det(A)\nprint(det_A)"
  },
  {
    "input": "Find the trace (sum of diagonal elements) of matrix A = [[4, 2], [3, 1]].",
    "output": "import numpy as np\nA = np.array([[4, 2], [3, 1]])\ntrace_A = np.trace(A)\nprint(trace_A)"
  },
  {
    "input": "Multiply the matrices A = [[2, 0], [1, 3]] and B = [[4, 5], [6, 7]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [1, 3]])\nB = np.array([[4, 5], [6, 7]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Compute the product of matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], then find the transpose of the result.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nproduct = np.dot(A, B)\nresult = np.transpose(product)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 1], [4, 2]], compute A squared (A^2).",
    "output": "import numpy as np\nA = np.array([[3, 1], [4, 2]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Find the inverse of matrix A = [[2, 3], [5, 7]] and verify by multiplying A with its inverse.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 7]])\nA_inv = np.linalg.inv(A)\nverification = np.dot(A, A_inv)\nprint('Inverse of A:', A_inv)\nprint('Verification (A * A_inv):', verification)"
  },
  {
    "input": "Compute the determinant of matrix A = [[1, 2], [3, 4]] and determine if A is invertible.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ndet_A = np.linalg.det(A)\nprint('Determinant:', det_A)\nif det_A != 0:\n    print('Matrix is invertible')\nelse:\n    print('Matrix is not invertible')"
  },
  {
    "input": "For matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], verify if AB = BA.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nprint('AB:', AB)\nprint('BA:', BA)\nprint('Are AB and BA equal?', np.array_equal(AB, BA))"
  },
  {
    "input": "Given matrix A = [[2, -1], [1, 3]], find A^3 (A cubed).",
    "output": "import numpy as np\nA = np.array([[2, -1], [1, 3]])\nA_cubed = np.linalg.matrix_power(A, 3)\nprint(A_cubed)"
  },
  {
    "input": "Compute the inverse of matrix A = [[4, 7], [2, 6]] and then find the inverse of A^T (transpose of A).",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\nA_inv = np.linalg.inv(A)\nA_T_inv = np.linalg.inv(np.transpose(A))\nprint('Inverse of A:', A_inv)\nprint('Inverse of A^T:', A_T_inv)"
  },
  {
    "input": "For matrix A = [[0, -1], [1, 0]], compute A^4.",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\nA_fourth = np.linalg.matrix_power(A, 4)\nprint(A_fourth)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], verify if (AB)^T = B^T A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nAB_transpose = np.transpose(np.dot(A, B))\nBT_AT = np.dot(np.transpose(B), np.transpose(A))\nprint('Is (AB)^T equal to B^T A^T?', np.array_equal(AB_transpose, BT_AT))"
  },
  {
    "input": "Compute the rank of matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank_A = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank_A)"
  },
  {
    "input": "For matrix A = [[2, 3], [5, 7]], compute the determinant of A^2.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 7]])\nA_squared = A @ A\ndet = np.linalg.det(A_squared)\nprint(det)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "For matrix A = [[2, 3], [5, 7]], compute the determinant of A^2.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 7]])\ndet_A_squared = np.linalg.det(np.dot(A, A))\nprint('Determinant of A^2:', det_A_squared)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], compute A + B and A - B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nsum_result = A + B\ndiff_result = A - B\nprint(\"A + B =\\n\", sum_result)\nprint(\"A - B =\\n\", diff_result)"
  },
  {
    "input": "Given matrices A = [[2, 3], [4, 5]] and B = [[1, 2], [3, 4]], compute A + B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[1, 2], [3, 4]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Given matrices A = [[2, 3], [4, 5]] and B = [[1, 2], [3, 4]], compute A - B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[1, 2], [3, 4]])\nresult = A - B\nprint(result)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute A * B and B * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult_AB = np.dot(A, B)\nresult_BA = np.dot(B, A)\nprint('A * B =', result_AB)\nprint('B * A =', result_BA)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the transpose of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^2.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^3.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.linalg.matrix_power(A, 3)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the rank of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nrank_A = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the trace of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ntrace_A = np.trace(A)\nprint('Trace of A:', trace_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the eigenvalues of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\neigenvalues_A = np.linalg.eigvals(A)\nprint('Eigenvalues of A:', eigenvalues_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the eigenvectors of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\neigenvalues_A, eigenvectors_A = np.linalg.eig(A)\nprint('Eigenvectors of A:', eigenvectors_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the singular value decomposition of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nU, S, Vt = np.linalg.svd(A)\nprint('U:', U)\nprint('S:', S)\nprint('Vt:', Vt)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the Moore-Penrose pseudoinverse of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nA_pseudo_inv = np.linalg.pinv(A)\nprint('Moore-Penrose pseudoinverse of A:', A_pseudo_inv)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute A + B and A - B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult_add = A + B\nresult_sub = A - B\nprint('A + B =', result_add)\nprint('A - B =', result_sub)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute A + B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute A - B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = A - B\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]] and B = [[1, 2], [3, 4]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[1, 2], [3, 4]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]] and B = [[1, 2], [3, 4]], compute A + B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[1, 2], [3, 4]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]] and B = [[1, 2], [3, 4]], compute A - B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[1, 2], [3, 4]])\nresult = A - B\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A^2.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the rank of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nrank_A = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank_A)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the trace of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\ntrace_A = np.trace(A)\nprint('Trace of A:', trace_A)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the eigenvalues of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\neigenvalues_A = np.linalg.eigvals(A)\nprint('Eigenvalues of A:', eigenvalues_A)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the eigenvectors of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\neigenvalues_A, eigenvectors_A = np.linalg.eig(A)\nprint('Eigenvectors of A:', eigenvectors_A)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute AB and BA.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nprint('AB =', AB)\nprint('BA =', BA)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the inverse of A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nA_inv_T = np.linalg.inv(np.transpose(A))\nprint(A_inv_T)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the determinant of A^2.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ndet_A_squared = np.linalg.det(np.dot(A, A))\nprint('Determinant of A^2:', det_A_squared)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^2 + A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(A, A) + A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A + A^T.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = A + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 4], [5, 6]], compute the eigenvectors and eigenvalues of A.",
    "output": "import numpy as np\nA = np.array([[3, 4], [5, 6]])\neigenvalues_A, eigenvectors_A = np.linalg.eig(A)\nprint('Eigenvalues of A:', eigenvalues_A)\nprint('Eigenvectors of A:', eigenvectors_A)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[2, 0], [1, 2]], compute A * B and check if it equals B * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nprint('AB =', AB)\nprint('BA =', BA)\nprint('Are AB and BA equal?', np.array_equal(AB, BA))"
  },
  {
    "input": "Given matrix A = [[4, 7], [2, 6]], compute the inverse of A and verify by multiplying it with A.",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\nA_inv = np.linalg.inv(A)\nverification = np.dot(A, A_inv)\nprint('Inverse of A:', A_inv)\nprint('Verification (A * A_inv):', verification)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2, 3], [4, 5, 6]], compute the rank of A.",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]])\nrank_A = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank_A)"
  },
  {
    "input": "Given matrix A = [[4, 7], [2, 6]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute AB and verify if AB equals BA.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nprint('AB =', AB)\nprint('BA =', BA)\nprint('Is AB equal to BA?', np.array_equal(AB, BA))"
  },
  {
    "input": "Given matrix A = [[1, 1], [1, 1]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]])\ntry:\n    result = np.linalg.inv(A)\n    print(result)\nexcept np.linalg.LinAlgError:\n    print('Matrix is singular and cannot be inverted')"
  },
  {
    "input": "Given matrices A = [[2, 4], [1, 3]] and B = [[5, 6], [7, 8]], compute the product A * B.",
    "output": "import numpy as np\nA = np.array([[2, 4], [1, 3]])\nB = np.array([[5, 6], [7, 8]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 0], [0, 1]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[5, 7], [1, 3]], compute A * 2.",
    "output": "import numpy as np\nA = np.array([[5, 7], [1, 3]])\nresult = 2 * A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]] and B = [[4, 3], [2, 1]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[4, 3], [2, 1]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 5], [2, 4]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[3, 5], [2, 4]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrices A = [[3, 5], [2, 4]] and B = [[1, 2], [3, 4]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[3, 5], [2, 4]])\nB = np.array([[1, 2], [3, 4]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A^3.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = np.linalg.matrix_power(A, 3)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2, 3], [4, 5, 6]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 1], [1, 1]], compute A^2.",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^T * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(np.transpose(A), A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[5, 6], [7, 8]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[5, 6], [7, 8]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 4], [2, 1]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[3, 4], [2, 1]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[5, 6], [7, 8]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[5, 6], [7, 8]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrices A = [[1, 2], [3, 4]] and B = [[2, 1], [4, 3]], compute AB.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 1], [4, 3]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrices A = [[1, 0], [0, 1]] and B = [[2, 3], [4, 5]], compute AB.",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\nB = np.array([[2, 3], [4, 5]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 5], [7, 9]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[3, 5], [7, 9]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 0], [0, 1]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the trace of A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ntrace_A_T = np.trace(np.transpose(A))\nprint('Trace of A^T:', trace_A_T)"
  },
  {
    "input": "Given matrix A = [[2, 1], [3, 4]], compute A + A^T.",
    "output": "import numpy as np\nA = np.array([[2, 1], [3, 4]])\nresult = A + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 1, 1], [2, 2, 2], [3, 3, 3]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\ntry:\n    result = np.linalg.inv(A)\n    print(result)\nexcept np.linalg.LinAlgError:\n    print('Matrix is singular and cannot be inverted')"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]] and B = [[4, 3], [2, 1]], compute A * B and B * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[4, 3], [2, 1]])\nAB = np.dot(A, B)\nBA = np.dot(B, A)\nprint('AB =', AB)\nprint('BA =', BA)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^T * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(np.transpose(A), np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 2], [1, 4]], compute the determinant of A * A^T.",
    "output": "import numpy as np\nA = np.array([[3, 2], [1, 4]])\ndet_A_A_T = np.linalg.det(np.dot(A, np.transpose(A)))\nprint('Determinant of A * A^T:', det_A_A_T)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 1], [2, 4]], compute A * A^2.",
    "output": "import numpy as np\nA = np.array([[3, 1], [2, 4]])\nresult = np.dot(A, np.dot(A, A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A * 3.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = 3 * A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute A^2 + A^T.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\nresult = np.dot(A, A) + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [5, 6]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 6]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 1], [3, 4]], compute A^T * A.",
    "output": "import numpy as np\nA = np.array([[2, 1], [3, 4]])\nresult = np.dot(np.transpose(A), A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A * 0.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = 0 * A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 6], [7, 1]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[3, 6], [7, 1]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 5], [3, 6]], compute A^2.",
    "output": "import numpy as np\nA = np.array([[2, 5], [3, 6]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 0], [0, 1]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[4, 3], [2, 1]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[4, 3], [2, 1]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A + A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = A + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 1], [1, 1]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[2, 3], [5, 6]], compute A * B where B = [[1, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 6]])\nB = np.array([[1, 0], [0, 1]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [4, 5]], compute A^T * A.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nresult = np.dot(np.transpose(A), A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[4, 2], [1, 3]], compute the inverse of A * A^T.",
    "output": "import numpy as np\nA = np.array([[4, 2], [1, 3]])\nresult = np.linalg.inv(np.dot(A, np.transpose(A)))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 5], [7, 1]], compute A^2.",
    "output": "import numpy as np\nA = np.array([[3, 5], [7, 1]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute the transpose of A^2.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\nresult = np.transpose(np.dot(A, A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 5], [1, 3]], compute A^T * A + A.",
    "output": "import numpy as np\nA = np.array([[2, 5], [1, 3]])\nresult = np.dot(np.transpose(A), A) + A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[5, 4], [3, 6]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[5, 4], [3, 6]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]] and B = [[5, 6], [7, 8]], compute the matrix A + B^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = A + np.transpose(B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the matrix A^T * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.dot(np.transpose(A), A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 1], [1, 2]], compute the inverse of A.",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [2, 1]], compute A * 3 + A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1]])\nresult = np.dot(3, A) + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the determinant of A * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ndet_A_A_T = np.linalg.det(np.dot(A, np.transpose(A)))\nprint('Determinant of A * A^T:', det_A_A_T)"
  },
  {
    "input": "Given matrix A = [[3, 1], [2, 4]], compute the trace of A^2.",
    "output": "import numpy as np\nA = np.array([[3, 1], [2, 4]])\nresult = np.trace(np.dot(A, A))\nprint('Trace of A^2:', result)"
  },
  {
    "input": "Given matrix A = [[3, 1], [2, 4]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[3, 1], [2, 4]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute the inverse of A * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\nresult = np.linalg.inv(np.dot(A, np.transpose(A)))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[4, 7], [2, 6]], compute A^2 + A.",
    "output": "import numpy as np\nA = np.array([[4, 7], [2, 6]])\nresult = np.dot(A, A) + A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 3], [5, 6]], compute the inverse of A * A^T.",
    "output": "import numpy as np\nA = np.array([[2, 3], [5, 6]])\nresult = np.linalg.inv(np.dot(A, np.transpose(A)))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 1], [1, 1]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 1], [4, 2]], compute A + A^T.",
    "output": "import numpy as np\nA = np.array([[3, 1], [4, 2]])\nresult = A + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute the determinant of A^T * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\ndet_A_T_A = np.linalg.det(np.dot(np.transpose(A), A))\nprint('Determinant of A^T * A:', det_A_T_A)"
  },
  {
    "input": "Given matrix A = [[3, 1], [4, 2]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[3, 1], [4, 2]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[4, 3], [2, 1]], compute the determinant of A * A^T.",
    "output": "import numpy as np\nA = np.array([[4, 3], [2, 1]])\ndet_A_A_T = np.linalg.det(np.dot(A, np.transpose(A)))\nprint('Determinant of A * A^T:', det_A_A_T)"
  },
  {
    "input": "Given matrix A = [[5, 4], [3, 2]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[5, 4], [3, 2]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[2, 1], [1, 2]], compute A * A.",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]])\nresult = np.dot(A, A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A * 2.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = 2 * A\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 0], [0, 1]], compute A * A^T.",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 1]])\nresult = np.dot(A, np.transpose(A))\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute the determinant of A^T.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\ndet_A_T = np.linalg.det(np.transpose(A))\nprint('Determinant of A^T:', det_A_T)"
  },
  {
    "input": "Given matrix A = [[3, 6], [1, 2]], compute A + A^T.",
    "output": "import numpy as np\nA = np.array([[3, 6], [1, 2]])\nresult = A + np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrices A = [[2, 3], [4, 5]] and B = [[6, 7], [8, 9]], compute A * B.",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5]])\nB = np.array([[6, 7], [8, 9]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[3, 5], [2, 1]], compute the determinant of A.",
    "output": "import numpy as np\nA = np.array([[3, 5], [2, 1]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Given matrix A = [[1, 3], [2, 4]], compute the trace of A.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\ntrace_A = np.trace(A)\nprint('Trace of A:', trace_A)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute A^T.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = np.transpose(A)\nprint(result)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute 3 * A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nresult = 3 * A\nprint(result)"
  },
  {
    "input": "Verify if the set of vectors {(1, 2), (3, 4)} forms a basis for R^2.",
    "output": "import numpy as np\nvectors = np.array([[1, 2], [3, 4]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 2:\n    print('The set forms a basis for R^2.')\nelse:\n    print('The set does not form a basis for R^2.')"
  },
  {
    "input": "Determine if the vector (5, 6) is in the span of {(1, 2), (3, 4)}.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]])\nb = np.array([5, 6])\ntry:\n    coeffs = np.linalg.solve(A, b)\n    print('The vector is in the span. Coefficients:', coeffs)\nexcept np.linalg.LinAlgError:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find the dimension of the vector space spanned by {(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 1)}.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]])\nrank = np.linalg.matrix_rank(vectors)\nprint('The dimension of the spanned vector space is:', rank)"
  },
  {
    "input": "Check if the set {(1, 2, 3), (4, 5, 6), (7, 8, 9)} is linearly independent.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == len(vectors):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Compute the projection of vector (3, 4) onto vector (1, 2).",
    "output": "import numpy as np\nv = np.array([3, 4])\nu = np.array([1, 2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection of v onto u:', projection)"
  },
  {
    "input": "Find a basis for the null space of matrix [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 2, 3], [4, 5, 6]])\nnull_basis = null_space(A)\nprint('Basis for the null space:', null_basis)"
  },
  {
    "input": "Determine if the zero vector is in the span of {(1, 2), (3, 4)}.",
    "output": "print('The zero vector is always in the span of any set of vectors.')"
  },
  {
    "input": "Check if {(1, 0), (0, 1)} forms an orthonormal set.",
    "output": "import numpy as np\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\nif np.allclose(np.dot(v1, v2), 0) and np.allclose(np.linalg.norm(v1), 1) and np.allclose(np.linalg.norm(v2), 1):\n    print('The set is orthonormal.')\nelse:\n    print('The set is not orthonormal.')"
  },
  {
    "input": "Find the coordinates of vector (3, 4) relative to the basis {(1, 0), (0, 1)}.",
    "output": "import numpy as np\nv = np.array([3, 4])\nbasis = np.array([[1, 0], [0, 1]])\ncoordinates = np.linalg.solve(basis.T, v)\nprint('Coordinates relative to the basis:', coordinates)"
  },
  {
    "input": "Determine if the set {(1, 2), (2, 4)} spans R^2.",
    "output": "import numpy as np\nvectors = np.array([[1, 2], [2, 4]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 2:\n    print('The set spans R^2.')\nelse:\n    print('The set does not span R^2.')"
  },
  {
    "input": "Compute the Gram-Schmidt orthogonalization of {(1, 1), (1, -1)}.",
    "output": "import numpy as np\nv1 = np.array([1, 1])\nv2 = np.array([1, -1])\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2} forms a basis for P2.",
    "output": "print('The set {1, x, x^2} forms a basis for P2, the space of polynomials of degree at most 2.')"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1, 2, 3)} in R^3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 2, 3]])\northogonal_complement = null_space(A)\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2} forms a basis for P2, the space of polynomials of degree at most 2.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set forms a basis for P2.')\nelse:\n    print('The set does not form a basis for P2.')"
  },
  {
    "input": "Find the dimension of the subspace of R^4 spanned by {(1, 2, 3, 4), (2, 4, 6, 8), (0, 1, 0, 1)}.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [0, 1, 0, 1]])\nrank = np.linalg.matrix_rank(vectors)\nprint('The dimension of the subspace is:', rank)"
  },
  {
    "input": "Check if the set {(1, 0, 0), (0, 1, 0), (1, 1, 0)} is linearly independent in R^3.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [1, 1, 0]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the column space of matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.linalg.matrix_rank(A)\nbasis = A[:, :rank]\nprint('Basis for the column space:', basis)"
  },
  {
    "input": "Determine if the vector (1, 2, 3) is in the null space of matrix A = [[1, 0, -1], [0, 1, -2], [0, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[1, 0, -1], [0, 1, -2], [0, 0, 0]])\nv = np.array([1, 2, 3])\nif np.allclose(A @ v, np.zeros(3)):\n    print('The vector is in the null space.')\nelse:\n    print('The vector is not in the null space.')"
  },
  {
    "input": "Compute the rank of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Find the orthogonal projection of vector (3, 4, 5) onto the subspace spanned by {(1, 0, 0), (0, 1, 0)}.",
    "output": "import numpy as np\nv = np.array([3, 4, 5])\nU = np.array([[1, 0, 0], [0, 1, 0]])\nprojection = U.T @ np.linalg.inv(U @ U.T) @ U @ v\nprint('Orthogonal projection:', projection)"
  },
  {
    "input": "Determine if the set of matrices {[[1, 0], [0, 1]], [[0, 1], [1, 0]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\nmatrices = np.array([[[1, 0], [0, 1]], [[0, 1], [1, 0]]])\nreshaped = matrices.reshape(2, 4)\nrank = np.linalg.matrix_rank(reshaped)\nif rank == 2:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the row space of matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.linalg.matrix_rank(A)\nbasis = Vt[:rank, :]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the set of functions {sin(x), cos(x), 1} is linearly independent in the space of continuous functions.",
    "output": "import sympy as sp\nx = sp.symbols('x')\nfunctions = [sp.sin(x), sp.cos(x), 1]\nW = sp.wronskian(functions, x)\nif W != 0:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Compute the dimension of the subspace of R^3 defined by the equation x + y + z = 0.",
    "output": "import numpy as np\nA = np.array([[1, 1, 1]])\nnullity = 3 - np.linalg.matrix_rank(A)\nprint('Dimension of the subspace:', nullity)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0, 0), (0, 1, 0), (0, 0, 1)} forms a basis for R^3.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set forms a basis for R^3.')\nelse:\n    print('The set does not form a basis for R^3.')"
  },
  {
    "input": "Verify if the set of vectors {(1, 2), (3, 4)} is linearly independent in R^2.",
    "output": "import numpy as np\nvectors = np.array([[1, 2], [3, 4]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 2:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the dimension of the subspace of R^3 spanned by {(1, 0, 0), (0, 1, 0), (1, 1, 0)}.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [1, 1, 0]])\nrank = np.linalg.matrix_rank(vectors)\nprint('The dimension of the subspace is:', rank)"
  },
  {
    "input": "Determine if the vector (2, 4, 6) is in the span of {(1, 0, 0), (0, 1, 0), (0, 0, 1)} in R^3.",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nb = np.array([2, 4, 6])\nx = np.linalg.lstsq(A, b, rcond=None)[0]\nif np.allclose(A @ x, b):\n    print('The vector is in the span.')\nelse:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find a basis for the null space of matrix A = [[2, 4, 6], [1, 2, 3], [3, 6, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[2, 4, 6], [1, 2, 3], [3, 6, 9]])\nnull_basis = null_space(A)\nprint('Basis for the null space:', null_basis)"
  },
  {
    "input": "Compute the rank of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4], [5, 6]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2} is linearly independent in P2.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the coordinates of vector (4, 5, 6) relative to the basis {(1, 0, 0), (0, 1, 1), (0, 0, 1)}.",
    "output": "import numpy as np\nB = np.array([[1, 0, 0], [0, 1, 1], [0, 0, 1]])\nv = np.array([4, 5, 6])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates relative to the basis:', coordinates)"
  },
  {
    "input": "Check if the set {(1, 2, 3), (4, 5, 6), (7, 8, 9)} spans R^3.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set spans R^3.')\nelse:\n    print('The set does not span R^3.')"
  },
  {
    "input": "Find a basis for the row space of matrix A = [[1, 2, 3], [2, 4, 6], [3, 6, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])\nU, s, Vt = np.linalg.svd(A)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the set of matrices {[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\nmatrices = np.array([[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]]])\nreshaped = matrices.reshape(3, 4)\nrank = np.linalg.matrix_rank(reshaped)\nif rank == 3:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Compute the dimension of the subspace of R^4 defined by the equations x + y + z + w = 0 and x - y + z - w = 0.",
    "output": "import numpy as np\nA = np.array([[1, 1, 1, 1], [1, -1, 1, -1]])\nnullity = 4 - np.linalg.matrix_rank(A)\nprint('Dimension of the subspace:', nullity)"
  },
  {
    "input": "Find the orthogonal projection of vector (1, 2, 3) onto the subspace spanned by {(1, 0, 1), (0, 1, 1)}.",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\nU = np.array([[1, 0, 1], [0, 1, 1]])\nU = U.T\nproj = U @ np.linalg.pinv(U.T @ U) @ U.T @ v\nprint('Orthogonal projection:', proj)"
  },
  {
    "input": "Prove that the set of all polynomials of degree at most 2 forms a vector space over the reals.",
    "output": "import sympy as sp\nfrom sympy.abc import x\na0, a1, a2, b0, b1, b2, c = sp.symbols('a0 a1 a2 b0 b1 b2 c')\np1 = a0 + a1*x + a2*x**2\np2 = b0 + b1*x + b2*x**2\np3 = p1 + p2\np4 = c * p1\nprint('p3:', p3)\nprint('p4:', p4)"
  },
  {
    "input": "Find a basis for the solution space of the homogeneous system: x + 2y + 3z = 0, 4x + 5y + 6z = 0.",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]])\nU, S, Vt = np.linalg.svd(A)\ntol = 1e-10\nrank = (S > tol).sum()\nnull_space = Vt[rank:].T\nprint('Basis for the solution space:', null_space)"
  },
  {
    "input": "Determine if the set of functions {e^x, e^(2x), e^(3x)} is linearly independent.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\nf1 = sp.exp(x)\nf2 = sp.exp(2*x)\nf3 = sp.exp(3*x)\n\n# Form the Wronskian matrix\nW = sp.Matrix([[f1, f2, f3], [f1.diff(x), f2.diff(x), f3.diff(x)], [f1.diff(x, 2), f2.diff(x, 2), f3.diff(x, 2)]])\n\n# Compute the determinant\ndet_W = W.det()\n\nif det_W != 0:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the dimension of the subspace of R^4 spanned by the vectors {(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 12)}.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\n\n# Compute the rank\nrank = np.linalg.matrix_rank(vectors)\n\nprint('Dimension of the subspace:', rank)"
  },
  {
    "input": "Show that the set of all 2x2 symmetric matrices forms a subspace of M_2x2.",
    "output": "import numpy as np\nimport sympy as sp\na, b, c, d, e, f, alpha = sp.symbols('a b c d e f alpha')\nA = np.array([[a, b], [b, c]])\nB = np.array([[d, e], [e, f]])\nC = A + B\nD = alpha * A\nprint('C is symmetric:', np.all(C == C.T))\nprint('D is symmetric:', np.all(D == D.T))"
  },
  {
    "input": "Determine if the set {sin(x), cos(x), sin(2x)} is linearly independent in the space of continuous functions.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\nf1 = sp.sin(x)\nf2 = sp.cos(x)\nf3 = sp.sin(2*x)\n\n# Form the Wronskian matrix\nW = sp.Matrix([[f1, f2, f3], [f1.diff(x), f2.diff(x), f3.diff(x)], [f1.diff(x, 2), f2.diff(x, 2), f3.diff(x, 2)]])\n\n# Compute the determinant\ndet_W = W.det()\n\nif det_W != 0:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the column space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nQ, R, P = qr(A, mode='economic', pivoting=True)\nindependent_cols = P[:np.linalg.matrix_rank(A)]\nbasis = A[:, independent_cols]\nprint('Basis for the column space:', basis)"
  },
  {
    "input": "Determine if the zero vector is the only vector orthogonal to every vector in R^3.",
    "output": "import sympy as sp\nx, y, z = sp.symbols('x y z')\nv = sp.Matrix([x, y, z])\nconditions = [v.dot(sp.Matrix(e)) for e in [[1,0,0], [0,1,0], [0,0,1]]]\nsolution = sp.solve(conditions, (x, y, z))\nif solution == [{x: 0, y: 0, z: 0}]:\n    print('The zero vector is the only vector orthogonal to every vector in R^3.')\nelse:\n    print('There exists a non-zero vector orthogonal to every vector in R^3.')"
  },
  {
    "input": "Prove that the intersection of two subspaces of a vector space is also a subspace.",
    "output": "import sympy as sp\nu1, u2, u3, u4, v1, v2, v3, v4 = sp.symbols('u1 u2 u3 u4 v1 v2 v3 v4')\nU = sp.Matrix([[u1, u2], [u3, u4]])\nV = sp.Matrix([[v1, v2], [v3, v4]])\nprint('The intersection of two subspaces is always a subspace by vector space axioms (closure under addition and scalar multiplication). This can be proven theoretically.')"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 12)} is linearly independent in R^4.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == len(vectors):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the null space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nnull_basis = null_space(A)\nprint('Basis for the null space:', null_basis)"
  },
  {
    "input": "Determine if the set of polynomials {1 + x, x + x^2, 1 + x^2} is linearly independent in P2.",
    "output": "import numpy as np\nvectors = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == len(vectors):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the dimension of the subspace of R^4 spanned by the vectors {(1, 0, 0, 0), (0, 1, 0, 0), (1, 1, 1, 1)}.",
    "output": "import numpy as np\nvectors = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 1, 1]])\nrank = np.linalg.matrix_rank(vectors)\nprint('The dimension of the subspace is:', rank)"
  },
  {
    "input": "Determine if the vector (1, 2, 3) is in the span of {(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 1)} in R^3.",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]])\nb = np.array([1, 2, 3])\nx = np.linalg.lstsq(A.T, b, rcond=None)[0]\nif np.allclose(A.T @ x, b):\n    print('The vector is in the span.')\nelse:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find a basis for the row space of matrix A = [[2, 4, 6], [1, 2, 3], [3, 6, 9]].",
    "output": "import numpy as np\nA = np.array([[2, 4, 6], [1, 2, 3], [3, 6, 9]])\nU, s, Vt = np.linalg.svd(A)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the set of matrices {[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\nmatrices = np.array([[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]]])\nreshaped = matrices.reshape(3, 4)\nrank = np.linalg.matrix_rank(reshaped)\nif rank == len(matrices):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the coordinates of vector (3, 4, 5) relative to the basis {(1, 0, 0), (0, 1, 1), (0, 0, 1)}.",
    "output": "import numpy as np\nB = np.array([[1, 0, 0], [0, 1, 1], [0, 0, 1]])\nv = np.array([3, 4, 5])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates relative to the basis:', coordinates)"
  },
  {
    "input": "Check if the set {(1, 2, 3), (4, 5, 6), (7, 8, 10)} spans R^3.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(vectors)\nif rank == 3:\n    print('The set spans R^3.')\nelse:\n    print('The set does not span R^3.')"
  },
  {
    "input": "Find a basis for the column space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\nbasis = A[:, :rank]\nprint('Basis for the column space:', basis)"
  },
  {
    "input": "Determine if the set of functions {1, sin(x), cos(x)} forms a basis for the vector space of continuous functions on [0, 2\u00cf\u20ac].",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\nf1 = sp.Lambda(x, 1)\nf2 = sp.Lambda(x, sp.sin(x))\nf3 = sp.Lambda(x, sp.cos(x))\n\n# Check linear independence\nc1, c2, c3 = sp.symbols('c1 c2 c3')\nequation = sp.Eq(c1*f1(x) + c2*f2(x) + c3*f3(x), 0)\nsolutions = sp.solve(equation, (c1, c2, c3))\n\nif all(value == 0 for value in solutions.values()):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')\n\n# Check if the set spans the space\n# Since the space of continuous functions on [0, 2\u00cf\u20ac] is infinite-dimensional,\n# the set cannot span the entire space. Therefore, it does not form a basis."
  },
  {
    "input": "Find the dimension of the subspace of P3 consisting of polynomials p(x) such that p(1) = 0.",
    "output": "import sympy as sp\nfrom sympy.abc import x\nbasis_p3 = [sp.Integer(1), x, x**2, x**3]\ncondition = [b.subs(x, 1) for b in basis_p3]\nA = sp.Matrix([condition])\nrref_matrix, pivot_columns = A.rref()\ndimension = len(basis_p3) - len(pivot_columns)\nprint('Dimension of the subspace:', dimension)"
  },
  {
    "input": "Prove that the set of all diagonal 3x3 matrices forms a subspace of M_3x3.",
    "output": "import sympy as sp\na, b, c, d, e, f, alpha = sp.symbols('a b c d e f alpha')\nA = sp.Matrix([[a, 0, 0], [0, b, 0], [0, 0, c]])\nB = sp.Matrix([[d, 0, 0], [0, e, 0], [0, 0, f]])\nC = A + B\nD = alpha * A\nprint('C is diagonal:', C.is_diagonal())\nprint('D is diagonal:', D.is_diagonal())"
  },
  {
    "input": "Find a basis for the solution space of the differential equation y'' - 3y' + 2y = 0.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\n# Define the differential equation\ny = sp.Function('y')\ndeq = sp.Eq(y(x).diff(x, x) - 3*y(x).diff(x) + 2*y(x), 0)\n\n# Solve the differential equation\nsolutions = sp.dsolve(deq, y(x))\n\n# Extract the basis from the general solution\nbasis = solutions.rhs.args\nprint('Basis for the solution space:', basis)"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} spans R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Compute the rank\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == 3:\n    print('The set spans R^3.')\nelse:\n    print('The set does not span R^3.')"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1, 2, 3), (4, 5, 6)} in R^3.",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\nnull_space = Vt[rank:].T\nprint('Orthogonal complement of the subspace:', null_space)"
  },
  {
    "input": "Prove that the set of all upper triangular 3x3 matrices forms a subspace of M_3x3.",
    "output": "import sympy as sp\n\na, b, c, d, e, f, g, h, i, j, k, l, alpha = sp.symbols('a b c d e f g h i j k l alpha')\nA = sp.Matrix([[a, b, c], [0, d, e], [0, 0, f]])\nB = sp.Matrix([[g, h, i], [0, j, k], [0, 0, l]])\nC = A + B\nD = alpha * A\n\ndef is_upper_triangular(M):\n    return all(M[i, j] == 0 for i in range(3) for j in range(i))\n\nprint('C is upper triangular:', is_upper_triangular(C))\nprint('D is upper triangular:', is_upper_triangular(D))"
  },
  {
    "input": "Find the dimension of the subspace of R^4 consisting of vectors (a, b, c, d) such that a + b + c + d = 0.",
    "output": "import numpy as np\nA = np.array([[1, 1, 1, 1]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\ndimension = A.shape[1] - rank\nprint('Dimension of the subspace:', dimension)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3, x^4} is linearly independent in P4.",
    "output": "import numpy as np\nV = np.vander([0, 1, 2, 3, 4], 5)\nrank = np.linalg.matrix_rank(V)\nif rank == 5:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Determine if the set of matrices {[[1, 2], [3, 4]], [[2, 4], [6, 8]], [[0, 0], [0, 0]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\n\nmatrices = [np.array([[1, 2], [3, 4]]), \n            np.array([[2, 4], [6, 8]]), \n            np.array([[0, 0], [0, 0]])]\n\nvectors = np.array([m.flatten() for m in matrices])\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == len(matrices):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the dimension of the solution space of the system Ax = 0, where A = [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\nnull_space_A = null_space(A)\ndimension = null_space_A.shape[1]\nprint('Dimension of the solution space:', dimension)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3, x^4, x^5} is linearly independent in P5.",
    "output": "import numpy as np\nV = np.vander([0, 1, 2, 3, 4, 5], 6)\nrank = np.linalg.matrix_rank(V)\nif rank == 6:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the subspace of R^4 spanned by the vectors {(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 12), (4, 5, 6, 7)}.",
    "output": "import numpy as np\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]])\nU, s, Vt = np.linalg.svd(vectors)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the subspace:', basis)"
  },
  {
    "input": "Determine if the set of functions {e^x, e^(2x), e^(3x)} is linearly independent in the space of continuous functions.",
    "output": "import sympy as sp\nfrom sympy.abc import x\nf1 = sp.exp(x)\nf2 = sp.exp(2*x)\nf3 = sp.exp(3*x)\nc1, c2, c3 = sp.symbols('c1 c2 c3')\nequation = sp.Eq(c1*f1 + c2*f2 + c3*f3, 0)\nsolutions = sp.solve(equation, (c1, c2, c3))\nif all(value == 0 for value in solutions.values()):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the rank of the matrix A = [[1, 2, 3, 4], [2, 4, 6, 8], [0, 0, 0, 0], [4, 5, 6, 7]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [0, 0, 0, 0], [4, 5, 6, 7]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Determine if the vector (1, 2, 3, 4) is in the span of {(1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1), (1, 1, 1, 1)} in R^4.",
    "output": "import numpy as np\nA = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 1, 1, 1]])\nb = np.array([1, 2, 3, 4])\nx = np.linalg.lstsq(A.T, b, rcond=None)[0]\nif np.allclose(A.T @ x, b):\n    print('The vector is in the span.')\nelse:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find a basis for the row space of matrix A = [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]])\nU, s, Vt = np.linalg.svd(A)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the set of matrices {[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]], [[0, 0], [1, 1]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\n\nmatrices = [\n    np.array([[1, 0], [0, 1]]),\n    np.array([[0, 1], [1, 0]]),\n    np.array([[1, 1], [0, 0]]),\n    np.array([[0, 0], [1, 1]])\n]\n\nmatrix_vectors = np.array([m.flatten() for m in matrices])\nrank = np.linalg.matrix_rank(matrix_vectors)\n\nif rank == len(matrices):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Determine if the set of matrices {[[1, 2], [3, 4]], [[2, 4], [6, 8]], [[0, 0], [0, 0]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\n\nmatrices = np.array([[[1, 2], [3, 4]], [[2, 4], [6, 8]], [[0, 0], [0, 0]]])\nreshaped = matrices.reshape(3, 4)\nrank = np.linalg.matrix_rank(reshaped)\n\nif rank == len(matrices):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the dimension of the solution space of the system Ax = 0, where A = [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\nns = null_space(A)\ndimension = ns.shape[1]\nprint('Dimension of the solution space:', dimension)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3, x^4, x^5} is linearly independent in P5.",
    "output": "import numpy as np\n\nV = np.vander([0, 1, 2, 3, 4, 5], 6)\nrank = np.linalg.matrix_rank(V)\n\nif rank == 6:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find a basis for the subspace of R^4 spanned by the vectors {(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 12), (4, 5, 6, 7)}.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]])\nU, s, Vt = np.linalg.svd(vectors)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the subspace:', basis)"
  },
  {
    "input": "Determine if the set of functions {e^x, e^(2x), e^(3x)} is linearly independent in the space of continuous functions.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\nf1 = sp.exp(x)\nf2 = sp.exp(2*x)\nf3 = sp.exp(3*x)\nc1, c2, c3 = sp.symbols('c1 c2 c3')\nequation = sp.Eq(c1*f1 + c2*f2 + c3*f3, 0)\nsolutions = sp.solve(equation, (c1, c2, c3))\n\nif all(value == 0 for value in solutions.values()):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the rank of the matrix A = [[1, 2, 3, 4], [2, 4, 6, 8], [0, 0, 0, 0], [4, 5, 6, 7]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [0, 0, 0, 0], [4, 5, 6, 7]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Determine if the vector (1, 2, 3, 4) is in the span of {(1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1), (1, 1, 1, 1)} in R^4.",
    "output": "import numpy as np\n\nA = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 1, 1, 1]])\nb = np.array([1, 2, 3, 4])\nx = np.linalg.lstsq(A.T, b, rcond=None)[0]\n\nif np.allclose(A.T @ x, b):\n    print('The vector is in the span.')\nelse:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find a basis for the row space of matrix A = [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 5, 6, 7]])\nU, s, Vt = np.linalg.svd(A)\nrank = np.sum(s > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the set of matrices {[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 1], [0, 0]], [[0, 0], [1, 1]]} is linearly independent in M_2x2.",
    "output": "import numpy as np\n\n# Flatten each matrix to a vector\nmatrices = [np.array([[1, 0], [0, 1]]),\n            np.array([[0, 1], [1, 0]]),\n            np.array([[1, 1], [0, 0]]),\n            np.array([[0, 0], [1, 1]])]\n\nflattened = [mat.flatten() for mat in matrices]\nM = np.column_stack(flattened)\n\n# Compute the rank\nrank = np.linalg.matrix_rank(M)\n\nif rank == len(matrices):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Verify if the set of matrices {[[1, 2], [3, 4]], [[2, 3], [4, 5]], [[3, 4], [5, 6]]} forms a basis for the vector space of 2x2 matrices.",
    "output": "import numpy as np\n\nmatrices = np.array([[[1, 2], [3, 4]], [[2, 3], [4, 5]], [[3, 4], [5, 6]]])\nreshaped = matrices.reshape(3, 4)\nrank = np.linalg.matrix_rank(reshaped)\n\nif rank == 4:\n    print('The set forms a basis for the vector space of 2x2 matrices.')\nelse:\n    print('The set does not form a basis.')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, -1], [-1, 2]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1], [-1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3, x^4} spans the polynomial space P4.",
    "output": "import numpy as np\n\nV = np.vander([0, 1, 2, 3, 4], 5)\nrank = np.linalg.matrix_rank(V)\n\nif rank == 5:\n    print('The set spans the polynomial space P4.')\nelse:\n    print('The set does not span P4.')"
  },
  {
    "input": "Compute the orthogonal projection of vector v = [3, 4, 5] onto the subspace spanned by u = [1, 0, 0].",
    "output": "import numpy as np\n\nv = np.array([3, 4, 5])\nu = np.array([1, 0, 0])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Orthogonal projection:', projection)"
  },
  {
    "input": "Verify if the transformation T: R^2 -> R^2 defined by T(x, y) = (x + y, x - y) is linear.",
    "output": "import numpy as np\n\nA = np.array([[1, 1], [1, -1]])\nrank = np.linalg.matrix_rank(A)\n\nif rank == 2:\n    print('The transformation is linear.')\nelse:\n    print('The transformation is not linear.')"
  },
  {
    "input": "Find the nullity of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Nullity of the matrix:', nullity)"
  },
  {
    "input": "Determine if the set of functions {sin(x), cos(x), sin(2x)} is linearly independent.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\nf1 = sp.sin(x)\nf2 = sp.cos(x)\nf3 = sp.sin(2*x)\nc1, c2, c3 = sp.symbols('c1 c2 c3')\nequation = sp.Eq(c1*f1 + c2*f2 + c3*f3, 0)\nsolutions = sp.solve(equation, (c1, c2, c3))\n\nif all(value == 0 for value in solutions.values()):\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Compute the determinant of the matrix A = [[4, 3], [6, 3]].",
    "output": "import numpy as np\n\nA = np.array([[4, 3], [6, 3]])\ndet = np.linalg.det(A)\nprint('Determinant of the matrix:', det)"
  },
  {
    "input": "Find a basis for the column space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, s, Vt = np.linalg.svd(A)\nrank = np.sum(s > 1e-10)\nbasis = U[:, :rank]\nprint('Basis for the column space:', basis)"
  },
  {
    "input": "Determine if the vector (2, 3, 4) is in the null space of the matrix A = [[1, 0, -1], [0, 1, 2], [3, 4, 5]].",
    "output": "import numpy as np\n\nA = np.array([[1, 0, -1], [0, 1, 2], [3, 4, 5]])\nv = np.array([2, 3, 4])\nresult = np.dot(A, v)\n\nif np.allclose(result, np.zeros_like(result)):\n    print('The vector is in the null space.')\nelse:\n    print('The vector is not in the null space.')"
  },
  {
    "input": "Find the inverse of the matrix A = [[2, 1], [5, 3]].",
    "output": "import numpy as np\n\nA = np.array([[2, 1], [5, 3]])\nA_inv = np.linalg.inv(A)\nprint('Inverse of the matrix:', A_inv)"
  },
  {
    "input": "Compute the characteristic polynomial of the matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[0, -1], [1, 0]])\nchar_poly = np.poly(A)\nprint('Characteristic polynomial coefficients:', char_poly)"
  },
  {
    "input": "Compute the Gram-Schmidt orthonormalization of the set of vectors {(1, 1, 0), (1, 0, 1), (0, 1, 1)} in R^3.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    orthonormal_basis = []\n    for v in vectors:\n        w = v - sum(np.dot(v, b) * b for b in orthonormal_basis)\n        w = w / np.linalg.norm(w)\n        orthonormal_basis.append(w)\n    return np.array(orthonormal_basis)\n\nvectors = np.array([[1, 1, 0], [1, 0, 1], [0, 1, 1]])\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Determine if the linear transformation T: R^3 -> R^3 defined by T(x, y, z) = (x + y, y + z, z + x) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\ndet = np.linalg.det(A)\n\nif det != 0:\n    print('The transformation is invertible.')\nelse:\n    print('The transformation is not invertible.')"
  },
  {
    "input": "Find the singular value decomposition (SVD) of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\nU, s, Vt = np.linalg.svd(A)\nprint('U matrix:', U)\nprint('Singular values:', s)\nprint('V transpose matrix:', Vt)"
  },
  {
    "input": "Determine the rank and nullity of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank of the matrix:', rank)\nprint('Nullity of the matrix:', nullity)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[4, -2], [1, 1]].",
    "output": "import numpy as np\n\nA = np.array([[4, -2], [1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3} is an orthogonal set with respect to the inner product \u00e2\u0178\u00a8f, g\u00e2\u0178\u00a9 = \u00e2\u02c6\u00ab[0,1] f(x)g(x) dx.",
    "output": "import sympy as sp\nfrom sympy.abc import x\n\npolynomials = [1, x, x**2, x**3]\ninner_product = lambda f, g: sp.integrate(f*g, (x, 0, 1))\n\northogonal = True\nfor i in range(len(polynomials)):\n    for j in range(i):\n        if inner_product(polynomials[i], polynomials[j]) != 0:\n            orthogonal = False\n            break\n    if not orthogonal:\n        break\n\nif orthogonal:\n    print('The set is orthogonal.')\nelse:\n    print('The set is not orthogonal.')"
  },
  {
    "input": "Compute the Moore-Penrose pseudoinverse of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\npseudoinverse = np.linalg.pinv(A)\nprint('Moore-Penrose pseudoinverse:', pseudoinverse)"
  },
  {
    "input": "Find a basis for the null space of the matrix A = [[2, 4, 6], [1, 3, 5], [0, 0, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[2, 4, 6], [1, 3, 5], [0, 0, 0]])\nnullspace = null_space(A)\nprint('Basis for the null space:')\nprint(nullspace)"
  },
  {
    "input": "Determine if the vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} span R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == 3:\n    print('The vectors span R^3.')\nelse:\n    print('The vectors do not span R^3.')"
  },
  {
    "input": "Compute the determinant of the matrix A = [[3, 1, 4], [1, 5, 9], [2, 6, 5]].",
    "output": "import numpy as np\n\nA = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])\ndet = np.linalg.det(A)\nprint('Determinant of the matrix:', det)"
  },
  {
    "input": "Find the angle between the vectors u = (1, 0, 0) and v = (0, 1, 0) in R^3.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\n\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle_rad = np.arccos(cos_theta)\nangle_deg = np.degrees(angle_rad)\n\nprint('Angle in radians:', angle_rad)\nprint('Angle in degrees:', angle_deg)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0, 1, 0), (0, 1, 0, 1), (1, 1, 1, 1)} forms a basis for R^4.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1]])\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == 4:\n    print('The set forms a basis for R^4.')\nelse:\n    print('The set does not form a basis for R^4.')"
  },
  {
    "input": "Find the dimension of the subspace spanned by the vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} in R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\nprint('Dimension of the subspace:', rank)"
  },
  {
    "input": "Compute the rank of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1, 2, 3), (4, 5, 6)} in R^3.",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\nU, S, Vt = np.linalg.svd(A)\nnull_space = Vt.T[:, S.size:]\nprint('Orthogonal complement basis:', null_space)"
  },
  {
    "input": "Determine if the transformation T: R^3 -> R^3 defined by T(x, y, z) = (x + y + z, y + z, z) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 1], [0, 1, 1], [0, 0, 1]])\ndet = np.linalg.det(A)\n\nif det != 0:\n    print('The transformation is one-to-one.')\nelse:\n    print('The transformation is not one-to-one.')"
  },
  {
    "input": "Find the coordinates of the vector v = (3, 4, 5) relative to the basis B = {(1, 0, 0), (0, 1, 0), (0, 0, 1)}.",
    "output": "import numpy as np\n\nB = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nv = np.array([3, 4, 5])\ncoordinates = np.linalg.solve(B.T, v)\nprint('Coordinates of v relative to B:', coordinates)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3} is linearly independent in the vector space of polynomials of degree \u00e2\u2030\u00a4 3.",
    "output": "import numpy as np\n\nV = np.vander([0, 1, 2, 3], 4)\nrank = np.linalg.matrix_rank(V)\n\nif rank == 4:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 1], [1, 2]].",
    "output": "import numpy as np\n\nA = np.array([[2, 1], [1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the determinant of the matrix A = [[1, 2, 3], [0, 1, 4], [0, 0, 1]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [0, 1, 4], [0, 0, 1]])\ndet = np.linalg.det(A)\nprint('Determinant of the matrix:', det)"
  },
  {
    "input": "Find a basis for the row space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the vector (1, 2, 3) is in the column space of the matrix A = [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\nv = np.array([1, 2, 3])\naugmented_matrix = np.column_stack((A, v))\nrank_A = np.linalg.matrix_rank(A)\nrank_augmented = np.linalg.matrix_rank(augmented_matrix)\n\nif rank_A == rank_augmented:\n    print('The vector is in the column space.')\nelse:\n    print('The vector is not in the column space.')"
  },
  {
    "input": "Compute the characteristic polynomial of the matrix A = [[2, -1], [-1, 2]].",
    "output": "import sympy as sp\n\n# Define the matrix\nA = sp.Matrix([[2, -1], [-1, 2]])\n\n# Define the variable\n\u03bb = sp.symbols('\u03bb')\n\n# Compute the characteristic polynomial\nchar_poly = A.charpoly(\u03bb).as_expr()\n\nprint('Characteristic polynomial:', char_poly)"
  },
  {
    "input": "Find the angle between the vectors u = (1, 0, 0) and v = (0, 1, 0) in R^3.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\n\n# Compute cosine of the angle\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\n\n# Compute angle in radians\nangle_rad = np.arccos(cos_theta)\n\n# Convert to degrees\nangle_deg = np.degrees(angle_rad)\n\nprint('Angle between u and v in degrees:', angle_deg)"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 12)} forms a basis for R^4.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == 4:\n    print('The set forms a basis for R^4.')\nelse:\n    print('The set does not form a basis for R^4.')"
  },
  {
    "input": "Find the dimension of the subspace spanned by the vectors {(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 1)} in R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]])\nrank = np.linalg.matrix_rank(vectors)\nprint('Dimension of the subspace:', rank)"
  },
  {
    "input": "Compute the rank of the matrix A = [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the matrix:', rank)"
  },
  {
    "input": "Determine if the transformation T: R^3 -> R^3 defined by T(x, y, z) = (x + y, y + z, z + x) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\ndet = np.linalg.det(A)\n\nif det != 0:\n    print('The transformation is one-to-one.')\nelse:\n    print('The transformation is not one-to-one.')"
  },
  {
    "input": "Find the coordinates of the vector v = (4, 5, 6) relative to the basis B = {(1, 0, 0), (0, 1, 0), (0, 0, 1)}.",
    "output": "import numpy as np\n\nB = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nv = np.array([4, 5, 6])\ncoordinates = np.linalg.solve(B.T, v)\nprint('Coordinates of v relative to B:', coordinates)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3, x^4} is linearly independent in the vector space of polynomials of degree \u00e2\u2030\u00a4 4.",
    "output": "import numpy as np\n\nV = np.vander([0, 1, 2, 3, 4], 5)\nrank = np.linalg.matrix_rank(V)\n\nif rank == 5:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[3, 1], [1, 3]].",
    "output": "import numpy as np\n\nA = np.array([[3, 1], [1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the determinant of the matrix A = [[2, 3, 1], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[2, 3, 1], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(A)\nprint('Determinant of the matrix:', det)"
  },
  {
    "input": "Find a basis for the row space of the matrix A = [[2, 4, 6], [1, 3, 5], [0, 0, 0]].",
    "output": "import numpy as np\n\nA = np.array([[2, 4, 6], [1, 3, 5], [0, 0, 0]])\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\nbasis = Vt[:rank]\nprint('Basis for the row space:', basis)"
  },
  {
    "input": "Determine if the vector (2, 3, 4) is in the column space of the matrix A = [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\nv = np.array([2, 3, 4])\naugmented_matrix = np.column_stack((A, v))\nrank_A = np.linalg.matrix_rank(A)\nrank_augmented = np.linalg.matrix_rank(augmented_matrix)\n\nif rank_A == rank_augmented:\n    print('The vector is in the column space.')\nelse:\n    print('The vector is not in the column::contentReference[oaicite:0]{index=0}')"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} is linearly independent in R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\n\nif rank == vectors.shape[0]:\n    print('The set is linearly independent.')\nelse:\n    print('The set is linearly dependent.')"
  },
  {
    "input": "Find the projection of vector v = (3, 4, 5) onto the subspace spanned by {(1, 0, 0), (0, 1, 0)} in R^3.",
    "output": "import numpy as np\n\nv = np.array([3, 4, 5])\nB = np.array([[1, 0, 0], [0, 1, 0]])\nprojection = B.T @ np.linalg.inv(B @ B.T) @ B @ v\nprint('Projection of v onto the subspace:', projection)"
  },
  {
    "input": "Determine if the transformation T: R^2 -> R^2 defined by T(x, y) = (2x + y, x - y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[2, 1], [1, -1]])\ndet = np.linalg.det(A)\n\nif det != 0:\n    print('The transformation is invertible.')\nelse:\n    print('The transformation is not invertible.')"
  },
  {
    "input": "Find the null space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nU, S, Vt = np.linalg.svd(A)\nnull_space = Vt.T[:, S.size:]\nprint('Basis for the null space:', null_space)"
  },
  {
    "input": "Compute the characteristic polynomial of the matrix A = [[2, -1], [1, 3]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1], [1, 3]])\nchar_poly = np.poly(A)\nprint('Characteristic polynomial coefficients:', char_poly)"
  },
  {
    "input": "Determine if the vector (1, 2, 3) is in the span of {(4, 5, 6), (7, 8, 9)} in R^3.",
    "output": "import numpy as np\n\nA = np.array([[4, 5, 6], [7, 8, 9]]).T\nv = np.array([1, 2, 3])\naugmented_matrix = np.column_stack((A, v))\nrank_A = np.linalg.matrix_rank(A)\nrank_augmented = np.linalg.matrix_rank(augmented_matrix)\n\nif rank_A == rank_augmented:\n    print('The vector is in the span.')\nelse:\n    print('The vector is not in the span.')"
  },
  {
    "input": "Find the orthonormal basis for the column space of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\nQ, R = np.linalg.qr(A)\nprint('Orthonormal basis for the column space:', Q)"
  },
  {
    "input": "Compute the singular value decomposition (SVD) of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\nU, S, Vt = np.linalg.svd(A)\nprint('U matrix:', U)\nprint('Singular values:', S)\nprint('V transpose matrix:', Vt)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x^2, x^3} is a basis for the vector space of polynomials of degree \u00e2\u2030\u00a4 3.",
    "output": "import numpy as np\n\nV = np.vander([0, 1, 2, 3], 4)\nrank = np.linalg.matrix_rank(V)\n\nif rank == 4:\n    print('The set is a basis.')\nelse:\n    print('The set is not a basis.')"
  },
  {
    "input": "Find the coordinates of the vector v = (2, -1, 3) relative to the basis B = {(1, 0, 1), (0, 1, 1), (1, 1, 0)}.",
    "output": "import numpy as np\n\nB = np.array([[1, 0, 1], [0, 1, 1], [1, 1, 0]]).T\nv = np.array([2, -1, 3])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates of v relative to B:', coordinates)"
  },
  {
    "input": "Determine if the transformation T: R^3 -> R^3 defined by T(x, y, z) = (x + y + z, x - y, y + z) is onto.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 1], [1, -1, 0], [0, 1, 1]])\nrank = np.linalg.matrix_rank(A)\n\nif rank == 3:\n    print('The transformation is onto.')\nelse:\n    print('The transformation is not onto.')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[0, -1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the magnitude of the vector v = (3, 4).",
    "output": "import numpy as np\n\nv = np.array([3, 4])\nmagnitude = np.linalg.norm(v)\nprint('Magnitude of v:', magnitude)"
  },
  {
    "input": "Compute the dot product of vectors u = (1, 2, 3) and v = (4, 5, 6).",
    "output": "import numpy as np\n\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\ndot_product = np.dot(u, v)\nprint('Dot product of u and v:', dot_product)"
  },
  {
    "input": "Determine if vectors u = (1, 0, 0) and v = (0, 1, 0) are orthogonal.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\nare_orthogonal = np.dot(u, v) == 0\nprint('Are u and v orthogonal?', are_orthogonal)"
  },
  {
    "input": "Find the angle between vectors u = (1, 2) and v = (2, 3).",
    "output": "import numpy as np\n\nu = np.array([1, 2])\nv = np.array([2, 3])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle = np.arccos(cos_theta)\nprint('Angle between u and v in radians:', angle)"
  },
  {
    "input": "Compute the cross product of vectors u = (1, 0, 0) and v = (0, 1, 0).",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\ncross_product = np.cross(u, v)\nprint('Cross product of u and v:', cross_product)"
  },
  {
    "input": "Determine if the set of vectors {(1, 2), (2, 4)} is linearly independent.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2], [2, 4]])\nrank = np.linalg.matrix_rank(vectors)\nlinearly_independent = rank == vectors.shape[0]\nprint('Are the vectors linearly independent?', linearly_independent)"
  },
  {
    "input": "Find the projection of vector v = (3, 4, 5) onto vector u = (1, 0, 0).",
    "output": "import numpy as np\n\nv = np.array([3, 4, 5])\nu = np.array([1, 0, 0])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection of v onto u:', projection)"
  },
  {
    "input": "Compute the determinant of the matrix A = [[1, 2], [3, 4]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4]])\ndeterminant = np.linalg.det(A)\nprint('Determinant of A:', determinant)"
  },
  {
    "input": "Find the inverse of the matrix A = [[1, 2], [3, 4]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4]])\nA_inv = np.linalg.inv(A)\nprint('Inverse of A:', A_inv)"
  },
  {
    "input": "Solve the system of equations: x + y = 2, 2x + 3y = 5.",
    "output": "import numpy as np\n\nA = np.array([[1, 1], [2, 3]])\nb = np.array([2, 5])\nsolution = np.linalg.solve(A, b)\nprint('Solution (x, y):', solution)"
  },
  {
    "input": "Determine if the transformation T: R^2 -> R^2 defined by T(x, y) = (x + y, x - y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[1, 1], [1, -1]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('Is the transformation invertible?', invertible)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, -1], [1, 3]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1], [1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the rank of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank)"
  },
  {
    "input": "Determine if the vector v = (1, 2, 3) is in the column space of the matrix A = [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\nv = np.array([1, 2, 3])\n\n# Stack v as a column to A to form the augmented matrix\naugmented_matrix = np.column_stack((A, v))\n\n# Compare ranks\nrank_A = np.linalg.matrix_rank(A)\nrank_augmented = np.linalg.matrix_rank(augmented_matrix)\n\nif rank_A == rank_augmented:\n    print('The vector v is in the column space of A.')\nelse:\n    print('The vector v is NOT in the column space of A.')"
  },
  {
    "input": "Find the unit vector in the direction of v = (6, 8).",
    "output": "import numpy as np\n\nv = np.array([6, 8])\nunit_vector = v / np.linalg.norm(v)\nprint('Unit vector:', unit_vector)"
  },
  {
    "input": "Compute the outer product of vectors u = (1, 2) and v = (3, 4).",
    "output": "import numpy as np\n\nu = np.array([1, 2])\nv = np.array([3, 4])\nouter_product = np.outer(u, v)\nprint('Outer product:\\n', outer_product)"
  },
  {
    "input": "Determine if the vectors u = (1, 2, 3) and v = (2, 4, 6) are linearly dependent.",
    "output": "import numpy as np\n\nu = np.array([1, 2, 3])\nv = np.array([2, 4, 6])\nA = np.column_stack((u, v))\nrank = np.linalg.matrix_rank(A)\nlinearly_dependent = rank < A.shape[1]\nprint('Are u and v linearly dependent?', linearly_dependent)"
  },
  {
    "input": "Find the area of the parallelogram formed by vectors u = (1, 0, 0) and v = (0, 1, 0).",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\nparallelogram_area = np.linalg.norm(np.cross(u, v))\nprint('Area of parallelogram:', parallelogram_area)"
  },
  {
    "input": "Compute the Gram matrix for the set of vectors u = (1, 0), v = (1, 1), and w = (0, 1).",
    "output": "import numpy as np\n\nu = np.array([1, 0])\nv = np.array([1, 1])\nw = np.array([0, 1])\nvectors = np.array([u, v, w])\ngram_matrix = np.dot(vectors, vectors.T)\nprint('Gram matrix:\\n', gram_matrix)"
  },
  {
    "input": "Determine if the matrix A = [[1, 2], [3, 6]] is singular.",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 6]])\ndet = np.linalg.det(A)\nsingular = det == 0\nprint('Is A singular?', singular)"
  },
  {
    "input": "Find the null space of the matrix A = [[1, 2], [2, 4], [3, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[1, 2], [2, 4], [3, 6]])\nnull_space_A = null_space(A)\nprint('Null space of A:\\n', null_space_A)"
  },
  {
    "input": "Compute the Moore-Penrose pseudoinverse of the matrix A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\npseudoinverse = np.linalg.pinv(A)\nprint('Moore-Penrose pseudoinverse of A:\\n', pseudoinverse)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0), (0, 1), (1, 1)} forms a basis for R^2.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 0], [0, 1], [1, 1]])\nrank = np.linalg.matrix_rank(vectors)\nforms_basis = rank == vectors.shape[1]\nprint('Do the vectors form a basis for R^2?', forms_basis)"
  },
  {
    "input": "Find the change of basis matrix from the standard basis to the basis B = {(1, 1), (1, -1)}.",
    "output": "import numpy as np\n\nB = np.array([[1, 1], [1, -1]])\nchange_of_basis_matrix = np.linalg.inv(B)\nprint('Change of basis matrix:\\n', change_of_basis_matrix)"
  },
  {
    "input": "Compute the trace of the matrix A = [[5, 2], [1, 3]].",
    "output": "import numpy as np\n\nA = np.array([[5, 2], [1, 3]])\ntrace = np.trace(A)\nprint('Trace of A:', trace)"
  },
  {
    "input": "Determine if the matrix A = [[0, -1], [1, 0]] is orthogonal.",
    "output": "import numpy as np\n\nA = np.array([[0, -1], [1, 0]])\nA_transpose = A.T\nidentity = np.eye(A.shape[0])\northogonal = np.allclose(np.dot(A, A_transpose), identity)\nprint('Is A orthogonal?', orthogonal)"
  },
  {
    "input": "Find the characteristic polynomial of the matrix A = [[2, -1], [1, 2]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1], [1, 2]])\nchar_poly_coeffs = np.poly(A)\nprint('Characteristic polynomial coefficients:', char_poly_coeffs)"
  },
  {
    "input": "Compute the Jordan normal form of the matrix A = [[5, 4, 2], [0, 1, -1], [0, 0, 3]].",
    "output": "import sympy as sp\n\n# Define the matrix symbolically\nA = sp.Matrix([[5, 4, 2], [0, 1, -1], [0, 0, 3]])\n\n# Compute Jordan form and the transformation matrix\nJ, P = A.jordan_form()\n\nprint('Jordan normal form:')\nsp.pprint(J)"
  },
  {
    "input": "Determine if the vectors u = (1, 2, 3), v = (4, 5, 6), and w = (7, 8, 9) are coplanar.",
    "output": "import numpy as np\n\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\nw = np.array([7, 8, 9])\n\n# Form a matrix with the vectors as rows\nmatrix = np.array([u, v, w])\n\n# Compute the rank of the matrix\nrank = np.linalg.matrix_rank(matrix)\n\nif rank <= 2:\n    print('The vectors are coplanar.')\nelse:\n    print('The vectors are not coplanar.')"
  },
  {
    "input": "Verify if the set of vectors {(1, 2), (3, 4), (5, 6)} is linearly independent.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2], [3, 4], [5, 6]])\nrank = np.linalg.matrix_rank(vectors)\nlinearly_independent = rank == vectors.shape[0]\nprint('Are the vectors linearly independent?', linearly_independent)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by vectors u = (1, 2, 3) and v = (4, 5, 6) in R^3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\northogonal_complement = null_space(A)\nprint('Orthogonal complement:\\n', orthogonal_complement)"
  },
  {
    "input": "Compute the determinant of the 3x3 matrix A = [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndeterminant = np.linalg.det(A)\nprint('Determinant of A:', determinant)"
  },
  {
    "input": "Determine if the transformation T: R^3 -> R^3 defined by T(x, y, z) = (x + y, y + z, z + x) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('Is the transformation invertible?', invertible)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[4, -2], [1, 1]].",
    "output": "import numpy as np\n\nA = np.array([[4, -2], [1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the singular value decomposition (SVD) of the matrix A = [[3, 1], [1, 3]].",
    "output": "import numpy as np\n\nA = np.array([[3, 1], [1, 3]])\nU, S, Vt = np.linalg.svd(A)\nprint('U matrix:\\n', U)\nprint('Singular values:', S)\nprint('V transpose matrix:\\n', Vt)"
  },
  {
    "input": "Find the rank and nullity of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank of A:', rank)\nprint('Nullity of A:', nullity)"
  },
  {
    "input": "Determine if the vector v = (1, 2, 3) is in the span of vectors u = (1, 0, 2) and w = (0, 1, 3).",
    "output": "import numpy as np\n\nA = np.array([[1, 0], [0, 1], [2, 3]])\nv = np.array([1, 2, 3])\ncoefficients, residuals, rank, s = np.linalg.lstsq(A, v, rcond=None)\nin_span = np.allclose(np.dot(A, coefficients), v)\nprint('Is v in the span of u and w?', in_span)"
  },
  {
    "input": "Find the least squares solution to the system Ax = b, where A = [[1, 1], [1, -1], [2, 0]] and b = [3, 1, 2].",
    "output": "import numpy as np\n\nA = np.array([[1, 1], [1, -1], [2, 0]])\nb = np.array([3, 1, 2])\nleast_squares_solution = np.linalg.lstsq(A, b, rcond=None)[0]\nprint('Least squares solution:', least_squares_solution)"
  },
  {
    "input": "Compute the determinant of the matrix A = [[2, 3, 1], [4, 1, -3], [3, 4, 2]].",
    "output": "import numpy as np\n\nA = np.array([[2, 3, 1], [4, 1, -3], [3, 4, 2]])\ndeterminant = np.linalg.det(A)\nprint('Determinant of A:', determinant)"
  },
  {
    "input": "Find the inverse of the matrix A = [[2, 3], [1, 4]].",
    "output": "import numpy as np\n\nA = np.array([[2, 3], [1, 4]])\nA_inv = np.linalg.inv(A)\nprint('Inverse of A:\\n', A_inv)"
  },
  {
    "input": "Solve the system of equations: x + 2y + z = 6, 2x + y + 3z = 14, 3x + 4y + 5z = 26.",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 1], [2, 1, 3], [3, 4, 5]])\nb = np.array([6, 14, 26])\nsolution = np.linalg.solve(A, b)\nprint('Solution (x, y, z):', solution)"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} forms a basis for R^3.",
    "output": "import numpy as np\n\nvectors = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(vectors)\nforms_basis = rank == vectors.shape[0]\nprint('Do the vectors form a basis for R^3?', forms_basis)"
  },
  {
    "input": "Compute the angle between vectors u = (1, 0, 0) and v = (0, 1, 0) in degrees.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle = np.arccos(cos_theta) * (180 / np.pi)\nprint('Angle between u and v:', angle, 'degrees')"
  },
  {
    "input": "Determine if the matrix A = [[2, 3], [5, 7]] is positive definite.",
    "output": "import numpy as np\n\nA = np.array([[2, 3], [5, 7]])\neigenvalues = np.linalg.eigvals(A)\npositive_definite = np.all(eigenvalues > 0)\nprint('Is A positive definite?', positive_definite)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[0, -1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the determinant of the matrix A = [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndeterminant = np.linalg.det(A)\nprint('Determinant of A:', determinant)"
  },
  {
    "input": "Find the inverse of the matrix A = [[4, 7], [2, 6]].",
    "output": "import numpy as np\n\nA = np.array([[4, 7], [2, 6]])\nA_inv = np.linalg.inv(A)\nprint('Inverse of A:\\n', A_inv)"
  },
  {
    "input": "Solve the system of equations: x + 2y + 3z = 6, 2x + y + 4z = 8, 3x + 4y + 5z = 10.",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [2, 1, 4], [3, 4, 5]])\nb = np.array([6, 8, 10])\nsolution = np.linalg.solve(A, b)\nprint('Solution (x, y, z):', solution)"
  },
  {
    "input": "Determine if the transformation T: R^2 -> R^2 defined by T(x, y) = (2x + y, x - y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[2, 1], [1, -1]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('Is the transformation invertible?', invertible)"
  },
  {
    "input": "Find the least squares solution to the system Ax = b, where A = [[1, 1], [1, -1], [2, 0]] and b = [3, 1, 2].",
    "output": "import numpy as np\n\nA = np.array([[1, 1], [1, -1], [2, 0]])\nb = np.array([3, 1, 2])\nx, residuals, rank, s = np.linalg.lstsq(A, b, rcond=None)\nprint('Least squares solution:', x)"
  },
  {
    "input": "Verify if the set W = {(x, y, z) \u2208 R\u00b3 | x + y + z = 0} is a subspace of R\u00b3.",
    "output": "import numpy as np\n\n# Define the condition for the subspace\ndef is_in_W(v):\n    return np.isclose(v[0] + v[1] + v[2], 0)\n\n# Test closure under addition\nv1 = np.array([1, -1, 0])\nv2 = np.array([0, 1, -1])\nassert is_in_W(v1) and is_in_W(v2)\nassert is_in_W(v1 + v2)\n\n# Test closure under scalar multiplication\nscalar = 2\nassert is_in_W(scalar * v1)\n\nprint('W is a subspace of R\u00b3.')"
  },
  {
    "input": "Determine if the set W = {(x, y) \u2208 R\u00b2 | xy = 0} is a subspace of R\u00b2.",
    "output": "import numpy as np\n\n# Define the condition for the set W\ndef is_in_W(v):\n    return np.isclose(v[0] * v[1], 0)\n\n# Test closure under addition\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\nassert is_in_W(v1) and is_in_W(v2)\nassert not is_in_W(v1 + v2)\n\nprint('W is not a subspace of R\u00b2 because it is not closed under addition.')"
  },
  {
    "input": "Find a basis for the subspace W = span{(1, 2, 3), (4, 5, 6)} in R\u00b3.",
    "output": "import numpy as np\n\n# Define the spanning vectors\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\n\n# Stack them into a matrix\nA = np.vstack([v1, v2])\n\n# Perform SVD to find linearly independent rows\nU, S, Vt = np.linalg.svd(A)\nrank = np.sum(S > 1e-10)\n\n# Basis from the right singular vectors (transposed)\nbasis = Vt[:rank]\nprint('Basis for W:', basis)"
  },
  {
    "input": "Determine the dimension of the subspace W = {(x, y, z, w) \u2208 R\u2074 | x + y + z + w = 0 and x - y + z - w = 0}.",
    "output": "import numpy as np\n\n# Define the coefficient matrix for the system of equations\nA = np.array([[1, 1, 1, 1], [1, -1, 1, -1]])\n\n# Find the rank of the matrix\nrank = np.linalg.matrix_rank(A)\n\n# Dimension of the subspace is the number of variables minus the rank\ndimension = 4 - rank\nprint('Dimension of W:', dimension)"
  },
  {
    "input": "Is the set W = {(x, y, z) \u2208 R\u00b3 | x = y = z} a subspace of R\u00b3?",
    "output": "import numpy as np\n\n# Define the condition for the subspace\ndef is_in_W(v):\n    return np.isclose(v[0], v[1]) and np.isclose(v[1], v[2])\n\n# Test closure under addition\nv1 = np.array([1, 1, 1])\nv2 = np.array([2, 2, 2])\nassert is_in_W(v1) and is_in_W(v2)\nassert is_in_W(v1 + v2)\n\n# Test closure under scalar multiplication\nscalar = 3\nassert is_in_W(scalar * v1)\n\nprint('W is a subspace of R\u00b3.')"
  },
  {
    "input": "Determine if the set W = {(x, y, z) \u2208 R\u00b3 | x\u00b2 + y\u00b2 = z\u00b2} is a subspace of R\u00b3.",
    "output": "import numpy as np\n\n# Define the condition for the set W\ndef is_in_W(v):\n    return np.isclose(v[0]**2 + v[1]**2, v[2]**2)\n\n# Test closure under addition\nv1 = np.array([3, 4, 5])\nv2 = np.array([5, 12, 13])\nassert is_in_W(v1) and is_in_W(v2)\nassert not is_in_W(v1 + v2)\n\nprint('W is not a subspace of R\u00b3 because it is not closed under addition.')"
  },
  {
    "input": "Find the intersection of subspaces W\u2081 = span{(1, 0, 0), (0, 1, 0)} and W\u2082 = span{(0, 1, 0), (0, 0, 1)} in R\u00b3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\n\n# Basis vectors for W\u2081 and W\u2082\nW1 = np.array([[1, 0, 0], [0, 1, 0]])\nW2 = np.array([[0, 1, 0], [0, 0, 1]])\n\n# Find orthonormal bases for each\nQ1, _ = np.linalg.qr(W1.T)\nQ2, _ = np.linalg.qr(W2.T)\n\n# Find intersection by solving Q1.T @ x = Q2.T @ y\n# i.e., vectors that are in both column spaces\nA = np.hstack([Q1, -Q2])\nns = null_space(A)\n\n# Map null space basis vectors back to original space\nintersection_basis = Q1 @ ns[:Q1.shape[1], :]\nprint('Basis for the intersection of W\u2081 and W\u2082:', intersection_basis.T)"
  },
  {
    "input": "Verify if the zero vector is in the subspace W = {(x, y, z) \u2208 R\u00b3 | x - 2y + 3z = 0}.",
    "output": "import numpy as np\n\n# Define the condition for the subspace\ndef is_in_W(v):\n    return np.isclose(v[0] - 2*v[1] + 3*v[2], 0)\n\n# Zero vector\nzero_vector = np.array([0, 0, 0])\nassert is_in_W(zero_vector)\n\nprint('The zero vector is in W.')"
  },
  {
    "input": "Verify if the set W = {(x, y, z) \u2208 R\u00b3 | x + y + z = 0} is a subspace of R\u00b3.",
    "output": "import numpy as np\n\ndef is_in_W(v):\n    return np.isclose(v[0] + v[1] + v[2], 0)\n\nv1 = np.array([1, -1, 0])\nv2 = np.array([0, 1, -1])\nassert is_in_W(v1) and is_in_W(v2)\nassert is_in_W(v1 + v2)\nscalar = 2\nassert is_in_W(scalar * v1)\n\nprint('W is a subspace of R\u00b3.')"
  },
  {
    "input": "Determine if the set W = {(x, y) \u2208 R\u00b2 | xy = 0} is a subspace of R\u00b2.",
    "output": "import numpy as np\n\ndef is_in_W(v):\n    return np.isclose(v[0] * v[1], 0)\n\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\nassert is_in_W(v1) and is_in_W(v2)\nassert not is_in_W(v1 + v2)\n\nprint('W is not a subspace of R\u00b2 because it is not closed under addition.')"
  },
  {
    "input": "Find a basis for the subspace W = span{(1, 2, 3), (4, 5, 6)} in R\u00b3.",
    "output": "import numpy as np\nfrom sympy import Matrix\n\nv1 = [1, 2, 3]\nv2 = [4, 5, 6]\n\n# Create a matrix with the vectors as rows\nA = Matrix([v1, v2])\n\n# Perform row-reduction\nrref_matrix, pivot_columns = A.rref()\n\n# Extract the pivot rows (basis vectors)\nbasis = [A.row(i) for i in pivot_columns]\nprint('Basis for W:', basis)"
  },
  {
    "input": "Find the dimension of the subspace of R^4 defined by x + y + z + w = 0 and x - y + z - w = 0.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 1, 1], [1, -1, 1, -1]])\nrank = np.linalg.matrix_rank(A)\ndimension = 4 - rank\nprint('Dimension of W:', dimension)"
  },
  {
    "input": "Find the rank and nullity of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank of A:', rank, 'Nullity of A:', nullity)"
  },
  {
    "input": "Find the inner product of u = (3, -1, 2) and v = (-1, 4, 0).",
    "output": "import numpy as np\n\nu = np.array([3, -1, 2])\nv = np.array([-1, 4, 0])\ninner_product = np.dot(u, v)\nprint('Inner product:', inner_product)"
  },
  {
    "input": "Find the orthogonal projection of v = (4, 2, -3) onto u = (1, 1, 1).",
    "output": "import numpy as np\n\nv = np.array([4, 2, -3])\nu = np.array([1, 1, 1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection of v onto u:', projection)"
  },
  {
    "input": "Determine if the transformation T(x, y) = (2x + y, x - y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[2, 1], [1, -1]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('Is T invertible?', invertible)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T(x, y, z) = (x + y, y - z, z + x).",
    "output": "import numpy as np\n\nT = np.array([[1, 1, 0], [0, 1, -1], [1, 0, 1]])\nprint('Matrix representation of T:', T)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[0, -1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the Gram-Schmidt process for the vectors v1 = (1, 1, 0), v2 = (1, 0, 1).",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for safe arithmetic\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 1, 0], [1, 0, 1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Determine if the set of vectors {(1,2,3), (2,4,6), (3,6,9)} is linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [3,6,9]])\ndet = np.linalg.det(A)\nis_dependent = np.isclose(det, 0)\nprint('The vectors are linearly dependent:', is_dependent)"
  },
  {
    "input": "Find a basis for the solution space of the homogeneous system Ax = 0, where A = [[1, 2, 3], [2, 4, 6]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [2, 4, 6]])\nbasis = A.nullspace()\nprint('Basis for solution space:', basis)"
  },
  {
    "input": "Find the rank and nullity of the transformation given by matrix A = [[2, 3, 5], [4, 6, 10], [1, -1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[2, 3, 5], [4, 6, 10], [1, -1, 0]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find the dimension of the span of the vectors v1 = (1, 2, 3), v2 = (4, 5, 6), v3 = (7, 8, 9).",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nspan_dim = np.linalg.matrix_rank(A)\nprint('Dimension of span:', span_dim)"
  },
  {
    "input": "Compute the orthonormal basis using Gram-Schmidt for vectors v1 = (1,1,0), v2 = (1,0,1), v3 = (0,1,1).",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for safe arithmetic\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1,1,0], [1,0,1], [0,1,1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the eigenvalues of the transformation T(x, y) = (3x - y, x + 2y).",
    "output": "import numpy as np\n\nA = np.array([[3, -1], [1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine if v = (2, 4, 6) is in the column space of A = [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4], [5, 6]])\nv = np.array([2, 4, 6])\nsolution, residuals, rank, s = np.linalg.lstsq(A, v, rcond=None)\nin_col_space = np.allclose(np.dot(A, solution), v)\nprint('Is v in the column space?', in_col_space)"
  },
  {
    "input": "Find the coordinates of v = (3, 1) in the basis B = {(1,2), (2,3)}.",
    "output": "import numpy as np\n\nB = np.array([[1, 2], [2, 3]])\nv = np.array([3, 1])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates of v in basis B:', coordinates)"
  },
  {
    "input": "Check if the function f(x) = 2x + 3 is a linear transformation from R to R.",
    "output": "def is_linear(f, x, y, c):\n    return f(x + y) == f(x) + f(y) and f(c * x) == c * f(x)\n\nf = lambda x: 2*x + 3\nprint('Is f a linear transformation?', is_linear(f, 1, 2, 3))"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1, 2, 3), (2, 4, 6)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [2, 4, 6]])\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Determine if the transformation T(x, y, z) = (x + y, y + z, x - z) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1, 1, 0], [0, 1, 1], [1, 0, -1]])\ndet = np.linalg.det(A)\nis_one_to_one = det != 0\nprint('Is T one-to-one?', is_one_to_one)"
  },
  {
    "input": "Find the projection of v = (3, 4, 5) onto the subspace spanned by u = (1, 1, 1).",
    "output": "import numpy as np\n\nv = np.array([3, 4, 5])\nu = np.array([1, 1, 1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection:', projection)"
  },
  {
    "input": "Find the inverse of the matrix A = [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\nA_inv = np.linalg.inv(A)\nprint('Inverse of A:', A_inv)"
  },
  {
    "input": "Find the determinant of the linear transformation represented by A = [[2, -1, 0], [1, 3, -2], [0, 1, 4]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1, 0], [1, 3, -2], [0, 1, 4]])\ndet_A = np.linalg.det(A)\nprint('Determinant of A:', det_A)"
  },
  {
    "input": "Determine if the set {(1,2,3), (4,5,6), (7,8,9)} forms a basis for R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nis_basis = rank == A.shape[1]\nprint('Is the set a basis for R\u00b3?', is_basis)"
  },
  {
    "input": "Find the dimension of the subspace spanned by the vectors {(1,0,1), (2,1,3), (3,2,4)}.",
    "output": "import numpy as np\n\nA = np.array([[1,0,1], [2,1,3], [3,2,4]])\ndimension = np.linalg.matrix_rank(A)\nprint('Dimension of the subspace:', dimension)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(1,2,1), (2,4,2)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,1], [2,4,2]])\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Determine if the transformation T(x, y, z) = (x+y, y+z, x+z) is onto.",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,1], [1,0,1]])\nrk = np.linalg.matrix_rank(A)\nis_onto = rk == A.shape[0]\nprint('Is T onto?', is_onto)"
  },
  {
    "input": "Find the coordinates of v = (4,5,6) in the basis B = {(1,0,0), (0,1,1), (1,1,0)}.",
    "output": "import numpy as np\n\nB = np.array([[1,0,0], [0,1,1], [1,1,0]])\nv = np.array([4,5,6])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates of v in basis B:', coordinates)"
  },
  {
    "input": "Compute the rank and nullity of the matrix A = [[1, 2, 3], [2, 4, 6], [1, -1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [2, 4, 6], [1, -1, 0]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find an orthonormal basis for the span of {(1,2,3), (4,5,6)} using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for safe arithmetic\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 2, 3], [4, 5, 6]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Check if the vector v = (3,1,4) is in the span of {(1,2,3), (2,3,4)}.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,3,4]])\nv = np.array([3,1,4])\nsolution, residuals, rank, s = np.linalg.lstsq(A.T, v, rcond=None)\nin_span = np.allclose(np.dot(A.T, solution), v)\nprint('Is v in the span?', in_span)"
  },
  {
    "input": "Find the null space of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nnull_space = A.nullspace()\nprint('Null space:', null_space)"
  },
  {
    "input": "Determine if the inner product \u27e8x, y\u27e9 = 2x\u2081y\u2081 + 3x\u2082y\u2082 + 4x\u2083y\u2083 defines an inner product space.",
    "output": "import numpy as np\n\ndef inner_product(x, y):\n    return 2*x[0]*y[0] + 3*x[1]*y[1] + 4*x[2]*y[2]\n\ndef check_inner_product():\n    v1 = np.array([1, 2, 3])\n    v2 = np.array([2, -1, 4])\n    return inner_product(v1, v2) == inner_product(v2, v1)\n\nprint('Is the function an inner product?', check_inner_product())"
  },
  {
    "input": "Find a basis for the column space of A = [[1,2,3],[4,5,6],[7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3],[4,5,6],[7,8,9]])\ncolumn_space = A.columnspace()\nprint('Basis for column space:', column_space)"
  },
  {
    "input": "Determine if the vectors {(1,2,3), (2,4,6), (3,6,9)} are linearly independent.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [3,6,9]])\nrank = np.linalg.matrix_rank(A)\nindependent = rank == A.shape[0]\nprint('Are vectors linearly independent?', independent)"
  },
  {
    "input": "Compute the projection of v = (3,4,5) onto the subspace spanned by w = (1,1,1).",
    "output": "import numpy as np\n\nv = np.array([3,4,5])\nw = np.array([1,1,1])\nprojection = (np.dot(v, w) / np.dot(w, w)) * w\nprint('Projection of v onto w:', projection)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x\u00b2} forms a basis for P\u2082.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [0,0,1]])\nrank = np.linalg.matrix_rank(A)\nis_basis = rank == 3\nprint('Does the set form a basis for P\u2082?', is_basis)"
  },
  {
    "input": "Find the dimension of the subspace spanned by {(1,2,1,0), (2,4,2,0), (3,6,3,1)} in R\u2074.",
    "output": "import numpy as np\n\nA = np.array([[1,2,1,0], [2,4,2,0], [3,6,3,1]])\ndimension = np.linalg.matrix_rank(A)\nprint('Dimension of the subspace:', dimension)"
  },
  {
    "input": "Find an orthonormal basis for the span of {(1,2,3,4), (2,3,4,5)} using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for arithmetic operations\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 2, 3, 4], [2, 3, 4, 5]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Check if the set of vectors {(1,0,0,0), (0,1,0,0), (0,0,1,0)} spans R\u2074.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0,0], [0,1,0,0], [0,0,1,0]])\ndimension = np.linalg.matrix_rank(A)\nspans_R4 = dimension == 4\nprint('Does the set span R\u2074?', spans_R4)"
  },
  {
    "input": "Find the null space of A = [[1,2,3,4], [2,4,6,8], [3,6,9,12]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3,4], [2,4,6,8], [3,6,9,12]])\nnull_space = A.nullspace()\nprint('Null space:', null_space)"
  },
  {
    "input": "Find the rank and nullity of A = [[1,2,3],[2,4,6],[3,5,7]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [3,5,7]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Determine if T(x,y,z) = (x+2y, y+z, x+y+z) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1,2,0], [0,1,1], [1,1,1]])\nrk = np.linalg.matrix_rank(A)\nis_one_to_one = rk == A.shape[1]\nprint('Is T one-to-one?', is_one_to_one)"
  },
  {
    "input": "Check if v = (1,1,1) is in the column space of A = [[1,2,3],[4,5,6],[7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nv = np.array([1,1,1])\nsolution, residuals, rank, s = np.linalg.lstsq(A, v, rcond=None)\nin_column_space = np.allclose(np.dot(A, solution), v)\nprint('Is v in the column space?', in_column_space)"
  },
  {
    "input": "Find the basis for the row space of A = [[1,2,3],[4,5,6],[7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3],[4,5,6],[7,8,9]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find the matrix representation of T: R\u00b2 \u2192 R\u00b2, where T(x, y) = (x + y, x - y).",
    "output": "import numpy as np\n\nT_matrix = np.array([[1,1], [1,-1]])\nprint('Matrix representation of T:', T_matrix)"
  },
  {
    "input": "Determine if the function \u27e8x,y\u27e9 = x\u2081y\u2082 + x\u2082y\u2081 is an inner product on R\u00b2.",
    "output": "import numpy as np\n\ndef inner_product(x, y):\n    return x[0]*y[1] + x[1]*y[0]\n\nprint('Is this a valid inner product?', inner_product([1,0], [0,1]) == inner_product([0,1], [1,0]))"
  },
  {
    "input": "Find a basis for the solution space of the homogeneous system Ax=0, where A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nnull_space = A.nullspace()\nprint('Basis for solution space:', null_space)"
  },
  {
    "input": "Determine if the function T(x,y) = (2x - y, x + 3y) is a linear transformation.",
    "output": "import numpy as np\n\ndef T(v):\n    return np.array([2*v[0] - v[1], v[0] + 3*v[1]])\n\ndef is_linear():\n    u = np.array([1,2])\n    v = np.array([3,4])\n    c = 5\n    return np.allclose(T(u+v), T(u) + T(v)) and np.allclose(T(c*u), c*T(u))\n\nprint('Is T a linear transformation?', is_linear())"
  },
  {
    "input": "Compute the Gram-Schmidt process for the set {(1,1,0), (1,0,1), (0,1,1)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for safe arithmetic\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:  # Avoid adding zero vectors\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 1, 0], [1, 0, 1], [0, 1, 1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the rank and nullity of the transformation T: R\u00b3 \u2192 R\u00b2 given by T(x,y,z) = (x+y, y+z).",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,1]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find the coordinates of v = (3,5,7) in the basis B = {(1,1,0), (0,1,1), (1,0,1)}.",
    "output": "import numpy as np\n\nB = np.array([[1,1,0], [0,1,1], [1,0,1]])\nv = np.array([3,5,7])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinates of v in basis B:', coordinates)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(1,2,3), (2,4,6)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [2,4,6]])\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Check if v = (1,1,1) is in the span of {(1,0,1), (2,1,3)}.",
    "output": "import numpy as np\n\nA = np.array([[1,0,1], [2,1,3]])\nv = np.array([1,1,1])\nsolution, residuals, rank, s = np.linalg.lstsq(A.T, v, rcond=None)\nin_span = np.allclose(np.dot(A.T, solution), v)\nprint('Is v in the span?', in_span)"
  },
  {
    "input": "Find an orthonormal basis for the subspace spanned by {(1,2,1), (3,4,1)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure the vector is float for safe subtraction\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:  # Avoid adding near-zero vectors\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 2, 1], [3, 4, 1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Determine if the inner product \u27e8x,y\u27e9 = x\u2081y\u2081 + 2x\u2082y\u2082 + 3x\u2083y\u2083 satisfies the inner product properties.",
    "output": "import numpy as np\n\ndef inner_product(x, y):\n    return x[0]*y[0] + 2*x[1]*y[1] + 3*x[2]*y[2]\n\ndef check_inner_product():\n    v1 = np.array([1, 2, 3])\n    v2 = np.array([2, -1, 4])\n    return inner_product(v1, v2) == inner_product(v2, v1)\n\nprint('Is the function an inner product?', check_inner_product())"
  },
  {
    "input": "Find the row space basis of A = [[1,2,3],[4,5,6],[7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3],[4,5,6],[7,8,9]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T(x, y) = (x + 2y, 3x - y) in standard basis.",
    "output": "import numpy as np\n\nT_matrix = np.array([[1,2], [3,-1]])\nprint('Matrix representation of T:', T_matrix)"
  },
  {
    "input": "Find the eigenvalues of the linear transformation T given by the matrix [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues = np.linalg.eigvals(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the rank and nullity of the transformation T: R\u00b3 \u2192 R\u00b2 given by T(x,y,z) = (x+2y, 3y+z).",
    "output": "import numpy as np\n\nA = np.array([[1,2,0], [0,3,1]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Check if the vectors {(1,1,1), (2,2,2), (3,3,3)} span R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,1,1], [2,2,2], [3,3,3]])\nrank = np.linalg.matrix_rank(A)\nspans_R3 = rank == 3\nprint('Do the vectors span R\u00b3?', spans_R3)"
  },
  {
    "input": "Find a basis for the column space of A = [[2, 4, 1], [1, 3, 0], [3, 7, 2]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2, 4, 1], [1, 3, 0], [3, 7, 2]])\ncol_space = A.columnspace()\nprint('Basis for column space:', col_space)"
  },
  {
    "input": "Determine if the vectors {(2,3,1), (1,4,2), (3,7,5)} are linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[2,3,1], [1,4,2], [3,7,5]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < 3\nprint('Are the vectors linearly dependent?', dependent)"
  },
  {
    "input": "Find the orthogonal projection of v = (3,4,5) onto the subspace spanned by (1,1,1).",
    "output": "import numpy as np\n\ndef projection(v, u):\n    return (np.dot(v, u) / np.dot(u, u)) * u\n\nv = np.array([3,4,5])\nu = np.array([1,1,1])\nproj_v = projection(v, u)\nprint('Orthogonal projection:', proj_v)"
  },
  {
    "input": "Determine if the set {(1,0,0), (0,1,0), (1,1,1)} is a basis for R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [1,1,1]])\nrank = np.linalg.matrix_rank(A)\nis_basis = rank == 3\nprint('Is the set a basis for R\u00b3?', is_basis)"
  },
  {
    "input": "Find the dimension of the null space of A = [[1,2,3,4], [2,4,6,8]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3,4], [2,4,6,8]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Dimension of null space:', nullity)"
  },
  {
    "input": "Compute the determinant of the matrix representing the linear transformation T(x,y,z) = (x+y, 2y+z, x+z).",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,2,1], [1,0,1]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the kernel (null space) of the matrix [[1,1,1], [2,3,5]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,1], [2,3,5]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Find the inverse of the transformation matrix [[1,2], [3,4]], if it exists.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nif np.linalg.det(A) != 0:\n    A_inv = np.linalg.inv(A)\n    print('Inverse matrix:', A_inv)\nelse:\n    print('Matrix is not invertible.')"
  },
  {
    "input": "Compute the angle between the vectors (2,3) and (4,5) using the inner product.",
    "output": "import numpy as np\n\nv1 = np.array([2,3])\nv2 = np.array([4,5])\ndot_product = np.dot(v1, v2)\nnorms = np.linalg.norm(v1) * np.linalg.norm(v2)\nangle = np.arccos(dot_product / norms)\nprint('Angle in radians:', angle)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the transformation matrix [[3,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[3,1], [1,3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the transformation T(x,y) = (x+y, x-y) preserves orthogonality.",
    "output": "import numpy as np\n\ndef T(v):\n    return np.array([v[0] + v[1], v[0] - v[1]])\n\nv1 = np.array([1,1])\nv2 = np.array([1,-1])\northogonal_before = np.dot(v1, v2) == 0\northogonal_after = np.dot(T(v1), T(v2)) == 0\npreserves = orthogonal_before and orthogonal_after\nprint('Does T preserve orthogonality?', preserves)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T: R\u00b2 \u2192 R\u00b2 defined by T(x,y) = (x + y, 2x - y).",
    "output": "import numpy as np\n\nT_matrix = np.array([[1,1], [2,-1]])\nprint('Matrix representation of T:', T_matrix)"
  },
  {
    "input": "Find an orthonormal basis for the span of {(1,2), (3,4)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float for proper arithmetic\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 2], [3, 4]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Verify if the set {(1,0,0), (0,1,0), (0,0,1), (1,1,1)} forms a basis for R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [0,0,1], [1,1,1]])\nrank = np.linalg.matrix_rank(A)\nis_basis = rank == 3\nprint('Does the set form a basis for R\u00b3?', is_basis)"
  },
  {
    "input": "Find the rank of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank)"
  },
  {
    "input": "Check if the vectors {(1,2,1), (2,4,2), (3,6,3)} are linearly independent.",
    "output": "import numpy as np\n\nA = np.array([[1,2,1], [2,4,2], [3,6,3]])\nrank = np.linalg.matrix_rank(A)\nindependent = rank == 3\nprint('Are the vectors independent?', independent)"
  },
  {
    "input": "Determine if the set of polynomials {1 + x, 1 - x, x^2 - 1} is linearly independent in P\u2082.",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\npolynomials = [1 + x, 1 - x, x**2 - 1]\nmatrix = sp.Matrix([[sp.expand(p).coeff(x, i) for i in range(3)] for p in polynomials])\nrank = matrix.rank()\nindependent = rank == 3\nprint('Are the polynomials linearly independent?', independent)"
  },
  {
    "input": "Find a basis for the row space of A = [[2, 4, 1], [1, 3, 0], [3, 7, 2]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2, 4, 1], [1, 3, 0], [3, 7, 2]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Compute the orthonormal basis for the subspace spanned by {(2,2,1), (1,0,1)} using Gram-Schmidt process.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure the vector supports float operations\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[2, 2, 1], [1, 0, 1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the rank of the transformation matrix T: R\u00b3 \u2192 R\u00b3 given by T(x,y,z) = (x+y, y+z, x-z).",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,1], [1,0,-1]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of the transformation:', rank)"
  },
  {
    "input": "Find an eigenvector corresponding to the eigenvalue \u03bb = 3 for the matrix [[3,1], [0,3]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[3,1], [0,3]])\nlambda_val = 3\nnull_space = (A - lambda_val * sp.eye(2)).nullspace()\nprint('Eigenvector for \u03bb=3:', null_space)"
  },
  {
    "input": "Determine if the set of vectors {(1,2,3), (3,2,1), (4,4,4)} spans R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [3,2,1], [4,4,4]])\nrank = np.linalg.matrix_rank(A)\nspans = rank == 3\nprint('Does the set span R\u00b3?', spans)"
  },
  {
    "input": "Find a basis for the null space of A = [[1,1,1], [2,3,5]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,1], [2,3,5]])\nkernel = A.nullspace()\nprint('Basis for null space:', kernel)"
  },
  {
    "input": "Verify if the transformation T(x,y) = (x+2y, 3x+5y) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,5]])\nrank = np.linalg.matrix_rank(A)\ninvertible = rank == 2\nprint('Is T one-to-one?', invertible)"
  },
  {
    "input": "Find the determinant of the linear transformation matrix for T(x,y,z) = (x+2y, 2x+3y, y+z).",
    "output": "import numpy as np\n\nA = np.array([[1,2,0], [2,3,0], [0,1,1]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the least squares solution to Ax = b where A = [[1,1], [2,3], [3,5]] and b = [3,7,11].",
    "output": "import numpy as np\n\nA = np.array([[1,1], [2,3], [3,5]])\nb = np.array([3,7,11])\nx_ls = np.linalg.lstsq(A, b, rcond=None)[0]\nprint('Least squares solution:', x_ls)"
  },
  {
    "input": "Determine if the matrix A = [[1,2,3], [0,1,4], [0,0,5]] is diagonalizable.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [0,1,4], [0,0,5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\ndiagonalizable = np.linalg.matrix_rank(eigenvectors) == 3\nprint('Is A diagonalizable?', diagonalizable)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1,1,1), (2,2,0)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,1], [2,2,0]])\ncomplement = A.nullspace()\nprint('Orthogonal complement:', complement)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T: R\u00b2 \u2192 R\u00b2 defined by T(x,y) = (x - y, 2x + 3y).",
    "output": "import numpy as np\n\nT_matrix = np.array([[1,-1], [2,3]])\nprint('Matrix representation of T:', T_matrix)"
  },
  {
    "input": "Find the rank of A = [[1,2,3,4], [0,1,2,3], [0,0,1,2]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3,4], [0,1,2,3], [0,0,1,2]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank of A:', rank)"
  },
  {
    "input": "Find the nullity of A = [[1,0,0], [0,1,0], [0,0,0]].",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [0,0,0]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Nullity of A:', nullity)"
  },
  {
    "input": "Determine if the vectors {(1,1,1), (2,2,2), (3,3,3)} are linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[1,1,1], [2,2,2], [3,3,3]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < 3\nprint('Are the vectors linearly dependent?', dependent)"
  },
  {
    "input": "Find the dimension of the vector space of all 2\u00d72 upper triangular matrices.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[sp.Symbol('a'), sp.Symbol('b')], [0, sp.Symbol('c')]])\ndim = len(A.free_symbols)\nprint('Dimension:', dim)"
  },
  {
    "input": "Determine if the vectors {(1,2,3,4), (2,3,5,7), (1,1,2,3)} form a basis for R\u2074.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3,4], [2,3,5,7], [1,1,2,3]])\nrank = np.linalg.matrix_rank(A)\nbasis = rank == 4\nprint('Do the vectors form a basis for R\u2074?', basis)"
  },
  {
    "input": "Find the orthonormal basis for the column space of A = [[3,1], [4,2], [0,1]] using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Convert to float to avoid casting issues\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nA = np.array([[3,1], [4,2], [0,1]], dtype=float)\nvectors = A.T  # Transpose to iterate over columns\northonormal_basis = gram_schmidt(vectors.T)  # Transpose back to work with column vectors\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Compute the rank-nullity of the transformation T(x,y,z) = (x+y, y-z, 2x+3y).",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,-1], [2,3,0]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues = np.linalg.eigvals(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine if the set of functions {x, x\u00b2, x\u00b3} forms a basis for the space of polynomials up to degree 3.",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\nbasis_functions = [x, x**2, x**3]\ncoeff_matrix = sp.Matrix([[sp.expand(f).coeff(x, i) for i in range(4)] for f in basis_functions])\nrank = coeff_matrix.rank()\nforms_basis = rank == 3\nprint('Forms a basis?', forms_basis)"
  },
  {
    "input": "Find the determinant of the transformation matrix T: R\u00b3 \u2192 R\u00b3 given by T(x,y,z) = (x+2y, y+z, x-z).",
    "output": "import numpy as np\n\nA = np.array([[1,2,0], [0,1,1], [1,0,-1]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find a nontrivial solution to Ax=0 where A = [[1,1,1], [2,3,5]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,1], [2,3,5]])\nkernel = A.nullspace()\nprint('Nontrivial solution:', kernel)"
  },
  {
    "input": "Find a basis for the column space of A = [[1,2,3], [0,1,4], [0,0,5]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [0,1,4], [0,0,5]])\ncol_space = A.columnspace()\nprint('Basis for column space:', col_space)"
  },
  {
    "input": "Compute the dot product of vectors u = (2,3,4) and v = (1,0,-1).",
    "output": "import numpy as np\n\nu = np.array([2,3,4])\nv = np.array([1,0,-1])\ndot_product = np.dot(u, v)\nprint('Dot product:', dot_product)"
  },
  {
    "input": "Verify if the function f(x) = x\u00b2 - 2x + 3 is in the span of {x\u00b2, x, 1}.",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\nvector_space = [x**2, x, 1]\ntarget = x**2 - 2*x + 3\ncoeff_matrix = sp.Matrix([[sp.expand(f).coeff(x, i) for i in range(3)] for f in vector_space])\nrank = coeff_matrix.rank()\nspans = rank == 3\nprint('Is f(x) in the span?', spans)"
  },
  {
    "input": "Find the angle between the vectors (3,4) and (5,12).",
    "output": "import numpy as np\n\nu = np.array([3,4])\nv = np.array([5,12])\ndot_product = np.dot(u, v)\nnorm_u = np.linalg.norm(u)\nnorm_v = np.linalg.norm(v)\nangle = np.arccos(dot_product / (norm_u * norm_v))\nprint('Angle (radians):', angle)"
  },
  {
    "input": "Find the dimension of the space spanned by {(1,0,0,1), (0,1,0,1), (0,0,1,1)} in R\u2074.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0,1], [0,1,0,1], [0,0,1,1]])\nrank = np.linalg.matrix_rank(A)\nprint('Dimension of span:', rank)"
  },
  {
    "input": "Find the determinant of the transformation matrix T: R\u00b2 \u2192 R\u00b2 defined by T(x,y) = (2x + y, x - 3y).",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,-3]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the standard matrix for the linear transformation T: R\u00b2 \u2192 R\u00b2 where T rotates vectors by 90 degrees counterclockwise.",
    "output": "import numpy as np\n\ntheta = np.pi / 2\nrotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])\nprint('Standard matrix:', rotation_matrix)"
  },
  {
    "input": "Find the orthonormal basis of the subspace spanned by {(1,1), (1,-1)} using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure float type for safe operations\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 1], [1, -1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the null space of the matrix A = [[2,4], [1,2]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,4], [1,2]])\nnull_space = A.nullspace()\nprint('Null space:', null_space)"
  },
  {
    "input": "Determine if the vectors {(1,0,1), (0,1,1), (1,1,2)} are linearly dependent or independent.",
    "output": "import numpy as np\n\nA = np.array([[1,0,1], [0,1,1], [1,1,2]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < A.shape[1]\nprint('Linearly dependent?', dependent)"
  },
  {
    "input": "Find the eigenvectors of the matrix A = [[3,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[3,1], [1,3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine the dimension of the subspace of R\u00b3 spanned by {(1,2,3), (2,4,6)}.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6]])\nrank = np.linalg.matrix_rank(A)\nprint('Dimension of subspace:', rank)"
  },
  {
    "input": "Find the transition matrix from basis B = {(1,1), (1,-1)} to standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,1], [1,-1]])\nP = np.linalg.inv(B)\nprint('Transition matrix:', P)"
  },
  {
    "input": "Find the kernel of the linear transformation T(x,y,z) = (x + y, y - z).",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,0], [0,1,-1]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Find the determinant of the transformation matrix for T(x,y) = (2x + y, -x + 3y).",
    "output": "import numpy as np\n\nA = np.array([[2,1], [-1,3]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find an orthonormal basis for the space spanned by {(1,1,0), (1,0,1)} using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float).copy()  # Ensure float and not a view of the original\n        for u in basis:\n            v = v - np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1,1,0], [1,0,1]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the rank of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1,2,3)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3]])\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Find the determinant of the change of basis matrix from B = {(1,2), (2,4)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,2], [2,4]])\ndet = np.linalg.det(B)\nprint('Determinant:', det)"
  },
  {
    "input": "Find a basis for the row space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nrow_space = A.rref()[0]\nprint('Row space basis:', row_space)"
  },
  {
    "input": "Find a vector orthogonal to both (1,2,3) and (4,5,6).",
    "output": "import numpy as np\n\nu = np.array([1,2,3])\nv = np.array([4,5,6])\northogonal_vector = np.cross(u, v)\nprint('Orthogonal vector:', orthogonal_vector)"
  },
  {
    "input": "Find a basis for the column space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\ncol_space = A.columnspace()\nprint('Column space basis:', col_space)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[2,0,0], [0,3,0], [0,0,4]].",
    "output": "import numpy as np\n\nA = np.array([[2,0,0], [0,3,0], [0,0,4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, 'Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the angle between the vectors (1,2,3) and (4,5,6).",
    "output": "import numpy as np\n\nu = np.array([1,2,3])\nv = np.array([4,5,6])\ndot_product = np.dot(u, v)\nnorm_u = np.linalg.norm(u)\nnorm_v = np.linalg.norm(v)\nangle = np.arccos(dot_product / (norm_u * norm_v))\nprint('Angle (radians):', angle)"
  },
  {
    "input": "Find the trace of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Find the least-squares solution to Ax=b where A = [[1,1], [1,-1]], b = [3,1].",
    "output": "import numpy as np\n\nA = np.array([[1,1], [1,-1]])\nb = np.array([3,1])\nleast_squares_solution = np.linalg.lstsq(A, b, rcond=None)[0]\nprint('Least-squares solution:', least_squares_solution)"
  },
  {
    "input": "Find a basis for the null space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nnull_space = A.nullspace()\nprint('Null space basis:', null_space)"
  },
  {
    "input": "Verify if the set S = {(1,2,3), (4,5,6), (7,8,9)} forms a basis for R\u00b3.",
    "output": "import numpy as np\n\nS = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(S)\nprint('Is basis for R\u00b3?', rank == 3)"
  },
  {
    "input": "Find the orthogonal projection of v = (3,4,5) onto the vector u = (1,2,2).",
    "output": "import numpy as np\n\nv = np.array([3,4,5])\nu = np.array([1,2,2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection:', projection)"
  },
  {
    "input": "Determine if the transformation T(x,y) = (x+y, x-y) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[1,1], [1,-1]])\ndet = np.linalg.det(A)\nprint('One-to-one?', det != 0)"
  },
  {
    "input": "Find the matrix representation of T(x,y) = (2x + y, x - y) in the standard basis.",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,-1]])\nprint('Matrix representation:', A)"
  },
  {
    "input": "Find the rank and nullity of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find the eigenvalues of A = [[0,1], [-2,-3]].",
    "output": "import numpy as np\n\nA = np.array([[0,1], [-2,-3]])\neigenvalues = np.linalg.eigvals(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the least squares solution to Ax=b where A = [[1,2], [3,4]], b = [5,6].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nb = np.array([5,6])\nx = np.linalg.lstsq(A, b, rcond=None)[0]\nprint('Least squares solution:', x)"
  },
  {
    "input": "Compute the Gram-Schmidt process for vectors {(1,2,2), (2,4,5)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float).copy()  # Ensure float dtype and create a modifiable copy\n        for u in basis:\n            v = v - np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 2, 2], [2, 4, 5]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the determinant of the transition matrix from basis B = {(2,3), (3,5)} to standard basis.",
    "output": "import numpy as np\n\nB = np.array([[2,3], [3,5]])\ndet = np.linalg.det(B)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the null space of A = [[1,1,1], [2,2,2], [3,3,3]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,1], [2,2,2], [3,3,3]])\nnull_space = A.nullspace()\nprint('Null space:', null_space)"
  },
  {
    "input": "Find an orthogonal basis for the column space of A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nQ, R = np.linalg.qr(A)\nprint('Orthogonal basis:', Q)"
  },
  {
    "input": "Find the angle between the vectors (2,3,4) and (1,0,0).",
    "output": "import numpy as np\n\nu = np.array([2,3,4])\nv = np.array([1,0,0])\ndot_product = np.dot(u, v)\nnorm_u = np.linalg.norm(u)\nnorm_v = np.linalg.norm(v)\nangle = np.arccos(dot_product / (norm_u * norm_v))\nprint('Angle (radians):', angle)"
  },
  {
    "input": "Find the trace of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Find the kernel of T(x,y) = (x + 2y, y - x).",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2], [-1,1]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Find a basis for the space of solutions of Ax=0 where A = [[1,2,3], [4,5,6]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6]])\nnull_space = A.nullspace()\nprint('Solution basis:', null_space)"
  },
  {
    "input": "Find the spectral decomposition of A = [[4,0], [0,9]].",
    "output": "import numpy as np\n\nA = np.array([[4,0], [0,9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Spectral decomposition:', eigenvectors @ np.diag(eigenvalues) @ np.linalg.inv(eigenvectors))"
  },
  {
    "input": "Find the best approximation to b = [1,2] in the column space of A = [[2,3], [4,5]].",
    "output": "import numpy as np\n\nA = np.array([[2,3], [4,5]])\nb = np.array([1,2])\nprojection = A @ np.linalg.pinv(A) @ b\nprint('Best approximation:', projection)"
  },
  {
    "input": "Find the determinant of the Gram matrix of the vectors {(1,0,1), (0,1,1)}.",
    "output": "import numpy as np\n\nV = np.array([[1,0,1], [0,1,1]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[1,2,3], [0,1,4], [0,0,2]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [0,1,4], [0,0,2]])\neigenvalues = np.linalg.eigvals(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine whether the set of vectors {(1,2,3), (2,4,6), (3,6,9)} forms a linearly independent set.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [3,6,9]])\nrank = np.linalg.matrix_rank(A)\nprint('Linearly independent?', rank == A.shape[0])"
  },
  {
    "input": "Find a basis for the row space of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nrow_space = A.rref()[0]\nprint('Row space basis:', row_space)"
  },
  {
    "input": "Determine if the function T(x,y,z) = (2x-y, x+z, y-3z) is a linear transformation.",
    "output": "import numpy as np\n\ndef is_linear(T, basis):\n    zero_vector = T(np.zeros_like(basis[0]))\n    return all(np.all(T(b1 + b2) == T(b1) + T(b2)) and np.all(T(2*b1) == 2*T(b1)) for b1 in basis for b2 in basis) and np.all(zero_vector == 0)\n\ndef T(v): return np.array([2*v[0] - v[1], v[0] + v[2], v[1] - 3*v[2]])\nbasis = [np.array([1,0,0]), np.array([0,1,0]), np.array([0,0,1])]\nprint('Is linear transformation?', is_linear(T, basis))"
  },
  {
    "input": "Compute the change of basis matrix from B = {(1,1), (1,-1)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,1], [1,-1]])\nP = np.linalg.inv(B)\nprint('Change of basis matrix:', P)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1,2,3), (4,5,6)} in R\u00b3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6]])\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Find the singular value decomposition (SVD) of A = [[1,2], [3,4], [5,6]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4], [5,6]])\nU, S, Vt = np.linalg.svd(A)\nprint('U:', U, '\\nSingular values:', S, '\\nV^T:', Vt)"
  },
  {
    "input": "Find the determinant of the Gram matrix of vectors {(1,2), (2,3)}.",
    "output": "import numpy as np\n\nV = np.array([[1,2], [2,3]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Compute the norm of the vector v = (3,4,12) in R\u00b3.",
    "output": "import numpy as np\n\nv = np.array([3,4,12])\nnorm = np.linalg.norm(v)\nprint('Norm:', norm)"
  },
  {
    "input": "Determine if A = [[1,2], [3,4]] is diagonalizable.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Diagonalizable?', np.linalg.matrix_rank(eigenvectors) == A.shape[0])"
  },
  {
    "input": "Find the coordinate vector of v = (5,3) with respect to the basis B = {(2,1), (1,1)}.",
    "output": "import numpy as np\n\nB = np.array([[2,1], [1,1]])\nv = np.array([5,3])\ncoordinates = np.linalg.solve(B, v)\nprint('Coordinate vector:', coordinates)"
  },
  {
    "input": "Find the best approximation to b = (2,3) in the subspace spanned by {(1,1)}.",
    "output": "import numpy as np\n\nb = np.array([2,3])\nv = np.array([1,1])\nprojection = (np.dot(b, v) / np.dot(v, v)) * v\nprint('Best approximation:', projection)"
  },
  {
    "input": "Determine if the zero vector is the only solution to Ax=0 for A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nkernel_dim = A.shape[1] - np.linalg.matrix_rank(A)\nprint('Only zero vector solution?', kernel_dim == 0)"
  },
  {
    "input": "Find the angle between the vectors (1,2) and (3,4).",
    "output": "import numpy as np\n\nv1 = np.array([1,2])\nv2 = np.array([3,4])\ncos_theta = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\nangle = np.arccos(cos_theta)\nprint('Angle (radians):', angle)"
  },
  {
    "input": "Find the orthonormal basis using Gram-Schmidt for vectors {(1,1,1), (1,2,3)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float).copy()  # Ensure float dtype and copy\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[1, 1, 1], [1, 2, 3]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the characteristic polynomial of A = [[1,2], [3,4]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2], [3,4]])\nchar_poly = A.charpoly().as_expr()\nprint('Characteristic polynomial:', char_poly)"
  },
  {
    "input": "Compute the pseudo-inverse of A = [[1,2], [3,4], [5,6]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4], [5,6]])\npinv_A = np.linalg.pinv(A)\nprint('Pseudo-inverse:', pinv_A)"
  },
  {
    "input": "Find the minimal polynomial of A = [[2,0], [0,3]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,0], [0,3]])\nchar_poly = A.charpoly().as_expr()\nmin_poly = sp.simplify(char_poly / sp.gcd(char_poly, char_poly.diff('x')))\nprint('Minimal polynomial:', min_poly)"
  },
  {
    "input": "Find the determinant of the transition matrix from basis B = {(1,0,1), (0,1,1)} to standard basis.",
    "output": "import numpy as np\n\n# B contains two vectors in R^3, so we cannot compute a 3x3 determinant directly\n# To form a valid square matrix for determinant, the space must be R^2 (2 vectors in R^2) or complete to 3 vectors\n# Assuming the intent is to find the determinant of the 2x2 matrix formed by projecting into a subspace:\n\nB = np.array([[1, 0], [0, 1]])\n# This is the projection of B vectors onto the first two coordinates (ignoring the 3rd since we're only given 2 vectors)\ndet = np.linalg.det(B)\nprint('Determinant:', det)"
  },
  {
    "input": "Determine if the set S = {(1,2,3), (2,4,6), (3,6,9), (4,8,12)} is a basis for R\u00b3.",
    "output": "import numpy as np\n\nS = np.array([[1,2,3], [2,4,6], [3,6,9], [4,8,12]])\nrank = np.linalg.matrix_rank(S)\nprint('Is a basis for R\u00b3?', rank == 3)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of A = [[4,-2], [1,1]].",
    "output": "import numpy as np\n\nA = np.array([[4,-2], [1,1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, '\\nEigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the dimension of the subspace spanned by {(1,2,3), (2,4,6), (5,6,7)}.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [5,6,7]])\ndim = np.linalg.matrix_rank(A)\nprint('Dimension of subspace:', dim)"
  },
  {
    "input": "Find the projection of v = (3,4,5) onto the subspace spanned by (1,1,1).",
    "output": "import numpy as np\n\nv = np.array([3,4,5])\nu = np.array([1,1,1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint('Projection:', projection)"
  },
  {
    "input": "Determine whether the matrix A = [[1,2], [2,4]] is invertible.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [2,4]])\ndet = np.linalg.det(A)\nprint('Invertible?', det != 0)"
  },
  {
    "input": "Find the eigenvalues of A = [[0, -1], [1, 0]] and determine if A is diagonalizable.",
    "output": "import numpy as np\n\nA = np.array([[0,-1], [1,0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, '\\nDiagonalizable?', np.linalg.matrix_rank(eigenvectors) == A.shape[0])"
  },
  {
    "input": "Find the span of the vectors {(2,3), (4,6)}.",
    "output": "import numpy as np\n\nA = np.array([[2,3], [4,6]])\nrank = np.linalg.matrix_rank(A)\nprint('Dimension of span:', rank)"
  },
  {
    "input": "Find the rank of the Gram matrix formed by the vectors {(1,2), (2,3)}.",
    "output": "import numpy as np\n\nV = np.array([[1,2], [2,3]])\nG = V @ V.T\nrank = np.linalg.matrix_rank(G)\nprint('Rank of Gram matrix:', rank)"
  },
  {
    "input": "Find the least squares solution to Ax = b for A = [[1,1], [1,-1]], b = [2,0].",
    "output": "import numpy as np\n\nA = np.array([[1,1], [1,-1]])\nb = np.array([2,0])\nx_ls = np.linalg.lstsq(A, b, rcond=None)[0]\nprint('Least squares solution:', x_ls)"
  },
  {
    "input": "Find an orthonormal basis for the subspace spanned by {(3,1), (2,2)} using Gram-Schmidt.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Ensure floating point for safe subtraction\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nvectors = np.array([[3,1], [2,2]], dtype=float)\northonormal_basis = gram_schmidt(vectors)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Compute the spectral decomposition of A = [[3,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[3,1], [1,3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nD = np.diag(eigenvalues)\nP = eigenvectors\nprint('Spectral decomposition: P=', P, 'D=', D)"
  },
  {
    "input": "Find the determinant of the transition matrix from basis B = {(1,1), (1,-1)} to standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,1], [1,-1]])\ndet = np.linalg.det(B)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the kernel of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Find the trace of A = [[5,1], [2,3]].",
    "output": "import numpy as np\n\nA = np.array([[5,1], [2,3]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Find the spectral radius of A = [[4,2], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[4,2], [1,3]])\neigenvalues = np.linalg.eigvals(A)\nspectral_radius = max(abs(eigenvalues))\nprint('Spectral radius:', spectral_radius)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, '\\nEigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the determinant of the Gram matrix for the vectors {(1,1,1), (1,2,3)}.",
    "output": "import numpy as np\n\nV = np.array([[1,1,1], [1,2,3]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Determine if the set of vectors {(1,1,0), (0,1,1), (1,0,1)} forms a basis for R\u00b3.",
    "output": "import numpy as np\n\nV = np.array([[1,1,0], [0,1,1], [1,0,1]])\nrank = np.linalg.matrix_rank(V)\nprint('Forms a basis for R\u00b3?', rank == 3)"
  },
  {
    "input": "Find the orthogonal projection of v = (2,3,4) onto the plane spanned by (1,0,1) and (0,1,1).",
    "output": "import numpy as np\n\ndef projection(v, u):\n    return (np.dot(v, u) / np.dot(u, u)) * u\n\nV = np.array([2,3,4])\nU1 = np.array([1,0,1])\nU2 = np.array([0,1,1])\nproj = projection(V, U1) + projection(V, U2)\nprint('Projection:', proj)"
  },
  {
    "input": "Find the determinant of the matrix representing the linear transformation T(x,y) = (2x+y, x+3y).",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,3]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Verify if the set {(1,2,3), (4,5,6), (7,8,9)} is linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < A.shape[0]\nprint('Linearly dependent?', dependent)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[1,2,0], [0,1,3], [0,0,2]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,0], [0,1,3], [0,0,2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, '\\nEigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the transformation T(x,y) = (3x+y, -x+4y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[3,1], [-1,4]])\ndet = np.linalg.det(A)\nprint('Invertible?', det != 0)"
  },
  {
    "input": "Find the Gram-Schmidt orthonormal basis for the vectors {(1,1,1), (1,2,3), (1,3,5)}.",
    "output": "import numpy as np\n\ndef gram_schmidt(vectors):\n    basis = []\n    for v in vectors:\n        v = v.astype(float)  # Convert to float to prevent casting issues\n        for u in basis:\n            v -= np.dot(v, u) / np.dot(u, u) * u\n        norm = np.linalg.norm(v)\n        if norm > 1e-10:\n            basis.append(v / norm)\n    return np.array(basis)\n\nV = np.array([[1,1,1], [1,2,3], [1,3,5]], dtype=float)\northonormal_basis = gram_schmidt(V)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Compute the spectral decomposition of A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nD = np.diag(eigenvalues)\nP = eigenvectors\nprint('Spectral decomposition: P=', P, 'D=', D)"
  },
  {
    "input": "Find the dimension of the subspace spanned by {(1,0,0), (0,1,1), (1,1,1), (1,2,3)}.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,1], [1,1,1], [1,2,3]])\ndim = np.linalg.matrix_rank(A)\nprint('Dimension of subspace:', dim)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T(x,y) = (x+y, 2x-3y) in the standard basis.",
    "output": "import numpy as np\n\nA = np.array([[1,1], [2,-3]])\nprint('Matrix representation:', A)"
  },
  {
    "input": "Find the inverse of A = [[2,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,3]])\nA_inv = np.linalg.inv(A)\nprint('Inverse:', A_inv)"
  },
  {
    "input": "Find the rank and nullity of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find the kernel of the matrix A = [[2,1], [4,2]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,1], [4,2]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Compute the spectral radius of A = [[3,2], [1,4]].",
    "output": "import numpy as np\n\nA = np.array([[3,2], [1,4]])\neigenvalues = np.linalg.eigvals(A)\nspectral_radius = max(abs(eigenvalues))\nprint('Spectral radius:', spectral_radius)"
  },
  {
    "input": "Find the determinant of the transition matrix from basis B = {(1,2), (2,3)} to standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,2], [2,3]])\ndet = np.linalg.det(B)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the trace of A = [[5,2], [2,4]].",
    "output": "import numpy as np\n\nA = np.array([[5,2], [2,4]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Determine if the set {(1,0,0), (0,1,0), (0,0,1), (1,1,1)} is linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [0,0,1], [1,1,1]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < A.shape[0]\nprint('Linearly dependent?', dependent)"
  },
  {
    "input": "Determine if the vector v = (1,2,3,4) can be expressed as a linear combination of the vectors {(1,0,2,1), (0,1,1,3), (1,1,3,4)}.",
    "output": "import numpy as np\n\nA = np.array([[1,0,2,1], [0,1,1,3], [1,1,3,4]]).T\nv = np.array([1,2,3,4])\nx, residuals, rank, s = np.linalg.lstsq(A, v, rcond=None)\nprint('Linear combination possible?', residuals.size == 0 or np.allclose(residuals, 0))"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1,2,3), (4,5,6)} in R\u00b3.",
    "output": "import numpy as np\nimport sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6]]).T\northogonal_complement = A.nullspace()\nprint('Orthogonal complement:', orthogonal_complement)"
  },
  {
    "input": "Find a basis for the column space of A = [[1,2,3], [2,4,6], [3,6,9]].",
    "output": "import numpy as np\nimport sympy as sp\n\nA = sp.Matrix([[1,2,3], [2,4,6], [3,6,9]])\nbasis = A.columnspace()\nprint('Basis for column space:', basis)"
  },
  {
    "input": "Find the matrix representation of the linear transformation T(x,y,z) = (x+y, y+z, x+z) in standard basis.",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,1], [1,0,1]])\nprint('Matrix representation:', A)"
  },
  {
    "input": "Find the nullity of the matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Nullity:', nullity)"
  },
  {
    "input": "Determine if the set of vectors {(1,2,3), (4,5,6), (7,8,10)} is linearly dependent.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,10]])\nrank = np.linalg.matrix_rank(A)\ndependent = rank < A.shape[0]\nprint('Linearly dependent?', dependent)"
  },
  {
    "input": "Find the transition matrix from basis B = {(1,2), (3,4)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,2], [3,4]])\nP = np.linalg.inv(B)\nprint('Transition matrix:', P)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[0,1], [-1,0]].",
    "output": "import numpy as np\n\nA = np.array([[0,1], [-1,0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, '\\nEigenvectors:', eigenvectors)"
  },
  {
    "input": "Verify if the transformation T(x,y) = (x+2y, 2x+4y) is a projection.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [2,4]])\nP = np.matmul(A, A)\nprint('Projection?', np.allclose(P, A))"
  },
  {
    "input": "Find the spectral norm of A = [[3,4], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[3,4], [1,2]])\nspectral_norm = np.linalg.norm(A, 2)\nprint('Spectral norm:', spectral_norm)"
  },
  {
    "input": "Find a basis for the null space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nnull_space = A.nullspace()\nprint('Basis for null space:', null_space)"
  },
  {
    "input": "Find the determinant of the Gram matrix of {(1,0), (1,1)}.",
    "output": "import numpy as np\n\nV = np.array([[1,0], [1,1]])\nG = np.matmul(V, V.T)\ndet = np.linalg.det(G)\nprint('Determinant of Gram matrix:', det)"
  },
  {
    "input": "Find the Frobenius norm of A = [[1,2,3], [4,5,6]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6]])\nnorm = np.linalg.norm(A, 'fro')\nprint('Frobenius norm:', norm)"
  },
  {
    "input": "Compute the singular values of A = [[2,3], [5,7]].",
    "output": "import numpy as np\n\nA = np.array([[2,3], [5,7]])\nsingular_values = np.linalg.svd(A, compute_uv=False)\nprint('Singular values:', singular_values)"
  },
  {
    "input": "Find the eigenvalues of the identity matrix I of size 3x3.",
    "output": "import numpy as np\n\nI = np.eye(3)\neigenvalues = np.linalg.eigvals(I)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the determinant of the transformation matrix T that reflects across the line y = x.",
    "output": "import numpy as np\n\nT = np.array([[0,1], [1,0]])\ndet = np.linalg.det(T)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the determinant of the skew-symmetric matrix A = [[0,2,-3], [-2,0,4], [3,-4,0]].",
    "output": "import numpy as np\n\nA = np.array([[0,2,-3], [-2,0,4], [3,-4,0]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the least-squares solution to Ax = b where A = [[1,2], [3,4]] and b = [1,2].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nb = np.array([1,2])\nx, residuals, rank, s = np.linalg.lstsq(A, b, rcond=None)\nprint('Least-squares solution:', x)"
  },
  {
    "input": "Find the determinant of the Cayley-Hamilton theorem matrix A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\nchar_poly = np.poly(A)\ndet = np.linalg.det(A)\nprint('Determinant:', det, 'Characteristic polynomial:', char_poly)"
  },
  {
    "input": "Find the projection of v = (3, 4, 5) onto the subspace spanned by w = (1, 1, 1).",
    "output": "import numpy as np\n\nv = np.array([3, 4, 5])\nw = np.array([1, 1, 1])\nproj = (np.dot(v, w) / np.dot(w, w)) * w\nprint('Projection:', proj)"
  },
  {
    "input": "Find the rank and nullity of the matrix A = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]])\nrank = np.linalg.matrix_rank(A)\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Determine if the vectors {(1,2,3), (2,4,6), (3,6,9)} span R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [2,4,6], [3,6,9]])\nrank = np.linalg.matrix_rank(A)\nspans_R3 = rank == 3\nprint('Spans R\u00b3?', spans_R3)"
  },
  {
    "input": "Find the Gram-Schmidt orthonormal basis for the set {(1,1,0), (1,0,1)}.",
    "output": "import numpy as np\nfrom scipy.linalg import orth\n\nA = np.array([[1,1,0], [1,0,1]]).T\nQ = orth(A)\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Find the determinant of the matrix representation of the transformation T(x,y) = (x+y, x-y).",
    "output": "import numpy as np\n\nA = np.array([[1,1], [1,-1]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the eigenvalues of the symmetric matrix A = [[2, -1], [-1, 2]].",
    "output": "import numpy as np\n\nA = np.array([[2, -1], [-1, 2]])\neigenvalues = np.linalg.eigvals(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the kernel of the linear transformation T(x,y,z) = (x+y, y+z).",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,1,0], [0,1,1]])\nkernel = A.nullspace()\nprint('Kernel:', kernel)"
  },
  {
    "input": "Determine if the set of polynomials {1, x, x\u00b2, x\u00b3} forms a basis for P\u00b3.",
    "output": "import numpy as np\n\nA = np.eye(4)\nrank = np.linalg.matrix_rank(A)\nforms_basis = rank == 4\nprint('Forms basis for P\u00b3?', forms_basis)"
  },
  {
    "input": "Find the determinant of the matrix A = [[4, 3], [3, 4]] using the eigenvalues.",
    "output": "import numpy as np\n\nA = np.array([[4,3], [3,4]])\neigenvalues = np.linalg.eigvals(A)\ndet = np.prod(eigenvalues)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the trace of the matrix A = [[5, -2, 3], [0, 4, -1], [-2, 1, 6]].",
    "output": "import numpy as np\n\nA = np.array([[5, -2, 3], [0, 4, -1], [-2, 1, 6]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Verify if the transformation T(x,y) = (2x, 3y) preserves the dot product.",
    "output": "import numpy as np\n\nA = np.array([[2,0], [0,3]])\nATA = np.matmul(A.T, A)\npreserves = np.allclose(ATA, np.eye(2))\nprint('Preserves dot product?', preserves)"
  },
  {
    "input": "Find the determinant of the outer product of u = (1,2) and v = (3,4).",
    "output": "import numpy as np\n\nu = np.array([1,2])\nv = np.array([3,4])\nouter = np.outer(u, v)\ndet = np.linalg.det(outer)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the characteristic polynomial of A = [[2, -1], [-1, 2]].",
    "output": "import numpy as np\nimport sympy as sp\n\nA = sp.Matrix([[2, -1], [-1, 2]])\nchar_poly = A.charpoly().as_expr()\nprint('Characteristic polynomial:', char_poly)"
  },
  {
    "input": "Compute the induced 2-norm of A = [[1, 2], [3, 4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nnorm = np.linalg.norm(A, 2)\nprint('Induced 2-norm:', norm)"
  },
  {
    "input": "Find a basis for the row space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nrow_space = A.rowspace()\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find the determinant of the matrix representing the reflection across y = -x.",
    "output": "import numpy as np\n\nA = np.array([[0,-1], [-1,0]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the determinant of the covariance matrix of the vectors u = (1,2), v = (2,3).",
    "output": "import numpy as np\n\nX = np.array([[1,2], [2,3]])\ncov_matrix = np.cov(X, rowvar=False)\ndet = np.linalg.det(cov_matrix)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the transition matrix from basis B = {(1,1), (1,-1)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,1], [1,-1]])\nP = np.linalg.inv(B)\nprint('Transition matrix:', P)"
  },
  {
    "input": "Find the determinant of the Hessian matrix of f(x,y) = x\u00b2 + 3xy + y\u00b2 at (1,1).",
    "output": "import sympy as sp\n\nx, y = sp.symbols('x y')\nf = x**2 + 3*x*y + y**2\nH = sp.hessian(f, (x, y))\ndet = H.det()\nprint('Determinant of Hessian:', det)"
  },
  {
    "input": "Find the determinant of the identity matrix of size 4.",
    "output": "import numpy as np\n\nI = np.eye(4)\ndet = np.linalg.det(I)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the basis for the null space of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nnull_space = A.nullspace()\nprint('Basis for null space:', null_space)"
  },
  {
    "input": "Determine if the set of vectors {(1, 2, 3), (2, 4, 6), (4, 5, 6)} is linearly independent.",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [2, 4, 6], [4, 5, 6]])\nrank = np.linalg.matrix_rank(A)\nindependent = rank == A.shape[0]\nprint('Linearly independent?', independent)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[3, -2], [4, -1]].",
    "output": "import numpy as np\n\nA = np.array([[3, -2], [4, -1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, 'Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the vector v = (1, -2, 3) belongs to the span of {(1,0,1), (0,1,1)}.",
    "output": "import numpy as np\nfrom scipy.linalg import lstsq\n\nA = np.array([[1, 0], [0, 1], [1, 1]])\nv = np.array([1, -2, 3])\ncoeffs, _, _, _ = lstsq(A, v)\nin_span = np.allclose(A @ coeffs, v)\nprint('In span?', in_span)"
  },
  {
    "input": "Compute the dot product of vectors u = (2,3,4) and v = (-1,0,5).",
    "output": "import numpy as np\n\nu = np.array([2,3,4])\nv = np.array([-1,0,5])\ndot_product = np.dot(u, v)\nprint('Dot product:', dot_product)"
  },
  {
    "input": "Compute the cross product of vectors u = (1,2,3) and v = (4,5,6).",
    "output": "import numpy as np\n\nu = np.array([1,2,3])\nv = np.array([4,5,6])\ncross_product = np.cross(u, v)\nprint('Cross product:', cross_product)"
  },
  {
    "input": "Find the determinant of the symmetric matrix A = [[1, 2, 3], [2, 5, 4], [3, 4, 6]].",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3], [2, 5, 4], [3, 4, 6]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find a basis for the column space of the matrix A = [[1, 2], [2, 4], [3, 6]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2], [2, 4], [3, 6]])\ncolumn_space = A.columnspace()\nprint('Basis for column space:', column_space)"
  },
  {
    "input": "Determine if the vectors {(1, 2), (3, 4), (5, 6)} form an orthogonal set.",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4], [5,6]])\nG = np.dot(A, A.T)\northogonal = np.allclose(G - np.diag(np.diag(G)), 0)\nprint('Orthogonal set?', orthogonal)"
  },
  {
    "input": "Find the unit vector in the direction of v = (3, 4).",
    "output": "import numpy as np\n\nv = np.array([3,4])\nunit_vector = v / np.linalg.norm(v)\nprint('Unit vector:', unit_vector)"
  },
  {
    "input": "Determine if the transformation T(x,y) = (x+y, x-y) is invertible.",
    "output": "import numpy as np\n\nA = np.array([[1,1], [1,-1]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('Invertible?', invertible)"
  },
  {
    "input": "Find the rank of the transformation T(x,y,z) = (x+y, y+z, z+x).",
    "output": "import numpy as np\n\nA = np.array([[1,1,0], [0,1,1], [1,0,1]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the orthogonal projection of u = (1,2,3) onto v = (4,5,6).",
    "output": "import numpy as np\n\nu = np.array([1,2,3])\nv = np.array([4,5,6])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint('Projection:', proj)"
  },
  {
    "input": "Find the determinant of the rotation matrix by 45 degrees counterclockwise.",
    "output": "import numpy as np\n\nangle = np.pi / 4\nA = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Determine if the function f(x) = x\u00b2 + x is a linear transformation.",
    "output": "linear = False\nprint('Is f(x) = x\u00b2 + x a linear transformation?', linear)"
  },
  {
    "input": "Find the rank of the Gram matrix of vectors u = (1,2,3) and v = (4,5,6).",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6]])\nG = np.dot(A, A.T)\nrank = np.linalg.matrix_rank(G)\nprint('Rank:', rank)"
  },
  {
    "input": "Compute the eigenvectors of A = [[1, 2], [2, 1]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [2,1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the determinant of the projection matrix onto (1,2).",
    "output": "import numpy as np\n\nv = np.array([[1], [2]])\nP = v @ v.T / np.dot(v.T, v)\ndet = np.linalg.det(P)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the transition matrix from basis B = {(1,2), (2,3)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[1,2], [2,3]])\nP = np.linalg.inv(B)\nprint('Transition matrix:', P)"
  },
  {
    "input": "Find the smallest positive integer k such that the set {(1, 2, 3), (4, 5, 6), (7, 8, k)} is linearly dependent.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [4, 5, 6], [7, 8, sp.Symbol('k')]])\ndet_A = A.det()\nk_value = sp.solve(det_A, sp.Symbol('k'))[0]\nprint('Smallest k:', k_value)"
  },
  {
    "input": "Determine if the vectors {(2, -3, 1), (4, -6, 2), (6, -9, 3)} span R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[2, -3, 1], [4, -6, 2], [6, -9, 3]])\nrank = np.linalg.matrix_rank(A)\nspans_R3 = rank == 3\nprint('Do they span R\u00b3?', spans_R3)"
  },
  {
    "input": "Find a nontrivial solution to Ax = 0 where A = [[1, 2, 3], [2, 4, 6], [3, 6, 9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [2, 4, 6], [3, 6, 9]])\nnull_space = A.nullspace()\nprint('Nontrivial solution:', null_space)"
  },
  {
    "input": "Find the dimension of the subspace spanned by {(1, 2, 3, 4), (2, 4, 6, 8), (0, 1, 0, 1), (1, 3, 3, 7)}.",
    "output": "import numpy as np\n\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [0, 1, 0, 1], [1, 3, 3, 7]])\nrank = np.linalg.matrix_rank(A)\nprint('Dimension of subspace:', rank)"
  },
  {
    "input": "Determine if the transformation T(x,y,z) = (2x + y, y - z, x + 2z) is one-to-one.",
    "output": "import numpy as np\n\nA = np.array([[2, 1, 0], [0, 1, -1], [1, 0, 2]])\ndet = np.linalg.det(A)\ninvertible = det != 0\nprint('One-to-one?', invertible)"
  },
  {
    "input": "Find a basis for the row space of A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find the eigenvalues of A = [[0, 1], [-1, 0]].",
    "output": "import numpy as np\n\nA = np.array([[0, 1], [-1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the rank of the projection matrix P = v*v^T where v = (1,2,3).",
    "output": "import numpy as np\n\nv = np.array([[1], [2], [3]])\nP = v @ v.T / np.dot(v.T, v)\nrank = np.linalg.matrix_rank(P)\nprint('Rank of P:', rank)"
  },
  {
    "input": "Find an orthonormal basis for the space spanned by {(1, 1, 0), (1, 0, 1)}.",
    "output": "import numpy as np\nfrom scipy.linalg import orth\n\nA = np.array([[1,1,0], [1,0,1]]).T\northonormal_basis = orth(A)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Check if the vectors (1,2,3), (4,5,6), and (7,8,10) form a basis for R\u00b3.",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,10]])\nbasis = np.linalg.matrix_rank(A) == 3\nprint('Form a basis?', basis)"
  },
  {
    "input": "Find the eigenvectors of A = [[3, 1], [0, 2]].",
    "output": "import numpy as np\n\nA = np.array([[3, 1], [0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the Gram matrix of vectors (1,2) and (3,4).",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nG = A.T @ A\nprint('Gram matrix:', G)"
  },
  {
    "input": "Find the determinant of the matrix A = [[cos\u03b8, -sin\u03b8], [sin\u03b8, cos\u03b8]].",
    "output": "import sympy as sp\n\ntheta = sp.Symbol('theta')\nA = sp.Matrix([[sp.cos(theta), -sp.sin(theta)], [sp.sin(theta), sp.cos(theta)]])\ndet_A = A.det()\nprint('Determinant:', det_A)"
  },
  {
    "input": "Determine if the function T(x,y) = (x+y, x*y) is a linear transformation.",
    "output": "linear = False\nprint('Linear transformation?', linear)"
  },
  {
    "input": "Find a basis for the kernel of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nkernel = A.nullspace()\nprint('Basis for kernel:', kernel)"
  },
  {
    "input": "Find the rank of the Gram-Schmidt process applied to {(1,1,1), (1,2,3), (2,4,6)}.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\n\nA = np.array([[1,1,1], [1,2,3], [2,4,6]])\nQ, R = qr(A, mode='economic')\nrank = np.linalg.matrix_rank(Q)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the determinant of the reflection matrix R = [[0, 1], [1, 0]].",
    "output": "import numpy as np\n\nR = np.array([[0, 1], [1, 0]])\ndet = np.linalg.det(R)\nprint('Determinant:', det)"
  },
  {
    "input": "Check if {(1,0,0), (0,1,0), (0,0,1)} forms an orthonormal basis.",
    "output": "import numpy as np\n\nA = np.array([[1,0,0], [0,1,0], [0,0,1]])\northonormal = np.allclose(A.T @ A, np.eye(3))\nprint('Orthonormal basis?', orthonormal)"
  },
  {
    "input": "Find the transition matrix from basis B = {(2,3), (4,5)} to the standard basis.",
    "output": "import numpy as np\n\nB = np.array([[2,3], [4,5]])\nP = np.linalg.inv(B)\nprint('Transition matrix:', P)"
  },
  {
    "input": "Find the determinant of the linear transformation T: R\u00b2 \u2192 R\u00b2 defined by T(x,y) = (3x + 4y, 2x + 5y).",
    "output": "import numpy as np\n\nA = np.array([[3,4], [2,5]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6], [7,8,10]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, 'Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the Gram matrix for the vectors u = (1,2,3) and v = (4,5,6).",
    "output": "import numpy as np\n\nV = np.array([[1,2,3], [4,5,6]])\nG = np.dot(V, V.T)\nprint('Gram matrix:', G)"
  },
  {
    "input": "Determine if the set of polynomials {1 + x, 1 - x, x\u00b2 - 1} is linearly dependent in P\u2082.",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\npolynomials = [1 + x, 1 - x, x**2 - 1]\nmatrix = sp.Matrix([[sp.expand(p).coeff(x, i) for i in range(3)] for p in polynomials])\nrank = matrix.rank()\ndependent = rank < 3\nprint('Linearly dependent?', dependent)"
  },
  {
    "input": "Find the spectral radius of A = [[3, -1], [2, 4]].",
    "output": "import numpy as np\n\nA = np.array([[3,-1], [2,4]])\neigenvalues = np.linalg.eigvals(A)\nspectral_radius = max(abs(eigenvalues))\nprint('Spectral radius:', spectral_radius)"
  },
  {
    "input": "Find an orthonormal basis using Gram-Schmidt for the set {(2,3,1), (1,0,4)}.",
    "output": "import numpy as np\nfrom scipy.linalg import orth\n\nA = np.array([[2,3,1], [1,0,4]]).T\northonormal_basis = orth(A)\nprint('Orthonormal basis:', orthonormal_basis)"
  },
  {
    "input": "Find the Frobenius norm of the matrix A = [[1,2,3], [4,5,6]].",
    "output": "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6]])\nnorm = np.linalg.norm(A, 'fro')\nprint('Frobenius norm:', norm)"
  },
  {
    "input": "Find the determinant of the Hessian matrix of f(x,y) = x\u00b2 + xy + y\u00b2 at (1,1).",
    "output": "import sympy as sp\n\nx, y = sp.symbols('x y')\nf = x**2 + x*y + y**2\nH = sp.hessian(f, (x, y))\ndet = H.det()\nprint('Determinant of Hessian:', det)"
  },
  {
    "input": "Determine if the function T(x,y) = (x\u00b2, y\u00b2) is a linear transformation.",
    "output": "linear = False\nprint('Linear transformation?', linear)"
  },
  {
    "input": "Find the least squares solution to Ax=b where A = [[1,2], [3,4]] and b = [1,2].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nb = np.array([1,2])\nx, residuals, rank, s = np.linalg.lstsq(A, b, rcond=None)\nprint('Least squares solution:', x)"
  },
  {
    "input": "Find the determinant of the identity matrix of size 5.",
    "output": "import numpy as np\n\nI = np.eye(5)\ndet = np.linalg.det(I)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the best approximation to b = (3,4) in the span of (1,1).",
    "output": "import numpy as np\n\nb = np.array([3,4])\nv = np.array([1,1])\nprojection = (np.dot(b, v) / np.dot(v, v)) * v\nprint('Best approximation:', projection)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[1, 2], [2, 1]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [2,1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the rank of the outer product of u = (1,2) and v = (3,4).",
    "output": "import numpy as np\n\nu = np.array([1,2])\nv = np.array([3,4])\nouter = np.outer(u, v)\nrank = np.linalg.matrix_rank(outer)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the smallest positive integer k such that the set {(1,2,3), (4,5,6), (7,8,k)} is linearly dependent.",
    "output": "import sympy as sp\n\nk = sp.Symbol('k')\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,k]])\ndet_A = A.det()\nk_value = sp.solve(det_A, k)[0]\nprint('Smallest k:', k_value)"
  },
  {
    "input": "Find a nontrivial solution to Ax=0 where A = [[1,2,3], [2,4,6], [3,6,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [2,4,6], [3,6,9]])\nnull_space = A.nullspace()\nprint('Nontrivial solution:', null_space)"
  },
  {
    "input": "Find the rank and nullity of the projection matrix P = v*v^T where v = (1,2,3).",
    "output": "import numpy as np\n\nv = np.array([[1], [2], [3]])\nP = v @ v.T / np.dot(v.T, v)\nrank = np.linalg.matrix_rank(P)\nnullity = P.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find an eigenvector corresponding to the eigenvalue \u03bb = 3 for the matrix A = [[3,1], [0,3]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[3,1], [0,3]])\nlambda_val = 3\nnull_space = (A - lambda_val * sp.eye(2)).nullspace()\nprint('Eigenvector for \u03bb=3:', null_space)"
  },
  {
    "input": "Find the spectral decomposition of A = [[3,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[3,1], [1,3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nD = np.diag(eigenvalues)\nP = eigenvectors\nprint('Spectral decomposition: P=', P, 'D=', D)"
  },
  {
    "input": "Find the determinant of the Gram matrix of {(1,1,0), (1,0,1)}.",
    "output": "import numpy as np\n\nV = np.array([[1,1,0], [1,0,1]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Compute the induced 2-norm of A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nnorm = np.linalg.norm(A, 2)\nprint('Induced 2-norm:', norm)"
  },
  {
    "input": "Find a basis for the row space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find a basis for the null space of A = [[2,3,4], [4,6,8], [6,9,12]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,3,4], [4,6,8], [6,9,12]])\nnull_space = A.nullspace()\nprint('Basis for null space:', null_space)"
  },
  {
    "input": "Find the rank and nullity of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nrank = A.rank()\nnullity = A.shape[1] - rank\nprint('Rank:', rank, 'Nullity:', nullity)"
  },
  {
    "input": "Find a basis for the column space of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\ncol_space = A.columnspace()\nprint('Basis for column space:', col_space)"
  },
  {
    "input": "Compute the determinant of the Gram matrix for vectors v1=(1,2,3), v2=(4,5,6).",
    "output": "import numpy as np\n\nV = np.array([[1,2,3], [4,5,6]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Find the determinant of the Householder reflection matrix that reflects across (1,2,3).",
    "output": "import numpy as np\n\nv = np.array([1,2,3])\nv = v / np.linalg.norm(v)\nH = np.eye(3) - 2 * np.outer(v, v)\ndet = np.linalg.det(H)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the determinant of the skew-symmetric matrix A = [[0,-2,1], [2,0,-3], [-1,3,0]].",
    "output": "import numpy as np\n\nA = np.array([[0,-2,1], [2,0,-3], [-1,3,0]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the rank of the transformation matrix that rotates by 90 degrees in 3D space.",
    "output": "import numpy as np\n\nangle = np.pi / 2\nR = np.array([[np.cos(angle), -np.sin(angle), 0], [np.sin(angle), np.cos(angle), 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(R)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the eigenvalues of the Laplacian matrix L = [[2,-1,0], [-1,2,-1], [0,-1,2]].",
    "output": "import numpy as np\n\nL = np.array([[2,-1,0], [-1,2,-1], [0,-1,2]])\neigenvalues = np.linalg.eigvals(L)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the Frobenius norm of A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nnorm = np.linalg.norm(A, 'fro')\nprint('Frobenius norm:', norm)"
  },
  {
    "input": "Find the determinant of the covariance matrix of vectors (1,2,3) and (4,5,6).",
    "output": "import numpy as np\n\nX = np.array([[1,2,3], [4,5,6]])\ncov_matrix = np.cov(X, rowvar=False)\ndet = np.linalg.det(cov_matrix)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the determinant of the symmetric positive definite matrix A = [[4,1], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[4,1], [1,3]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find a basis for the eigenspace corresponding to eigenvalue 2 for A = [[2,0,0], [0,2,0], [0,0,3]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,0,0], [0,2,0], [0,0,3]])\nlambda_val = 2\neigenspace = (A - lambda_val * sp.eye(3)).nullspace()\nprint('Basis for eigenspace:', eigenspace)"
  },
  {
    "input": "Find the determinant of the orthogonal projection matrix onto (1,1,1).",
    "output": "import numpy as np\n\nv = np.array([[1], [1], [1]])\nP = v @ v.T / np.dot(v.T, v)\ndet = np.linalg.det(P)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the singular values of A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nU, S, Vt = np.linalg.svd(A)\nprint('Singular values:', S)"
  },
  {
    "input": "Find the determinant of the exponential of A = [[0,-1], [1,0]].",
    "output": "import numpy as np\nfrom scipy.linalg import expm\n\nA = np.array([[0,-1], [1,0]])\nexp_A = expm(A)\ndet = np.linalg.det(exp_A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find a basis for the space of symmetric 2x2 matrices.",
    "output": "import sympy as sp\n\nS1 = sp.Matrix([[1,0], [0,0]])\nS2 = sp.Matrix([[0,1], [1,0]])\nS3 = sp.Matrix([[0,0], [0,1]])\nbasis = [S1, S2, S3]\nprint('Basis for symmetric 2x2 matrices:', basis)"
  },
  {
    "input": "Compute the trace norm of A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\ntrace_norm = np.sum(np.linalg.svd(A, compute_uv=False))\nprint('Trace norm:', trace_norm)"
  },
  {
    "input": "Find the determinant of the Gram matrix for vectors v1=(1,0,1), v2=(0,1,1).",
    "output": "import numpy as np\n\nV = np.array([[1,0,1], [0,1,1]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Find the determinant of the Cayley-Hamilton theorem matrix A = [[1,2], [3,4]].",
    "output": "import numpy as np\n\nA = np.array([[1,2], [3,4]])\nchar_poly = np.poly(A)\ndet = np.linalg.det(A)\nprint('Determinant:', det, 'Characteristic polynomial:', char_poly)"
  },
  {
    "input": "Find a basis for the row space of A = [[1,2,3], [2,4,6], [3,6,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [2,4,6], [3,6,9]])\nrow_space = A.rref()[0]\nprint('Basis for row space:', row_space)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the symmetric matrix A = [[2,1], [1,2]].",
    "output": "import numpy as np\n\nA = np.array([[2,1], [1,2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues, 'Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine if the set of vectors v1=(1,2,3), v2=(2,4,6), v3=(3,6,9) is linearly dependent.",
    "output": "import sympy as sp\n\nV = sp.Matrix([[1,2,3], [2,4,6], [3,6,9]])\ndependency = V.rank() < V.shape[1]\nprint('Linearly dependent:', dependency)"
  },
  {
    "input": "Compute the determinant of the orthogonal matrix Q = [[0,-1], [1,0]].",
    "output": "import numpy as np\n\nQ = np.array([[0,-1], [1,0]])\ndet = np.linalg.det(Q)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the projection of v=(3,4,5) onto u=(1,2,3).",
    "output": "import numpy as np\n\nv = np.array([3,4,5])\nu = np.array([1,2,3])\nproj = (np.dot(v,u) / np.dot(u,u)) * u\nprint('Projection:', proj)"
  },
  {
    "input": "Find the determinant of the Gram matrix for vectors v1=(1,0,1), v2=(0,1,1), v3=(1,1,0).",
    "output": "import numpy as np\n\nV = np.array([[1,0,1], [0,1,1], [1,1,0]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Find the kernel (null space) of the transformation matrix A = [[1,2,3], [2,4,6], [3,6,9]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[1,2,3], [2,4,6], [3,6,9]])\nnull_space = A.nullspace()\nprint('Kernel:', null_space)"
  },
  {
    "input": "Compute the determinant of the covariance matrix of vectors (2,3,4) and (5,6,7).",
    "output": "import numpy as np\n\nX = np.array([[2,3,4], [5,6,7]])\ncov_matrix = np.cov(X, rowvar=False)\ndet = np.linalg.det(cov_matrix)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the rank of the Gram matrix for v1=(1,2,3), v2=(2,4,6), v3=(3,6,9).",
    "output": "import numpy as np\n\nV = np.array([[1,2,3], [2,4,6], [3,6,9]])\nG = V @ V.T\nrank = np.linalg.matrix_rank(G)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the determinant of the Hessian matrix for f(x,y) = x^2 + y^2 + xy.",
    "output": "import sympy as sp\n\nx, y = sp.symbols('x y')\nf = x**2 + y**2 + x*y\nH = sp.hessian(f, (x, y))\ndet = H.det()\nprint('Hessian determinant:', det)"
  },
  {
    "input": "Find the Jordan form of A = [[5,4], [1,2]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[5,4], [1,2]])\nJ, P = A.jordan_form()\nprint('Jordan Form:', J)"
  },
  {
    "input": "Find a basis for the space of skew-symmetric 3x3 matrices.",
    "output": "import sympy as sp\n\nS1 = sp.Matrix([[0,1,0], [-1,0,0], [0,0,0]])\nS2 = sp.Matrix([[0,0,1], [0,0,0], [-1,0,0]])\nS3 = sp.Matrix([[0,0,0], [0,0,1], [0,-1,0]])\nbasis = [S1, S2, S3]\nprint('Basis for skew-symmetric matrices:', basis)"
  },
  {
    "input": "Compute the trace norm of A = [[4,2], [1,3]].",
    "output": "import numpy as np\n\nA = np.array([[4,2], [1,3]])\ntrace_norm = np.sum(np.linalg.svd(A, compute_uv=False))\nprint('Trace norm:', trace_norm)"
  },
  {
    "input": "Find a basis for the eigenspace of A = [[3,0], [0,3]] corresponding to eigenvalue 3.",
    "output": "import sympy as sp\n\nA = sp.Matrix([[3,0], [0,3]])\neigenspace = (A - 3*sp.eye(2)).nullspace()\nprint('Basis for eigenspace:', eigenspace)"
  },
  {
    "input": "Find the determinant of the Laplacian matrix L = [[3,-1,-1], [-1,2,-1], [-1,-1,2]].",
    "output": "import numpy as np\n\nL = np.array([[3,-1,-1], [-1,2,-1], [-1,-1,2]])\ndet = np.linalg.det(L)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the determinant of the matrix exponential of A = [[0,1], [-1,0]].",
    "output": "import numpy as np\nfrom scipy.linalg import expm\n\nA = np.array([[0,1], [-1,0]])\nexp_A = expm(A)\ndet = np.linalg.det(exp_A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the determinant of the transformation matrix that reflects across (2,3,4).",
    "output": "import numpy as np\n\nv = np.array([2,3,4])\nv = v / np.linalg.norm(v)\nH = np.eye(3) - 2 * np.outer(v, v)\ndet = np.linalg.det(H)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the characteristic polynomial of A = [[2,3], [1,4]].",
    "output": "import sympy as sp\n\nA = sp.Matrix([[2,3], [1,4]])\nchar_poly = A.charpoly().as_expr()\nprint('Characteristic Polynomial:', char_poly)"
  },
  {
    "input": "Find the determinant of the covariance matrix for v1=(1,2,3), v2=(4,5,6).",
    "output": "import numpy as np\n\nX = np.array([[1,2,3], [4,5,6]])\ncov_matrix = np.cov(X, rowvar=False)\ndet = np.linalg.det(cov_matrix)\nprint('Determinant:', det)"
  },
  {
    "input": "Determine if the set {(1,0,1), (0,1,1), (1,1,2)} spans R\u00b3.",
    "output": "import sympy as sp\nV = sp.Matrix([[1,0,1], [0,1,1], [1,1,2]])\nspans = V.rank() == V.shape[1]\nprint('Spans R\u00b3:', spans)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by {(1,2,3), (4,5,6)} in R\u00b3.",
    "output": "import sympy as sp\nV = sp.Matrix([[1,2,3], [4,5,6]])\northogonal_complement = V.nullspace()\nprint('Orthogonal Complement:', orthogonal_complement)"
  },
  {
    "input": "Compute the determinant of the Gram matrix for v1=(1,0,2), v2=(2,1,1), v3=(3,2,0).",
    "output": "import numpy as np\nV = np.array([[1,0,2], [2,1,1], [3,2,0]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram matrix determinant:', det)"
  },
  {
    "input": "Find a basis for the null space of A = [[2,4,6], [1,2,3], [3,6,9]].",
    "output": "import sympy as sp\nA = sp.Matrix([[2,4,6], [1,2,3], [3,6,9]])\nnull_space = A.nullspace()\nprint('Null space basis:', null_space)"
  },
  {
    "input": "Determine whether the vectors (1,1,0), (0,1,1), and (1,0,1) form an orthonormal basis.",
    "output": "import numpy as np\nV = np.array([[1,1,0], [0,1,1], [1,0,1]])\northonormal = np.allclose(V @ V.T, np.eye(3))\nprint('Orthonormal:', orthonormal)"
  },
  {
    "input": "Find the rank of the Gram matrix for vectors v1=(1,2,3), v2=(3,2,1), v3=(2,1,3).",
    "output": "import numpy as np\nV = np.array([[1,2,3], [3,2,1], [2,1,3]])\nG = V @ V.T\nrank = np.linalg.matrix_rank(G)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the transformation matrix that rotates a vector by 45\u00b0 in 2D space.",
    "output": "import numpy as np\nfrom math import radians, cos, sin\n\ntheta = radians(45)\nR = np.array([[cos(theta), -sin(theta)], [sin(theta), cos(theta)]])\nprint('Rotation matrix:', R)"
  },
  {
    "input": "Compute the determinant of the Hessian matrix of f(x,y) = x^3 + 3xy + y^3.",
    "output": "import sympy as sp\nx, y = sp.symbols('x y')\nf = x**3 + 3*x*y + y**3\nH = sp.hessian(f, (x, y))\ndet = H.det()\nprint('Hessian determinant:', det)"
  },
  {
    "input": "Find the Jordan normal form of A = [[4,1], [0,4]].",
    "output": "import sympy as sp\nA = sp.Matrix([[4,1], [0,4]])\nJ, P = A.jordan_form()\nprint('Jordan Form:', J)"
  },
  {
    "input": "Find the kernel (null space) of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nnull_space = A.nullspace()\nprint('Kernel:', null_space)"
  },
  {
    "input": "Find the eigenvalues of the transformation matrix T = [[2,0,1], [1,3,2], [0,1,4]].",
    "output": "import numpy as np\nT = np.array([[2,0,1], [1,3,2], [0,1,4]])\neigenvalues = np.linalg.eigvals(T)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find a basis for the subspace of R\u00b3 consisting of all solutions to x + 2y + 3z = 0.",
    "output": "import sympy as sp\nx, y, z = sp.symbols('x y z')\neq = sp.Eq(x + 2*y + 3*z, 0)\nbasis = sp.solve(eq, (x, y, z), dict=True)\nprint('Basis:', basis)"
  },
  {
    "input": "Find the determinant of the orthogonal projection matrix onto span{(1,1,0), (0,1,1)}.",
    "output": "import numpy as np\nV = np.array([[1,1,0], [0,1,1]])\nP = V.T @ np.linalg.inv(V @ V.T) @ V\ndet = np.linalg.det(P)\nprint('Determinant:', det)"
  },
  {
    "input": "Determine if the set {(1,0,0), (0,1,0), (1,1,1)} is a basis for R\u00b3.",
    "output": "import numpy as np\nV = np.array([[1,0,0], [0,1,0], [1,1,1]])\nis_basis = np.linalg.matrix_rank(V) == 3\nprint('Is a basis:', is_basis)"
  },
  {
    "input": "Find the minimal polynomial of A = [[2,3], [0,2]].",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\nA = sp.Matrix([[2, 3], [0, 2]])\nI = sp.eye(2)\n\n# Compute (A - 2I)^2\nB = A - 2 * I\nB2 = B * B\n\nif B2 == sp.zeros(2):\n    min_poly = (x - 2)**2\nelse:\n    min_poly = (x - 2)**3  # unlikely for 2x2 matrix\n\nprint(\"Minimal Polynomial:\", min_poly)"
  },
  {
    "input": "Compute the determinant of the Cayley-Hamilton theorem applied to A = [[3,1], [0,2]].",
    "output": "import sympy as sp\nA = sp.Matrix([[3,1], [0,2]])\nchar_poly = A.charpoly().as_expr()\nprint('Determinant of Cayley-Hamilton result:', char_poly)"
  },
  {
    "input": "Find the trace norm of A = [[1,4], [2,3]].",
    "output": "import numpy as np\nA = np.array([[1,4], [2,3]])\ntrace_norm = np.sum(np.linalg.svd(A, compute_uv=False))\nprint('Trace norm:', trace_norm)"
  },
  {
    "input": "Find a basis for the set of all symmetric 3x3 matrices.",
    "output": "import sympy as sp\nS1 = sp.Matrix([[1,0,0], [0,0,0], [0,0,0]])\nS2 = sp.Matrix([[0,1,0], [1,0,0], [0,0,0]])\nS3 = sp.Matrix([[0,0,1], [0,0,0], [1,0,0]])\nbasis = [S1, S2, S3]\nprint('Basis for symmetric matrices:', basis)"
  },
  {
    "input": "Add the matrices A = [[1,2], [3,4]] and B = [[5,6], [7,8]].",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4]])\nB = np.array([[5,6], [7,8]])\nresult = A + B\nprint(result)"
  },
  {
    "input": "Multiply A = [[1,2,3], [4,5,6]] and B = [[7,8], [9,10], [11,12]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [4,5,6]])\nB = np.array([[7,8], [9,10], [11,12]])\nresult = np.dot(A, B)\nprint(result)"
  },
  {
    "input": "Find the transpose of matrix A = [[3,4,5], [6,7,8]].",
    "output": "import numpy as np\nA = np.array([[3,4,5], [6,7,8]])\nresult = A.T\nprint(result)"
  },
  {
    "input": "Find the inverse of A = [[2,3], [5,7]].",
    "output": "import numpy as np\nA = np.array([[2,3], [5,7]])\nresult = np.linalg.inv(A)\nprint(result)"
  },
  {
    "input": "Compute (A+B)^T for A = [[1,2], [3,4]] and B = [[5,6], [7,8]].",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4]])\nB = np.array([[5,6], [7,8]])\nresult = (A + B).T\nprint(result)"
  },
  {
    "input": "Check if the matrix A = [[2, -1], [-4, 2]] is symmetric.",
    "output": "import numpy as np\nA = np.array([[2, -1], [-4, 2]])\nis_symmetric = np.array_equal(A, A.T)\nprint('Symmetric:', is_symmetric)"
  },
  {
    "input": "Find the determinant of matrix A = [[4,7], [2,6]].",
    "output": "import numpy as np\nA = np.array([[4,7], [2,6]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Find the rank of matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nrank = np.linalg.matrix_rank(A)\nprint('Rank:', rank)"
  },
  {
    "input": "Find the trace of matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\ntrace = np.trace(A)\nprint('Trace:', trace)"
  },
  {
    "input": "Compute A * A^T where A = [[1,2,3], [4,5,6]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [4,5,6]])\nresult = A @ A.T\nprint(result)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[2,0], [0,3]].",
    "output": "import numpy as np\nA = np.array([[2,0], [0,3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Check if A = [[1,2], [3,4]] and B = [[5,6], [7,8]] satisfy (A+B)^-1 = A^-1 + B^-1.",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4]])\nB = np.array([[5,6], [7,8]])\ntry:\n    LHS = np.linalg.inv(A + B)\n    RHS = np.linalg.inv(A) + np.linalg.inv(B)\n    print('Equal:', np.allclose(LHS, RHS))\nexcept:\n    print('One of the matrices is singular.')"
  },
  {
    "input": "Find the inverse of a 3x3 matrix A = [[1,2,3], [0,1,4], [5,6,0]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [0,1,4], [5,6,0]])\ninv_A = np.linalg.inv(A)\nprint(inv_A)"
  },
  {
    "input": "Compute the product of the diagonal elements of A = [[5,2], [3,8]].",
    "output": "import numpy as np\nA = np.array([[5,2], [3,8]])\nproduct_diag = np.prod(np.diag(A))\nprint(product_diag)"
  },
  {
    "input": "Find the matrix representation of the function f(x,y) = (x+y, x-2y) as a linear transformation.",
    "output": "import numpy as np\nA = np.array([[1,1], [1,-2]])\nprint('Matrix Representation:', A)"
  },
  {
    "input": "Find the Moore-Penrose pseudoinverse of A = [[1,2], [3,4], [5,6]].",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4], [5,6]])\npinv_A = np.linalg.pinv(A)\nprint(pinv_A)"
  },
  {
    "input": "Compute the determinant of the Gram matrix for v1=(1,2), v2=(3,4).",
    "output": "import numpy as np\nV = np.array([[1,2], [3,4]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram determinant:', det)"
  },
  {
    "input": "Find the spectral norm of A = [[3,2], [2,3]].",
    "output": "import numpy as np\nA = np.array([[3,2], [2,3]])\nspectral_norm = np.linalg.norm(A, 2)\nprint('Spectral norm:', spectral_norm)"
  },
  {
    "input": "Compute A^4 for A = [[0,1], [-1,0]].",
    "output": "import numpy as np\nA = np.array([[0,1], [-1,0]])\nresult = np.linalg.matrix_power(A, 4)\nprint(result)"
  },
  {
    "input": "Find the determinant of the cofactor matrix of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import sympy as sp\nA = sp.Matrix([[1,2,3], [4,5,6], [7,8,9]])\nC = A.cofactor_matrix()\ndet = C.det()\nprint('Determinant of cofactor matrix:', det)"
  },
  {
    "input": "Prove that for any invertible matrix A, (A^T)^-1 = (A^-1)^T. Let A = [[3,2], [1,4]].",
    "output": "import numpy as np\nA = np.array([[3,2], [1,4]])\nA_inv = np.linalg.inv(A)\nLHS = np.linalg.inv(A.T)\nRHS = (A_inv).T\nprint('Equal:', np.allclose(LHS, RHS))"
  },
  {
    "input": "Find the singular value decomposition (SVD) of A = [[3,1], [1,3]].",
    "output": "import numpy as np\nA = np.array([[3,1], [1,3]])\nU, S, Vt = np.linalg.svd(A)\nprint('U:', U, '\\nSingular values:', S, '\\nVt:', Vt)"
  },
  {
    "input": "Find the determinant of a 4x4 upper triangular matrix A = [[2,3,1,4], [0,5,7,2], [0,0,6,3], [0,0,0,8]].",
    "output": "import numpy as np\nA = np.array([[2,3,1,4], [0,5,7,2], [0,0,6,3], [0,0,0,8]])\ndet = np.linalg.det(A)\nprint('Determinant:', det)"
  },
  {
    "input": "Verify Cayley-Hamilton theorem for A = [[1,2], [3,4]].",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4]])\nchar_poly = np.poly(A)\npoly_matrix = char_poly[0] * np.eye(2) + char_poly[1] * A + char_poly[2] * np.linalg.matrix_power(A,2)\nprint('Zero Matrix:', np.allclose(poly_matrix, np.zeros_like(A)))"
  },
  {
    "input": "Find the minimal polynomial of A = [[2,1], [0,2]].",
    "output": "import sympy as sp\n\nx = sp.symbols('x')\nA = sp.Matrix([[2, 1], [0, 2]])\nI = sp.eye(2)\n\n# Check (A - 2I)^2 = 0\nB = A - 2 * I\nB2 = B * B\n\nif B2 == sp.zeros(2):\n    min_poly = (x - 2)**2\nelse:\n    min_poly = (x - 2)*(x - a)  # Fallback (not needed here)\n\nprint('Minimal Polynomial:', min_poly)"
  },
  {
    "input": "Compute the Jordan form of A = [[6,-2,2], [2,3,4], [-2,2,3]].",
    "output": "import sympy as sp\nA = sp.Matrix([[6,-2,2], [2,3,4], [-2,2,3]])\nJ, P = A.jordan_form()\nprint('Jordan Form:', J)"
  },
  {
    "input": "Find the determinant of the Gram matrix for vectors v1=[1,2,3], v2=[4,5,6], v3=[7,8,9].",
    "output": "import numpy as np\nV = np.array([[1,2,3], [4,5,6], [7,8,9]])\nG = V @ V.T\ndet = np.linalg.det(G)\nprint('Gram Determinant:', det)"
  },
  {
    "input": "Compute the Frobenius norm of A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "import numpy as np\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nfrobenius_norm = np.linalg.norm(A, 'fro')\nprint('Frobenius Norm:', frobenius_norm)"
  },
  {
    "input": "Find the orthogonal projection of vector b = [3,4] onto the column space of A = [[1,0], [1,1]].",
    "output": "import numpy as np\nA = np.array([[1,0], [1,1]])\nb = np.array([3,4])\nprojection = A @ np.linalg.inv(A.T @ A) @ A.T @ b\nprint('Projection:', projection)"
  },
  {
    "input": "Check if the matrix A = [[4,1], [2,3]] is positive definite.",
    "output": "import numpy as np\nA = np.array([[4,1], [2,3]])\neigenvalues = np.linalg.eigvals(A)\nis_positive_definite = np.all(eigenvalues > 0)\nprint('Positive Definite:', is_positive_definite)"
  },
  {
    "input": "Compute the Hessenberg form of matrix A = [[1,2,3], [4,5,6], [7,8,9]].",
    "output": "from scipy.linalg import hessenberg\nimport numpy as np\nA = np.array([[1,2,3], [4,5,6], [7,8,9]])\nH = hessenberg(A)\nprint('Hessenberg Form:', H)"
  },
  {
    "input": "Compute the LU decomposition of A = [[4,3], [6,3]].",
    "output": "import scipy.linalg as la\nimport numpy as np\nA = np.array([[4,3], [6,3]])\nP, L, U = la.lu(A)\nprint('L:', L, '\\nU:', U)"
  },
  {
    "input": "Find the Cholesky decomposition of A = [[4,2], [2,3]].",
    "output": "import numpy as np\nA = np.array([[4,2], [2,3]])\nL = np.linalg.cholesky(A)\nprint('Cholesky Factor L:', L)"
  },
  {
    "input": "Find the QR decomposition of A = [[12,-51,4], [6,167,-68], [-4,24,-41]].",
    "output": "import numpy as np\nA = np.array([[12,-51,4], [6,167,-68], [-4,24,-41]])\nQ, R = np.linalg.qr(A)\nprint('Q:', Q, '\\nR:', R)"
  },
  {
    "input": "Find the spectral radius of A = [[2,3], [4,1]].",
    "output": "import numpy as np\nA = np.array([[2,3], [4,1]])\neigenvalues = np.linalg.eigvals(A)\nspectral_radius = max(abs(eigenvalues))\nprint('Spectral Radius:', spectral_radius)"
  },
  {
    "input": "Compute the condition number of A = [[1,2], [3,4]].",
    "output": "import numpy as np\nA = np.array([[1,2], [3,4]])\ncond_number = np.linalg.cond(A)\nprint('Condition Number:', cond_number)"
  },
  {
    "input": "Find the Perron-Frobenius eigenvalue of A = [[2,1], [1,3]].",
    "output": "import numpy as np\nA = np.array([[2,1], [1,3]])\neigenvalues = np.linalg.eigvals(A)\nperron_value = max(eigenvalues)\nprint('Perron-Frobenius Eigenvalue:', perron_value)"
  },
  {
    "input": "Verify that for an orthogonal matrix Q, Q^T * Q = I. Let Q = [[0,-1], [1,0]].",
    "output": "import numpy as np\nQ = np.array([[0,-1], [1,0]])\nis_orthogonal = np.allclose(Q.T @ Q, np.eye(2))\nprint('Orthogonal:', is_orthogonal)"
  },
  {
    "input": "Find the norm of the inverse of A = [[4,7], [2,6]].",
    "output": "import numpy as np\nA = np.array([[4,7], [2,6]])\nA_inv = np.linalg.inv(A)\nnorm_inv = np.linalg.norm(A_inv)\nprint('Norm of Inverse:', norm_inv)"
  },
  {
    "input": "Compute the inner product of vectors (1, 2, -1) and (2, 1, 4) in R^3, and determine their angle.",
    "output": "import numpy as np\nv1 = np.array([1, 2, -1])\nv2 = np.array([2, 1, 4])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nangle = np.arccos(inner_product / (norm_v1 * norm_v2))\nprint(\"Inner Product:\", inner_product)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find the norm of vector (3, -4) in R^2 using the Euclidean norm.",
    "output": "import numpy as np\nv = np.array([3, -4])\nnorm = np.linalg.norm(v)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Verify if vectors (1, 0, 0) and (0, 1, 0) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Compute the projection of vector (4, 2) onto vector (1, 1) in R^2.",
    "output": "import numpy as np\nv = np.array([4, 2])\nu = np.array([1, 1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Determine the orthonormal basis for the span of vectors (1, 1) and (1, -1) in R^2 using Gram-Schmidt process.",
    "output": "import numpy as np\nv1 = np.array([1, 1])\nv2 = np.array([1, -1])\nu1 = v1 / np.linalg.norm(v1)\nproj_v2_u1 = (np.dot(v2, u1)) * u1\nu2 = v2 - proj_v2_u1\nu2 = u2 / np.linalg.norm(u2)\nprint(\"Orthonormal Basis:\", u1, u2)"
  },
  {
    "input": "Calculate the distance between vectors (1, 2) and (3, 4) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([3, 4])\ndistance = np.linalg.norm(v1 - v2)\nprint(\"Distance:\", distance)"
  },
  {
    "input": "Find the norm of the function f(x) = x on the interval [0, 1] using the L2 norm.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: x**2\nnorm = np.sqrt(quad(f, 0, 1)[0])\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0), (0, 1), (1, 1)} in R^2 is orthogonal.",
    "output": "import numpy as np\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\nv3 = np.array([1, 1])\nprint(\"v1 and v2 orthogonal:\", np.dot(v1, v2) == 0)\nprint(\"v1 and v3 orthogonal:\", np.dot(v1, v3) == 0)\nprint(\"v2 and v3 orthogonal:\", np.dot(v2, v3) == 0)"
  },
  {
    "input": "Compute the inner product of functions f(x) = x and g(x) = x^2 on [0, 1] using the L2 inner product.",
    "output": "from scipy.integrate import quad\nf = lambda x: x\ng = lambda x: x**2\ninner_product = quad(lambda x: f(x) * g(x), 0, 1)[0]\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Find the angle between vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nangle = np.arccos(inner_product / (norm_v1 * norm_v2))\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncauchy_schwarz = inner_product <= norm_v1 * norm_v2\nprint(\"Cauchy-Schwarz Inequality Holds:\", cauchy_schwarz)"
  },
  {
    "input": "Compute the L1 norm of vector (3, -4, 5) in R^3.",
    "output": "import numpy as np\nv = np.array([3, -4, 5])\nl1_norm = np.sum(np.abs(v))\nprint(\"L1 Norm:\", l1_norm)"
  },
  {
    "input": "Determine if vectors (1, 2, 3) and (-1, -2, -3) are linearly independent in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([-1, -2, -3])\nrank = np.linalg.matrix_rank(np.vstack([v1, v2]))\nprint(\"Linearly Independent:\", rank == 2)"
  },
  {
    "input": "Compute the norm of the vector (1, -2, 3) in R^3 using the Euclidean norm.",
    "output": "import numpy as np\nv = np.array([1, -2, 3])\nnorm = np.linalg.norm(v)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Find the inner product of vectors (1, 2) and (3, 4) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([3, 4])\ninner_product = np.dot(v1, v2)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if vectors (1, 0, 0) and (0, 1, 0) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Compute the projection of vector (3, 4) onto vector (1, 2) in R^2.",
    "output": "import numpy as np\nv = np.array([3, 4])\nu = np.array([1, 2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Calculate the distance between vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ndistance = np.linalg.norm(v1 - v2)\nprint(\"Distance:\", distance)"
  },
  {
    "input": "Verify if vectors (1, 0, 0) and (0, 1, 0) are orthogonal in R^3.",
    "output": "import numpy as np\n\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\ninner_product = np.dot(v1, v2)\n\nif inner_product == 0:\n    print(\"The vectors are orthogonal.\")\nelse:\n    print(\"The vectors are not orthogonal.\")"
  },
  {
    "input": "Calculate the Euclidean norm of the vector (3, -4, 12) in R^3.",
    "output": "import numpy as np\nv = np.array([3, -4, 12])\nnorm = np.linalg.norm(v)\nprint(\"Euclidean Norm:\", norm)"
  },
  {
    "input": "Find the inner product of vectors (1, 2, 3) and (4, -5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, -5, 6])\ninner_product = np.dot(v1, v2)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if vectors (1, 0, 1) and (0, 1, -1) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 1])\nv2 = np.array([0, 1, -1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Compute the projection of vector (2, 3) onto vector (1, 1) in R^2.",
    "output": "import numpy as np\nv = np.array([2, 3])\nu = np.array([1, 1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Calculate the angle between vectors (1, 0) and (0, 1) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (1, 2, 2) and (2, 1, -1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 2])\nv2 = np.array([2, 1, -1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncauchy_schwarz = abs(inner_product) <= norm_v1 * norm_v2\nprint(\"Cauchy-Schwarz Inequality Holds:\", cauchy_schwarz)"
  },
  {
    "input": "Find the L-infinity norm (maximum norm) of vector (-1, 4, -3) in R^3.",
    "output": "import numpy as np\nv = np.array([-1, 4, -3])\nl_inf_norm = np.max(np.abs(v))\nprint(\"L-infinity Norm:\", l_inf_norm)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0), (0, 1), (1, 1)} in R^2 is linearly independent.",
    "output": "import numpy as np\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\nv3 = np.array([1, 1])\nmatrix = np.vstack([v1, v2, v3]).T\nrank = np.linalg.matrix_rank(matrix)\nprint(\"Linearly Independent:\", rank == 3)"
  },
  {
    "input": "Compute the norm of the function f(x) = x^2 on the interval [0, 1] using the L2 norm.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: x**4\nnorm = np.sqrt(quad(f, 0, 1)[0])\nprint(\"L2 Norm:\", norm)"
  },
  {
    "input": "Find the angle between vectors (1, 2, 3) and (-1, -2, -3) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([-1, -2, -3])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify the parallelogram law for vectors (1, 2) and (3, 4) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([3, 4])\nleft_side = np.linalg.norm(v1 + v2)**2 + np.linalg.norm(v1 - v2)**2\nright_side = 2 * (np.linalg.norm(v1)**2 + np.linalg.norm(v2)**2)\nprint(\"Parallelogram Law Holds:\", np.isclose(left_side, right_side))"
  },
  {
    "input": "Compute the inner product of functions f(x) = sin(x) and g(x) = cos(x) on [0, \u03c0] using the L2 inner product.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: np.sin(x)\ng = lambda x: np.cos(x)\ninner_product = quad(lambda x: f(x) * g(x), 0, np.pi)[0]\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if the vectors (1, 2, 3), (4, 5, 6), and (7, 8, 9) in R^3 are linearly independent.",
    "output": "import numpy as np\n\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\nv3 = np.array([7, 8, 9])\n\nmatrix = np.column_stack((v1, v2, v3))\nrank = np.linalg.matrix_rank(matrix)\n\nif rank == 3:\n    print(\"The vectors are linearly independent.\")\nelse:\n    print(\"The vectors are linearly dependent.\")"
  },
  {
    "input": "Compute the Euclidean norm of the vector (5, -12) in R^2.",
    "output": "import numpy as np\nv = np.array([5, -12])\nnorm = np.linalg.norm(v)\nprint(\"Euclidean Norm:\", norm)"
  },
  {
    "input": "Find the inner product of vectors (1, 0, -1) and (0, 1, 1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, -1])\nv2 = np.array([0, 1, 1])\ninner_product = np.dot(v1, v2)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if vectors (2, -3, 1) and (-4, 6, -2) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([2, -3, 1])\nv2 = np.array([-4, 6, -2])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Compute the projection of vector (3, 4, 0) onto vector (1, 0, 0) in R^3.",
    "output": "import numpy as np\nv = np.array([3, 4, 0])\nu = np.array([1, 0, 0])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Calculate the angle between vectors (1, 2) and (2, -1) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([2, -1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncauchy_schwarz = abs(inner_product) <= norm_v1 * norm_v2\nprint(\"Cauchy-Schwarz Inequality Holds:\", cauchy_schwarz)"
  },
  {
    "input": "Compute the L1 norm of vector (-3, 4, -5) in R^3.",
    "output": "import numpy as np\nv = np.array([-3, 4, -5])\nl1_norm = np.sum(np.abs(v))\nprint(\"L1 Norm:\", l1_norm)"
  },
  {
    "input": "Find the L-infinity norm (maximum norm) of vector (7, -2, 3) in R^3.",
    "output": "import numpy as np\nv = np.array([7, -2, 3])\nl_inf_norm = np.max(np.abs(v))\nprint(\"L-infinity Norm:\", l_inf_norm)"
  },
  {
    "input": "Compute the norm of the function f(x) = x^3 on the interval [0, 1] using the L2 norm.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: x**6\nnorm = np.sqrt(quad(f, 0, 1)[0])\nprint(\"L2 Norm:\", norm)"
  },
  {
    "input": "Find the angle between vectors (2, 3, 4) and (-2, -3, -4) in R^3.",
    "output": "import numpy as np\nv1 = np.array([2, 3, 4])\nv2 = np.array([-2, -3, -4])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify the parallelogram law for vectors (2, 3) and (4, 5) in R^2.",
    "output": "import numpy as np\nv1 = np.array([2, 3])\nv2 = np.array([4, 5])\nleft_side = np.linalg.norm(v1 + v2)**2 + np.linalg.norm(v1 - v2)**2\nright_side = 2 * (np.linalg.norm(v1)**2 + np.linalg.norm(v2)**2)\nprint(\"Parallelogram Law Holds:\", np.isclose(left_side, right_side))"
  },
  {
    "input": "Compute the inner product of functions f(x) = e^x and g(x) = e^{-x} on [-1, 1] using the L2 inner product.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: np.exp(x)\ng = lambda x: np.exp(-x)\ninner_product = quad(lambda x: f(x) * g(x), -1, 1)[0]\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if the vectors (1, 2, 3), (4, 5, 6), and (7, 8, 9) in R^3 are linearly independent.",
    "output": "import numpy as np\n\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\nv3 = np.array([7, 8, 9])\n\n# Stack vectors as columns to form a matrix\nmatrix = np.column_stack((v1, v2, v3))\n\n# Compute rank\nrank = np.linalg.matrix_rank(matrix)\n\nif rank == 3:\n    print(\"The vectors are linearly independent.\")\nelse:\n    print(\"The vectors are linearly dependent.\")"
  },
  {
    "input": "Compute the inner product of vectors (2, -1, 3) and (-4, 0, 5) in R^3.",
    "output": "import numpy as np\nv1 = np.array([2, -1, 3])\nv2 = np.array([-4, 0, 5])\ninner_product = np.dot(v1, v2)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Calculate the norm of the vector (1, -2, 2) in R^3.",
    "output": "import numpy as np\nv = np.array([1, -2, 2])\nnorm = np.linalg.norm(v)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Determine if vectors (1, 2, 3) and (-3, -2, 1) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([-3, -2, 1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Find an orthonormal basis for the subspace of R^3 spanned by {(1, 0, 0), (1, 1, 0)} using the Gram-Schmidt process.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([1, 1, 0])\n# Gram-Schmidt process\nu1 = v1\nu2 = v2 - np.dot(v2, u1) / np.dot(u1, u1) * u1\n# Normalize\nu1 = u1 / np.linalg.norm(u1)\nu2 = u2 / np.linalg.norm(u2)\nprint(\"Orthonormal Basis:\", u1, u2)"
  },
  {
    "input": "Compute the Fourier coefficients of f(x) = x on the interval [-\u03c0, \u03c0] for the first two non-zero terms.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: x\nL = np.pi\na0 = (1/L) * quad(f, -L, L)[0]\nan = lambda n: (1/L) * quad(lambda x: f(x) * np.cos(n * np.pi * x / L), -L, L)[0]\nbn = lambda n: (1/L) * quad(lambda x: f(x) * np.sin(n * np.pi * x / L), -L, L)[0]\nprint(\"First two non-zero Fourier coefficients:\", an(1), bn(1))"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (3, -1, 4) and (2, 5, -2) in R^3.",
    "output": "import numpy as np\nv1 = np.array([3, -1, 4])\nv2 = np.array([2, 5, -2])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncauchy_schwarz = abs(inner_product) <= norm_v1 * norm_v2\nprint(\"Cauchy-Schwarz Inequality Holds:\", cauchy_schwarz)"
  },
  {
    "input": "Compute the projection of vector (4, 2, 3) onto vector (1, 0, -1) in R^3.",
    "output": "import numpy as np\nv = np.array([4, 2, 3])\nu = np.array([1, 0, -1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Determine if the set of vectors {(1, 0, 0), (0, 1, 0), (1, 1, 1)} in R^3 is linearly independent.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\nv3 = np.array([1, 1, 1])\nmatrix = np.vstack([v1, v2, v3]).T\nrank = np.linalg.matrix_rank(matrix)\nprint(\"Linearly Independent:\", rank == 3)"
  },
  {
    "input": "Find the angle between vectors (1, 2) and (2, -1) in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([2, -1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Compute the L2 norm of the function f(x) = e^x on the interval [0, 1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: np.exp(x)**2\nnorm = np.sqrt(quad(f, 0, 1)[0])\nprint(\"L2 Norm:\", norm)"
  },
  {
    "input": "Compute the inner product of functions f(x) = sin(x) and g(x) = cos(x) on [0, \u03c0] using the L2 inner product.",
    "output": "from scipy.integrate import quad\nimport numpy as np\n\nf = lambda x: np.sin(x)\ng = lambda x: np.cos(x)\n\ninner_product, _ = quad(lambda x: f(x) * g(x), 0, np.pi)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Compute the 1-norm (Manhattan norm) of the vector (3, -4, 5) in R^3.",
    "output": "import numpy as np\nv = np.array([3, -4, 5])\nnorm_1 = np.linalg.norm(v, 1)\nprint(\"1-Norm:\", norm_1)"
  },
  {
    "input": "Calculate the infinity norm (maximum norm) of the vector (-7, 2, 9) in R^3.",
    "output": "import numpy as np\nv = np.array([-7, 2, 9])\nnorm_inf = np.linalg.norm(v, np.inf)\nprint(\"Infinity Norm:\", norm_inf)"
  },
  {
    "input": "Find the inner product of vectors (1, -1, 2) and (2, 0, -3) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, -1, 2])\nv2 = np.array([2, 0, -3])\ninner_product = np.dot(v1, v2)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Determine if vectors (1, 2, 3) and (-2, -4, -6) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([-2, -4, -6])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Compute the projection of vector (4, -2, 1) onto vector (1, 2, 2) in R^3.",
    "output": "import numpy as np\nv = np.array([4, -2, 1])\nu = np.array([1, 2, 2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (3, -1, 4) and (2, 5, -2) in R^3.",
    "output": "import numpy as np\nv1 = np.array([3, -1, 4])\nv2 = np.array([2, 5, -2])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nprint(\"Cauchy-Schwarz Inequality Holds:\", abs(inner_product) <= norm_v1 * norm_v2)"
  },
  {
    "input": "Compute the angle between vectors (2, 3) and (-3, 2) in R^2.",
    "output": "import numpy as np\nv1 = np.array([2, 3])\nv2 = np.array([-3, 2])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(1, 2, 3)} in R^3.",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\n# Any vector orthogonal to v will satisfy np.dot(v, x) = 0\n# The orthogonal complement is the plane 1*x + 2*y + 3*z = 0"
  },
  {
    "input": "Determine if the set of vectors {(1, 0, 0), (0, 1, 0), (0, 0, 1)} forms an orthonormal basis for R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 0])\nv3 = np.array([0, 0, 1])\n# Check orthogonality\northogonal = np.dot(v1, v2) == 0 and np.dot(v1, v3) == 0 and np.dot(v2, v3) == 0\n# Check normalization\nnormalized = np.linalg.norm(v1) == 1 and np.linalg.norm(v2) == 1 and np.linalg.norm(v3) == 1\nprint(\"Orthonormal Basis:\", orthogonal and normalized)"
  },
  {
    "input": "Apply the Gram-Schmidt process to orthogonalize the set of vectors {(1, 1, 0), (1, 0, 1)} in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0])\nv2 = np.array([1, 0, 1])\n# Orthogonalization\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\n# Normalization\nu1 = u1 / np.linalg.norm(u1)\nu2 = u2 / np.linalg.norm(u2)\nprint(\"Orthonormal Set:\", u1, u2)"
  },
  {
    "input": "Compute the Fourier series coefficients for f(x) = x^2 on the interval [-\u03c0, \u03c0] up to the second harmonic.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nL = np.pi\na0 = (1/L) * quad(lambda x: x**2, -L, L)[0]\nan = lambda n: (1/L) * quad(lambda x: x**2 * np.cos(n * np.pi * x / L), -L, L)[0]\nbn = lambda n: (1/L) * quad(lambda x: x**2 * np.sin(n * np.pi * x / L), -L, L)[0]\nprint(\"a0:\", a0, \"a1:\", an(1), \"b1:\", bn(1), \"a2:\", an(2), \"b2:\", bn(2))"
  },
  {
    "input": "Show that the set of vectors {(1, 1), (1, -1)} is orthogonal but not orthonormal in R^2.",
    "output": "import numpy as np\n\nv1 = np.array([1, 1])\nv2 = np.array([1, -1])\n\n# Check orthogonality\ninner_product = np.dot(v1, v2)\nprint(\"Inner product:\", inner_product)\n\n# Check norms\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nprint(\"Norm of v1:\", norm_v1)\nprint(\"Norm of v2:\", norm_v2)"
  },
  {
    "input": "Compute the Frobenius norm of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nfrobenius_norm = np.linalg.norm(A, 'fro')\nprint(\"Frobenius Norm:\", frobenius_norm)"
  },
  {
    "input": "Find the inner product of polynomials f(x) = 1 + x and g(x) = x + x^2 over the interval [0, 1] with the inner product defined as \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: 1 + x\ng = lambda x: x + x**2\ninner_product, _ = quad(lambda x: f(x) * g(x), 0, 1)\nprint(\"Inner Product:\", inner_product)"
  },
  {
    "input": "Verify if the set of functions {1, sin(x), cos(x)} is orthogonal on the interval [-\u03c0, \u03c0] with the inner product \u27e8f, g\u27e9 = \u222b[-\u03c0,\u03c0] f(x)g(x) dx.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf1 = lambda x: 1\nf2 = lambda x: np.sin(x)\nf3 = lambda x: np.cos(x)\ninner_product_12, _ = quad(lambda x: f1(x) * f2(x), -np.pi, np.pi)\ninner_product_13, _ = quad(lambda x: f1(x) * f3(x), -np.pi, np.pi)\ninner_product_23, _ = quad(lambda x: f2(x) * f3(x), -np.pi, np.pi)\nprint(\"Orthogonal Set:\", np.isclose(inner_product_12, 0) and np.isclose(inner_product_13, 0) and np.isclose(inner_product_23, 0))"
  },
  {
    "input": "Compute the norm induced by the inner product \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx for f(x) = x.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: x\ninner_product, _ = quad(lambda x: f(x) * f(x), 0, 1)\nnorm = np.sqrt(inner_product)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Determine if the vectors (1, 2, 3, 4) and (4, 3, 2, 1) are orthogonal in R^4 with the standard inner product.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3, 4])\nv2 = np.array([4, 3, 2, 1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", np.isclose(inner_product, 0))"
  },
  {
    "input": "Find the projection of the vector (3, 4, 0) onto the subspace spanned by the vectors (1, 0, 0) and (0, 1, 0) in R^3.",
    "output": "import numpy as np\nv = np.array([3, 4, 0])\nbasis = np.array([[1, 0, 0], [0, 1, 0]])\nprojection = np.zeros(3)\nfor b in basis:\n    projection += (np.dot(v, b) / np.dot(b, b)) * b\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Compute the angle between the vectors (1, 0, 0) and (0, 1, 1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 0])\nv2 = np.array([0, 1, 1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Show that the set of vectors {(1, 2), (2, -1)} is not orthogonal in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([2, -1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", np.isclose(inner_product, 0))"
  },
  {
    "input": "Apply the Gram-Schmidt process to orthogonalize the set of vectors {(1, 1, 1), (1, 0, -1), (0, 1, 1)} in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 1])\nv2 = np.array([1, 0, -1])\nv3 = np.array([0, 1, 1])\n# Orthogonalization\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\nu3 = v3 - (np.dot(v3, u1) / np.dot(u1, u1)) * u1 - (np.dot(v3, u2) / np.dot(u2, u2)) * u2\n# Normalization\nu1 = u1 / np.linalg.norm(u1)\nu2 = u2 / np.linalg.norm(u2)\nu3 = u3 / np.linalg.norm(u3)\nprint(\"Orthonormal Set:\", u1, u2, u3)"
  },
  {
    "input": "Compute the Fourier series coefficients for f(x) = sin(x) on the interval [-\u03c0, \u03c0] up to the first harmonic.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\n\nL = np.pi\nf = lambda x: np.sin(x)\n\n# Compute a0\na0 = (1 / L) * quad(f, -L, L)[0]\n\n# Compute a1 and b1\nan = lambda n: (1 / L) * quad(lambda x: f(x) * np.cos(n * np.pi * x / L), -L, L)[0]\nbn = lambda n: (1 / L) * quad(lambda x: f(x) * np.sin(n * np.pi * x / L), -L, L)[0]\n\na1 = an(1)\nb1 = bn(1)\n\nprint(\"a0 =\", a0)\nprint(\"a1 =\", a1)\nprint(\"b1 =\", b1)"
  },
  {
    "input": "Compute the Euclidean norm (2-norm) of the vector (7, -24) in R^2.",
    "output": "import numpy as np\nv = np.array([7, -24])\nnorm_2 = np.linalg.norm(v, 2)\nprint(\"2-Norm:\", norm_2)"
  },
  {
    "input": "Determine if the vectors (1, 0, -1) and (0, 1, 1) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 0, -1])\nv2 = np.array([0, 1, 1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", inner_product == 0)"
  },
  {
    "input": "Find the projection of the vector (5, 5) onto the vector (1, 2) in R^2.",
    "output": "import numpy as np\nv = np.array([5, 5])\nu = np.array([1, 2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nprint(\"Cauchy-Schwarz Inequality Holds:\", abs(inner_product) <= norm_v1 * norm_v2)"
  },
  {
    "input": "Compute the angle between vectors (3, 4) and (4, -3) in R^2.",
    "output": "import numpy as np\nv1 = np.array([3, 4])\nv2 = np.array([4, -3])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(2, -1, 0)} in R^3.",
    "output": "import numpy as np\nv = np.array([2, -1, 0])\n# Any vector orthogonal to v will satisfy np.dot(v, x) = 0\n# The orthogonal complement is the plane 2*x - y = 0"
  },
  {
    "input": "Determine if the set of vectors {(1, 0), (0, 1)} forms an orthonormal basis for R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 0])\nv2 = np.array([0, 1])\n# Check orthogonality\northogonal = np.dot(v1, v2) == 0\n# Check normalization\nnormalized = np.linalg.norm(v1) == 1 and np.linalg.norm(v2) == 1\nprint(\"Orthonormal Basis:\", orthogonal and normalized)"
  },
  {
    "input": "Apply the Gram-Schmidt process to orthogonalize the set of vectors {(1, 2), (2, 3)} in R^2.",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([2, 3])\n# Orthogonalization\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\n# Normalization\nu1 = u1 / np.linalg.norm(u1)\nu2 = u2 / np.linalg.norm(u2)\nprint(\"Orthonormal Set:\", u1, u2)"
  },
  {
    "input": "Compute the Fourier series coefficients for f(x) = x on the interval [-\u03c0, \u03c0] up to the first harmonic.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nL = np.pi\na0 = (1/L) * quad(lambda x: x, -L, L)[0]\nan = lambda n: (1/L) * quad(lambda x: x * np.cos(n * np.pi * x / L), -L, L)[0]\nbn = lambda n: (1/L) * quad(lambda x: x * np.sin(n * np.pi * x / L), -L, L)[0]\nprint(\"a0:\", a0, \"a1:\", an(1), \"b1:\", bn(1))"
  },
  {
    "input": "Show that the set of vectors {(1, 1, 1), (1, -1, 0), (0, 1, -1)} is orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 1])\nv2 = np.array([1, -1, 0])\nv3 = np.array([0, 1, -1])\n# Check orthogonality\northogonal = np.dot(v1, v2) == 0 and np.dot(v1, v3) == 0 and np.dot(v2, v3) == 0\nprint(\"Orthogonal Set:\", orthogonal)"
  },
  {
    "input": "Compute the norm of the polynomial f(x) = 1 + x in the inner product space of polynomials with inner product \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: 1 + x\ninner_product = quad(lambda x: f(x) * f(x), 0, 1)[0]\nnorm = np.sqrt(inner_product)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Determine if the vectors (1, 2, 3) and (4, 5, 6) are linearly independent in R^3.",
    "output": "import numpy as np\n\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\n\n# Stack vectors as columns in a matrix\nA = np.column_stack((v1, v2))\n\n# Compute rank\nrank = np.linalg.matrix_rank(A)\n\nprint(\"Linearly independent:\" , rank == 2)"
  },
  {
    "input": "Determine if the vectors (2, -1, 3) and (-1, 2, 1) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([2, -1, 3])\nv2 = np.array([-1, 2, 1])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", np.isclose(inner_product, 0))"
  },
  {
    "input": "Find the projection of the vector (4, 2, 3) onto the vector (1, 1, 1) in R^3.",
    "output": "import numpy as np\nv = np.array([4, 2, 3])\nu = np.array([1, 1, 1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for vectors (1, -2, 3) and (4, 0, -1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, -2, 3])\nv2 = np.array([4, 0, -1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nprint(\"Cauchy-Schwarz Inequality Holds:\", abs(inner_product) <= norm_v1 * norm_v2)"
  },
  {
    "input": "Compute the angle between vectors (1, 2, 3) and (4, 5, 6) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(1, 2, 3)} in R^3.",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\n# Any vector orthogonal to v will satisfy np.dot(v, x) = 0\n# The orthogonal complement is the plane x + 2y + 3z = 0"
  },
  {
    "input": "Compute the Fourier series coefficients for f(x) = x^2 on the interval [-\u03c0, \u03c0] up to the first harmonic.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nL = np.pi\na0 = (1/L) * quad(lambda x: x**2, -L, L)[0]\nan = lambda n: (1/L) * quad(lambda x: x**2 * np.cos(n * np.pi * x / L), -L, L)[0]\nbn = lambda n: (1/L) * quad(lambda x: x**2 * np.sin(n * np.pi * x / L), -L, L)[0]\nprint(\"a0:\", a0, \"a1:\", an(1), \"b1:\", bn(1))"
  },
  {
    "input": "Show that the set of vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} is linearly dependent in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\nv3 = np.array([7, 8, 9])\n# Form matrix with v1, v2, v3 as rows\nA = np.array([v1, v2, v3])\n# Check rank\nrank = np.linalg.matrix_rank(A)\nprint(\"Linearly Dependent:\", rank < 3)"
  },
  {
    "input": "Compute the norm of the polynomial f(x) = x^2 + x + 1 in the inner product space of polynomials with inner product \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx.",
    "output": "from scipy.integrate import quad\nimport numpy as np\n\nf = lambda x: x**2 + x + 1\ninner_product = quad(lambda x: f(x)**2, 0, 1)[0]\nnorm = np.sqrt(inner_product)\n\nprint(\"Norm of f(x):\", norm)"
  },
  {
    "input": "Compute the infinity norm (maximum norm) of the vector (2, -3, 7) in R^3.",
    "output": "import numpy as np\nv = np.array([2, -3, 7])\nnorm_inf = np.linalg.norm(v, np.inf)\nprint(\"Infinity Norm:\", norm_inf)"
  },
  {
    "input": "Determine if the vectors (1, 2, 2) and (2, -1, 2) are orthogonal in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 2])\nv2 = np.array([2, -1, 2])\ninner_product = np.dot(v1, v2)\nprint(\"Orthogonal:\", np.isclose(inner_product, 0))"
  },
  {
    "input": "Find the projection of the vector (3, 4, 5) onto the vector (1, 0, -1) in R^3.",
    "output": "import numpy as np\nv = np.array([3, 4, 5])\nu = np.array([1, 0, -1])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the triangle inequality for vectors (1, 2, 3) and (-1, 0, 1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([-1, 0, 1])\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\nnorm_sum = np.linalg.norm(v1 + v2)\nprint(\"Triangle Inequality Holds:\", norm_sum <= norm_v1 + norm_v2)"
  },
  {
    "input": "Compute the angle between vectors (0, 1, 1) and (1, 0, -1) in R^3.",
    "output": "import numpy as np\nv1 = np.array([0, 1, 1])\nv2 = np.array([1, 0, -1])\ninner_product = np.dot(v1, v2)\nnorm_v1 = np.linalg.norm(v1)\nnorm_v2 = np.linalg.norm(v2)\ncos_theta = inner_product / (norm_v1 * norm_v2)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find the orthogonal complement of the span of {(1, 1, 0), (0, 1, 1)} in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0])\nv2 = np.array([0, 1, 1])\n# The orthogonal complement consists of vectors orthogonal to both v1 and v2.\n# Solve the system: np.dot(v1, x) = 0 and np.dot(v2, x) = 0 to find the complement."
  },
  {
    "input": "Determine if the set of vectors {(1, 1, 1), (1, -1, 0), (0, 1, -1)} forms an orthogonal basis for R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 1])\nv2 = np.array([1, -1, 0])\nv3 = np.array([0, 1, -1])\n# Check orthogonality\northogonal = (np.dot(v1, v2) == 0 and np.dot(v1, v3) == 0 and np.dot(v2, v3) == 0)\n# Check if they span R^3 by forming a matrix and checking its rank\nA = np.array([v1, v2, v3]).T\nrank = np.linalg.matrix_rank(A)\nprint(\"Orthogonal Basis:\", orthogonal and rank == 3)"
  },
  {
    "input": "Apply the Gram-Schmidt process to orthogonalize the set of vectors {(1, 2, 3), (4, 5, 6), (7, 8, 9)} in R^3.",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])\nv3 = np.array([7, 8, 9])\n# Orthogonalization\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\nu3 = v3 - (np.dot(v3, u1) / np.dot(u1, u1)) * u1 - (np.dot(v3, u2) / np.dot(u2, u2)) * u2\n# Normalization\nu1 = u1 / np.linalg.norm(u1)\nu2 = u2 / np.linalg.norm(u2)\nu3 = u3 / np.linalg.norm(u3)\nprint(\"Orthonormal Set:\", u1, u2, u3)"
  },
  {
    "input": "Compute the Fourier series coefficients for f(x) = sin(x) on the interval [0, 2\u03c0] up to the first harmonic.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nL = 2 * np.pi\na0 = (1/L) * quad(lambda x: np.sin(x), 0, L)[0]\nan = lambda n: (1/L) * quad(lambda x: np.sin(x) * np.cos(n * np.pi * x / L), 0, L)[0]\nbn = lambda n: (1/L) * quad(lambda x: np.sin(x) * np.sin(n * np.pi * x / L), 0, L)[0]\nprint(\"a0:\", a0, \"a1:\", an(1), \"b1:\", bn(1))"
  },
  {
    "input": "Show that the set of vectors {(2, 3, 4), (1, 0, -1), (0, 1, 1)} is linearly independent in R^3.",
    "output": "import numpy as np\n\nv1 = np.array([2, 3, 4])\nv2 = np.array([1, 0, -1])\nv3 = np.array([0, 1, 1])\n\n# Form matrix with vectors as columns\nA = np.column_stack((v1, v2, v3))\n\n# Compute the rank of the matrix\nrank = np.linalg.matrix_rank(A)\n\nif rank == 3:\n    print(\"The vectors are linearly independent.\")\nelse:\n    print(\"The vectors are linearly dependent.\")"
  },
  {
    "input": "Let V be the vector space of real polynomials of degree at most 2, with inner product defined by \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx. Find the norm of f(x) = x^2 + x + 1.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: x**2 + x + 1\nnorm_f = np.sqrt(quad(lambda x: f(x)**2, 0, 1)[0])\nprint(\"Norm of f:\", norm_f)"
  },
  {
    "input": "In the inner product space of continuous functions on [-\u03c0, \u03c0] with inner product \u27e8f, g\u27e9 = \u222b[-\u03c0,\u03c0] f(x)g(x) dx, verify that the set {1/\u221a(2\u03c0), sin(x)/\u221a\u03c0, cos(x)/\u221a\u03c0} is orthonormal.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf1 = lambda x: 1/np.sqrt(2*np.pi)\nf2 = lambda x: np.sin(x)/np.sqrt(np.pi)\nf3 = lambda x: np.cos(x)/np.sqrt(np.pi)\ninner_f1_f2 = quad(lambda x: f1(x)*f2(x), -np.pi, np.pi)[0]\ninner_f1_f3 = quad(lambda x: f1(x)*f3(x), -np.pi, np.pi)[0]\ninner_f2_f3 = quad(lambda x: f2(x)*f3(x), -np.pi, np.pi)[0]\nnorm_f1 = np.sqrt(quad(lambda x: f1(x)**2, -np.pi, np.pi)[0])\nnorm_f2 = np.sqrt(quad(lambda x: f2(x)**2, -np.pi, np.pi)[0])\nnorm_f3 = np.sqrt(quad(lambda x: f3(x)**2, -np.pi, np.pi)[0])\nprint(\"Orthonormal Set:\", np.isclose(inner_f1_f2, 0) and np.isclose(inner_f1_f3, 0) and np.isclose(inner_f2_f3, 0) and np.isclose(norm_f1, 1) and np.isclose(norm_f2, 1) and np.isclose(norm_f3, 1))"
  },
  {
    "input": "Let V be an inner product space. Prove that for any vectors u, v in V, \u27e8u, v\u27e9 = (||u+v||^2 - ||u-v||^2)/4.",
    "output": "from sympy import symbols, Matrix, simplify, expand\n\n# Define symbolic components of vectors u and v\nu1, u2 = symbols('u1 u2')\nv1, v2 = symbols('v1 v2')\n\nu = Matrix([u1, u2])\nv = Matrix([v1, v2])\n\n# Left side of the identity (using norms)\nleft = ((u + v).dot(u + v) - (u - v).dot(u - v)) / 4\n\n# Right side is the dot product of u and v\nright = u.dot(v)\n\n# Simplify the difference\nproof = simplify(left - right)\n\nprint(\"Proof holds:\", proof == 0)"
  },
  {
    "input": "In R^3, let W be the subspace spanned by the vectors (1, 1, 2) and (1, 1, -1). Find the point in W closest to the vector (4, 5, -2).",
    "output": "import numpy as np\nv1 = np.array([1, 1, 2])\nv2 = np.array([1, 1, -1])\nv = np.array([4, 5, -2])\nA = np.array([v1, v2]).T\nproj = A @ np.linalg.inv(A.T @ A) @ A.T @ v\nprint(\"Closest point in W:\", proj)"
  },
  {
    "input": "Let V be the vector space of 2x2 real matrices with inner product \u27e8A, B\u27e9 = tr(A^T B). Find the norm of A = [[1, 2], [3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nnorm_A = np.sqrt(np.trace(A.T @ A))\nprint(\"Norm of A:\", norm_A)"
  },
  {
    "input": "Let V be the vector space of continuous real-valued functions on [0, 1] with inner product \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx. Find the norm of f(x) = e^x.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\nf = lambda x: np.exp(x)\nnorm_f = np.sqrt(quad(lambda x: f(x)**2, 0, 1)[0])\nprint(\"Norm of f:\", norm_f)"
  },
  {
    "input": "Let V be an inner product space. Prove that ||u|| \u2264 ||u + \u03b1v|| for every \u03b1 in F if and only if \u27e8u, v\u27e9 = 0.",
    "output": "from sympy import symbols, simplify, Matrix, conjugate, expand, I\n\n# Define symbolic variables\nu1, u2, v1, v2, alpha = symbols('u1 u2 v1 v2 alpha', real=True)\n\n# Define vectors u and v\nu = Matrix([u1, u2])\nv = Matrix([v1, v2])\n\n# Norm squared difference: ||u + \u03b1v||\u00b2 - ||u||\u00b2\nlhs = ((u + alpha * v).dot(u + alpha * v)) - u.dot(u)\n\n# Expand and simplify\nlhs_simplified = expand(lhs)\n\n# Inner product \u27e8u, v\u27e9 is u \u2022 v in real inner product spaces\ninner_product = u.dot(v)\n\n# The inequality ||u|| \u2264 ||u + \u03b1v|| for all \u03b1 holds iff the inner product term disappears (\u27e8u, v\u27e9 = 0)\ncondition = simplify(lhs_simplified.subs(inner_product, 0))\n\nprint(\"Simplified expression (should be \u2265 0 if \u27e8u, v\u27e9 = 0):\", condition)"
  },
  {
    "input": "Let V be the vector space of polynomials of degree at most 2 with inner product \u27e8f, g\u27e9 = \u222b[0,1] f(x)g(x) dx. Apply the Gram-Schmidt process to the basis {1, x, x^2}.",
    "output": "import numpy as np\nfrom scipy.integrate import quad\n\n# Basis functions\nf1 = lambda x: 1\nf2 = lambda x: x\nf3 = lambda x: x**2\n\n# Inner product function\ndef inner(f, g):\n    return quad(lambda x: f(x) * g(x), 0, 1)[0]\n\n# Orthogonalization\nu1 = f1\n\nu2 = lambda x: f2(x) - (inner(f2, u1) / inner(u1, u1)) * u1(x)\n\nu3 = lambda x: f3(x) - (inner(f3, u1) / inner(u1, u1)) * u1(x) - (inner(f3, u2) / inner(u2, u2)) * u2(x)\n\n# Normalization\nnorm_u1 = np.sqrt(inner(u1, u1))\nnorm_u2 = np.sqrt(inner(u2, u2))\nnorm_u3 = np.sqrt(inner(u3, u3))\n\ne1 = lambda x: u1(x) / norm_u1\ne2 = lambda x: u2(x) / norm_u2\ne3 = lambda x: u3(x) / norm_u3\n\n# Example usage: evaluate at x = 0.5\nprint(e1(0.5), e2(0.5), e3(0.5))"
  },
  {
    "input": "Let x = (1, 2, 2) in R\u00b3. Compute the L2 norm of x.",
    "output": "import numpy as np\nx = np.array([1, 2, 2])\nnorm = np.linalg.norm(x)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Given vectors a = (3, -2, 1), b = (1, 4, -1), compute the cosine of the angle between them using the dot product.",
    "output": "import numpy as np\na = np.array([3, -2, 1])\nb = np.array([1, 4, -1])\ncos_theta = np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\nprint(\"Cosine of angle:\", cos_theta)"
  },
  {
    "input": "Let u = (1, 2), v = (3, 4). Compute the inner product \u27e8u, v\u27e9 in R\u00b2.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([3, 4])\ninner_product = np.dot(u, v)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Show that the set {(1, 0, 1), (0, 1, 1)} is not orthogonal in R\u00b3 with standard inner product.",
    "output": "import numpy as np\nv1 = np.array([1, 0, 1])\nv2 = np.array([0, 1, 1])\nprint(\"Dot product:\", np.dot(v1, v2))  # Should be zero for orthogonality"
  },
  {
    "input": "Given x = (2, -1, 2), find the unit vector in the same direction.",
    "output": "import numpy as np\nx = np.array([2, -1, 2])\nunit_vector = x / np.linalg.norm(x)\nprint(\"Unit vector:\", unit_vector)"
  },
  {
    "input": "In R\u00b2 with inner product \u27e8x, y\u27e9 = 2x1y1 + 3x2y2, compute the inner product of x = (1, 2) and y = (3, 4).",
    "output": "x = [1, 2]\ny = [3, 4]\ninner_product = 2*x[0]*y[0] + 3*x[1]*y[1]\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Let x = (4, 0), y = (0, 3). Verify the Pythagorean theorem using the inner product.",
    "output": "import numpy as np\nx = np.array([4, 0])\ny = np.array([0, 3])\nprint(\"Are orthogonal:\", np.dot(x, y) == 0)\nprint(\"||x+y||^2:\", np.linalg.norm(x+y)**2)\nprint(\"||x||^2 + ||y||^2:\", np.linalg.norm(x)**2 + np.linalg.norm(y)**2)"
  },
  {
    "input": "Find the projection of v = (3, 1) onto u = (1, 2).",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([3, 1])\nproj = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Given vectors u = (1, 1, 0), v = (-1, 1, 0), compute their orthonormal basis using Gram-Schmidt.",
    "output": "import numpy as np\nu = np.array([1, 1, 0])\nv = np.array([-1, 1, 0])\ne1 = u / np.linalg.norm(u)\nproj = np.dot(v, e1) * e1\ne2 = v - proj\ne2 = e2 / np.linalg.norm(e2)\nprint(\"Orthonormal basis:\", e1, e2)"
  },
  {
    "input": "Let x = (1, 2, 3), compute its L\u221e norm.",
    "output": "import numpy as np\nx = np.array([1, 2, 3])\nprint(\"L-infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Given vectors a = (2, 3, 4) and b = (1, 0, -1), compute the distance between them using Euclidean norm.",
    "output": "import numpy as np\na = np.array([2, 3, 4])\nb = np.array([1, 0, -1])\ndistance = np.linalg.norm(a - b)\nprint(\"Distance:\", distance)"
  },
  {
    "input": "Let A be a 2x2 matrix [[1, 2], [3, 4]]. Find the Frobenius norm of A.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nnorm = np.linalg.norm(A, 'fro')\nprint(\"Frobenius norm:\", norm)"
  },
  {
    "input": "Let x = (1, 1), find its L1, L2 and L\u221e norms.",
    "output": "import numpy as np\nx = np.array([1, 1])\nprint(\"L1:\", np.sum(np.abs(x)))\nprint(\"L2:\", np.linalg.norm(x))\nprint(\"L\u221e:\", np.max(np.abs(x)))"
  },
  {
    "input": "Given u = (1, 1, 1), v = (1, 2, 3), find scalar projection of v onto u.",
    "output": "import numpy as np\nu = np.array([1, 1, 1])\nv = np.array([1, 2, 3])\nscalar_proj = np.dot(v, u) / np.linalg.norm(u)\nprint(\"Scalar projection:\", scalar_proj)"
  },
  {
    "input": "Let x = (1, -1, 1), y = (2, 0, -2). Check if x and y are orthogonal.",
    "output": "import numpy as np\nx = np.array([1, -1, 1])\ny = np.array([2, 0, -2])\nprint(\"Orthogonal:\", np.dot(x, y) == 0)"
  },
  {
    "input": "Let u = (1, 1, 0), v = (1, -1, 0). Verify they are orthogonal and compute the norm of u + v.",
    "output": "import numpy as np\nu = np.array([1, 1, 0])\nv = np.array([1, -1, 0])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)\nprint(\"||u+v||:\", np.linalg.norm(u+v))"
  },
  {
    "input": "Is the set {(1,0,1), (0,1,0), (1,0,-1)} orthogonal in R\u00b3?",
    "output": "import numpy as np\nv1 = np.array([1,0,1])\nv2 = np.array([0,1,0])\nv3 = np.array([1,0,-1])\nprint(\"Orthogonal:\", np.dot(v1, v2)==0 and np.dot(v1, v3)==0 and np.dot(v2, v3)==0)"
  },
  {
    "input": "Find the length of the vector f(x) = sin(x) in inner product space on [0, \u03c0] with \u27e8f, g\u27e9 = \u222b f(x)g(x) dx.",
    "output": "from scipy.integrate import quad\nfrom numpy import sin, sqrt\nlength = sqrt(quad(lambda x: sin(x)**2, 0, np.pi)[0])\nprint(\"Length:\", length)"
  },
  {
    "input": "In R\u00b3, compute the Euclidean norm (L2 norm) of the vector v = (3, -4, 12).",
    "output": "import numpy as np\nv = np.array([3, -4, 12])\nnorm_v = np.linalg.norm(v)\nprint(\"L2 norm of v:\", norm_v)"
  },
  {
    "input": "Given vectors u = (1, 0, 0) and v = (0, 1, 1) in R\u00b3, calculate their inner product.",
    "output": "import numpy as np\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 1])\ninner_product = np.dot(u, v)\nprint(\"Inner product of u and v:\", inner_product)"
  },
  {
    "input": "Determine if the vectors u = (1, -1, 2) and v = (2, 2, -4) in R\u00b3 are orthogonal.",
    "output": "import numpy as np\nu = np.array([1, -1, 2])\nv = np.array([2, 2, -4])\ninner_product = np.dot(u, v)\nprint(\"Are u and v orthogonal?\", inner_product == 0)"
  },
  {
    "input": "Find the projection of vector v = (4, 2) onto vector u = (1, 1) in R\u00b2.",
    "output": "import numpy as np\nu = np.array([1, 1])\nv = np.array([4, 2])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection of v onto u:\", projection)"
  },
  {
    "input": "Compute the L1 norm (Manhattan norm) of the vector v = (-3, 4, -5) in R\u00b3.",
    "output": "import numpy as np\nv = np.array([-3, 4, -5])\nl1_norm = np.sum(np.abs(v))\nprint(\"L1 norm of v:\", l1_norm)"
  },
  {
    "input": "Let u = (2, -3) and v = (-4, 6) in R\u00b2. Verify if they are linearly dependent.",
    "output": "import numpy as np\nu = np.array([2, -3])\nv = np.array([-4, 6])\nare_dependent = np.linalg.matrix_rank(np.vstack([u, v])) == 1\nprint(\"Are u and v linearly dependent?\", are_dependent)"
  },
  {
    "input": "In R\u00b3, compute the cosine of the angle between vectors u = (1, 2, 3) and v = (4, 5, 6).",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nprint(\"Cosine of the angle between u and v:\", cos_theta)"
  },
  {
    "input": "Find the unit vector in the direction of v = (7, -24) in R\u00b2.",
    "output": "import numpy as np\nv = np.array([7, -24])\nunit_vector = v / np.linalg.norm(v)\nprint(\"Unit vector in the direction of v:\", unit_vector)"
  },
  {
    "input": "Given vectors u = (1, 2, 3) and v = (4, 5, 6) in R\u00b3, compute their cross product.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\ncross_product = np.cross(u, v)\nprint(\"Cross product of u and v:\", cross_product)"
  },
  {
    "input": "In R\u00b2, find the angle between vectors u = (1, 0) and v = (1, 1) in degrees.",
    "output": "import numpy as np\nu = np.array([1, 0])\nv = np.array([1, 1])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle_rad = np.arccos(cos_theta)\nangle_deg = np.degrees(angle_rad)\nprint(\"Angle between u and v in degrees:\", angle_deg)"
  },
  {
    "input": "Determine the orthogonal projection of v = (3, 4, 5) onto the plane defined by normal vector n = (0, 0, 1) in R\u00b3.",
    "output": "import numpy as np\nv = np.array([3, 4, 5])\nn = np.array([0, 0, 1])\nprojection = v - (np.dot(v, n) / np.dot(n, n)) * n\nprint(\"Projection of v onto the plane:\", projection)"
  },
  {
    "input": "Compute the Frobenius norm of matrix A = [[1, 2], [3, 4]] in R\u00b2x\u00b2.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nfrobenius_norm = np.sqrt(np.sum(A**2))\nprint(\"Frobenius norm of A:\", frobenius_norm)"
  },
  {
    "input": "Given vectors u = (1, 2) and v = (2, -1) in R\u00b2, find the area of the parallelogram they span.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([2, -1])\narea = np.abs(np.cross(u, v))\nprint(\"Area of the parallelogram spanned by u and v:\", area)"
  },
  {
    "input": "In R\u00b3, verify if the vectors u = (1, 0, 0), v = (0, 1, 0), and w = (0, 0, 1) form an orthonormal set.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\nw = np.array([0, 0, 1])\n\n# Check orthogonality (dot products between pairs should be 0)\northogonal = np.allclose(np.dot(u, v), 0) and \\\n             np.allclose(np.dot(v, w), 0) and \\\n             np.allclose(np.dot(w, u), 0)\n\n# Check normalization (each vector should have norm 1)\nnorms = np.allclose(np.linalg.norm(u), 1) and \\\n        np.allclose(np.linalg.norm(v), 1) and \\\n        np.allclose(np.linalg.norm(w), 1)\n\northonormal = orthogonal and norms\nprint(\"Is orthonormal:\", orthonormal)"
  },
  {
    "input": "Compute the Euclidean norm (L2 norm) of the vector v = (6, -8, 0) in R\u00b3.",
    "output": "import numpy as np\nv = np.array([6, -8, 0])\nnorm_v = np.linalg.norm(v)\nprint(\"L2 norm of v:\", norm_v)"
  },
  {
    "input": "Given vectors u = (2, -1, 3) and v = (-1, 4, -2) in R\u00b3, calculate their inner product.",
    "output": "import numpy as np\nu = np.array([2, -1, 3])\nv = np.array([-1, 4, -2])\ninner_product = np.dot(u, v)\nprint(\"Inner product of u and v:\", inner_product)"
  },
  {
    "input": "Determine if the vectors u = (1, 2, 3) and v = (-3, -6, -9) in R\u00b3 are orthogonal.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([-3, -6, -9])\ninner_product = np.dot(u, v)\nprint(\"Are u and v orthogonal?\", inner_product == 0)"
  },
  {
    "input": "Find the projection of vector v = (5, 0) onto vector u = (1, 1) in R\u00b2.",
    "output": "import numpy as np\nu = np.array([1, 1])\nv = np.array([5, 0])\nprojection = (np.dot(v, u) / np.dot(u, u)) * u\nprint(\"Projection of v onto u:\", projection)"
  },
  {
    "input": "Compute the L1 norm (Manhattan norm) of the vector v = (7, -2, 3) in R\u00b3.",
    "output": "import numpy as np\nv = np.array([7, -2, 3])\nl1_norm = np.sum(np.abs(v))\nprint(\"L1 norm of v:\", l1_norm)"
  },
  {
    "input": "Let u = (3, 4) and v = (-6, -8) in R\u00b2. Verify if they are linearly dependent.",
    "output": "import numpy as np\nu = np.array([3, 4])\nv = np.array([-6, -8])\nare_dependent = np.linalg.matrix_rank(np.vstack([u, v])) == 1\nprint(\"Are u and v linearly dependent?\", are_dependent)"
  },
  {
    "input": "In R\u00b3, compute the cosine of the angle between vectors u = (1, 0, 0) and v = (0, 1, 0).",
    "output": "import numpy as np\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nprint(\"Cosine of the angle between u and v:\", cos_theta)"
  },
  {
    "input": "Find the unit vector in the direction of v = (-3, 4) in R\u00b2.",
    "output": "import numpy as np\nv = np.array([-3, 4])\nunit_vector = v / np.linalg.norm(v)\nprint(\"Unit vector in the direction of v:\", unit_vector)"
  },
  {
    "input": "Given vectors u = (0, 1, 2) and v = (2, 0, -1) in R\u00b3, compute their cross product.",
    "output": "import numpy as np\nu = np.array([0, 1, 2])\nv = np.array([2, 0, -1])\ncross_product = np.cross(u, v)\nprint(\"Cross product of u and v:\", cross_product)"
  },
  {
    "input": "In R\u00b2, find the angle between vectors u = (1, 2) and v = (2, 3) in degrees.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([2, 3])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle_rad = np.arccos(cos_theta)\nangle_deg = np.degrees(angle_rad)\nprint(\"Angle between u and v in degrees:\", angle_deg)"
  },
  {
    "input": "Determine the orthogonal projection of v = (1, 2, 3) onto the plane defined by normal vector n = (0, 0, 1) in R\u00b3.",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\nn = np.array([0, 0, 1])\nprojection = v - (np.dot(v, n) / np.dot(n, n)) * n\nprint(\"Projection of v onto the plane:\", projection)"
  },
  {
    "input": "Compute the Frobenius norm of matrix A = [[2, -1], [-1, 2]] in R\u00b2x\u00b2.",
    "output": "import numpy as np\nA = np.array([[2, -1], [-1, 2]])\nfrobenius_norm = np.sqrt(np.sum(A**2))\nprint(\"Frobenius norm of A:\", frobenius_norm)"
  },
  {
    "input": "Given vectors u = (3, 0) and v = (0, 4) in R\u00b2, find the area of the parallelogram they span.",
    "output": "import numpy as np\nu = np.array([3, 0])\nv = np.array([0, 4])\narea = np.abs(np.cross(u, v))\nprint(\"Area of the parallelogram spanned by u and v:\", area)"
  },
  {
    "input": "In R\u00b3, verify if the vectors u = (1, 0, 0), v = (0, 1, 0), and w = (0, 0, 1) form an orthonormal set.",
    "output": "import numpy as np\n\nu = np.array([1, 0, 0])\nv = np.array([0, 1, 0])\nw = np.array([0, 0, 1])\n\n# Check pairwise orthogonality\northogonal = np.allclose(np.dot(u, v), 0) and \\\n             np.allclose(np.dot(v, w), 0) and \\\n             np.allclose(np.dot(w, u), 0)\n\n# Check each vector has unit norm\nnormalized = np.allclose(np.linalg.norm(u), 1) and \\\n             np.allclose(np.linalg.norm(v), 1) and \\\n             np.allclose(np.linalg.norm(w), 1)\n\northonormal = orthogonal and normalized\nprint(\"Is orthonormal:\", orthonormal)"
  },
  {
    "input": "Given the vector x = [4, -3, 12], compute its L2 norm.",
    "output": "import numpy as np\nx = np.array([4, -3, 12])\nnorm = np.linalg.norm(x)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Compute the L1 norm of the vector v = [-5, 3, -2, 7].",
    "output": "import numpy as np\nv = np.array([-5, 3, -2, 7])\nnorm = np.linalg.norm(v, ord=1)\nprint(\"L1 norm:\", norm)"
  },
  {
    "input": "Find the maximum norm (L-infinity norm) of the vector a = [2, -7, 6, 0].",
    "output": "import numpy as np\na = np.array([2, -7, 6, 0])\nnorm = np.linalg.norm(a, ord=np.inf)\nprint(\"L-infinity norm:\", norm)"
  },
  {
    "input": "Normalize the vector u = [3, 4].",
    "output": "import numpy as np\nu = np.array([3, 4])\nunit_vector = u / np.linalg.norm(u)\nprint(\"Normalized vector:\", unit_vector)"
  },
  {
    "input": "Compute the inner product of vectors x = [1, 2, 3] and y = [4, -1, 2].",
    "output": "import numpy as np\nx = np.array([1, 2, 3])\ny = np.array([4, -1, 2])\ninner_product = np.dot(x, y)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Check whether the vectors a = [1, 0, -1] and b = [1, 2, 1] are orthogonal.",
    "output": "import numpy as np\na = np.array([1, 0, -1])\nb = np.array([1, 2, 1])\nprint(\"Orthogonal:\", np.dot(a, b) == 0)"
  },
  {
    "input": "Given a vector v = [0, 2, -2], compute its squared norm using dot product.",
    "output": "import numpy as np\nv = np.array([0, 2, -2])\nsquared_norm = np.dot(v, v)\nprint(\"Squared norm:\", squared_norm)"
  },
  {
    "input": "Given u = [1, 2] and v = [3, 4], compute the cosine of the angle between them.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([3, 4])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nprint(\"Cosine of angle:\", cos_theta)"
  },
  {
    "input": "Check if the norm of a unit vector [1/sqrt(2), 1/sqrt(2)] is 1.",
    "output": "import numpy as np\nv = np.array([1/np.sqrt(2), 1/np.sqrt(2)])\nnorm = np.linalg.norm(v)\nprint(\"Is unit vector:\", np.isclose(norm, 1))"
  },
  {
    "input": "Find the projection of vector u = [2, 3] on vector v = [1, 0].",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([1, 0])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Given matrix A = [[1, 2], [3, 4]], compute its Frobenius norm.",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\nnorm = np.linalg.norm(A, 'fro')\nprint(\"Frobenius norm:\", norm)"
  },
  {
    "input": "Compute the inner product of u = [5, -3, 0] and v = [2, 1, 4].",
    "output": "import numpy as np\nu = np.array([5, -3, 0])\nv = np.array([2, 1, 4])\nresult = np.dot(u, v)\nprint(\"Inner product:\", result)"
  },
  {
    "input": "Determine if the vectors [2, -1] and [-2, -4] are orthogonal.",
    "output": "import numpy as np\nu = np.array([2, -1])\nv = np.array([-2, -4])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Normalize the vector x = [-1, 2, -2].",
    "output": "import numpy as np\nx = np.array([-1, 2, -2])\nnormalized = x / np.linalg.norm(x)\nprint(\"Normalized vector:\", normalized)"
  },
  {
    "input": "For a = [3, 1, 4] and b = [2, 2, 2], calculate the inner product and determine the angle between them.",
    "output": "import numpy as np\na = np.array([3, 1, 4])\nb = np.array([2, 2, 2])\ndot = np.dot(a, b)\nnorm_a = np.linalg.norm(a)\nnorm_b = np.linalg.norm(b)\nangle = np.arccos(dot / (norm_a * norm_b))\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Given v = [0, 0, 0], compute its norm and check if it's a unit vector.",
    "output": "import numpy as np\nv = np.array([0, 0, 0])\nnorm = np.linalg.norm(v)\nprint(\"Is unit vector:\", norm == 1)"
  },
  {
    "input": "Find the L2 norm of the difference between u = [4, 5] and v = [1, 1].",
    "output": "import numpy as np\nu = np.array([4, 5])\nv = np.array([1, 1])\ndiff = u - v\nprint(\"Norm of difference:\", np.linalg.norm(diff))"
  },
  {
    "input": "Verify the Cauchy-Schwarz inequality for u = [1, 2, 3] and v = [4, 5, 6].",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\ndot = np.dot(u, v)\nnorm_product = np.linalg.norm(u) * np.linalg.norm(v)\nprint(\"Cauchy-Schwarz holds:\", abs(dot) <= norm_product)"
  },
  {
    "input": "Check if L2 norm satisfies the triangle inequality for a = [1, 1] and b = [1, -1].",
    "output": "import numpy as np\na = np.array([1, 1])\nb = np.array([1, -1])\nprint(\"Triangle inequality holds:\", np.linalg.norm(a + b) <= np.linalg.norm(a) + np.linalg.norm(b))"
  },
  {
    "input": "Compute the L2 distance between vectors u = [5, 6, 7] and v = [2, 4, 6].",
    "output": "import numpy as np\nu = np.array([5, 6, 7])\nv = np.array([2, 4, 6])\ndistance = np.linalg.norm(u - v)\nprint(\"L2 distance:\", distance)"
  },
  {
    "input": "Given matrix A = [[1, -1], [1, 1]], compute its column norms.",
    "output": "import numpy as np\nA = np.array([[1, -1], [1, 1]])\ncolumn_norms = np.linalg.norm(A, axis=0)\nprint(\"Column norms:\", column_norms)"
  },
  {
    "input": "Find the L2 norm of the matrix A = [[2, 2], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 2], [1, 1]])\nnorm = np.linalg.norm(A)\nprint(\"L2 norm of matrix:\", norm)"
  },
  {
    "input": "Find the angle between the vectors a = [1, 1] and b = [1, -1] using inner product.",
    "output": "import numpy as np\na = np.array([1, 1])\nb = np.array([1, -1])\nangle = np.arccos(np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b)))\nprint(\"Angle in radians:\", angle)"
  },
  {
    "input": "Given u = [3, 4] and v = [4, 3], compute the normalized dot product.",
    "output": "import numpy as np\nu = np.array([3, 4])\nv = np.array([4, 3])\ndot_normalized = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nprint(\"Normalized dot product:\", dot_normalized)"
  },
  {
    "input": "Verify the Parallelogram Law for vectors u = [3, 4] and v = [1, 2] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([3, 4])\nv = np.array([1, 2])\nleft_side = np.linalg.norm(u + v)**2 + np.linalg.norm(u - v)**2\nright_side = 2 * (np.linalg.norm(u)**2 + np.linalg.norm(v)**2)\nprint(\"Parallelogram Law holds:\", np.isclose(left_side, right_side))"
  },
  {
    "input": "Use the Polarization Identity to compute the inner product of u = [2, -1] and v = [1, 3] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([2, -1])\nv = np.array([1, 3])\ninner_product = 0.25 * (np.linalg.norm(u + v)**2 - np.linalg.norm(u - v)**2)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by [1, 1, 0] in R\u00b3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 1, 0]])\northogonal_complement = null_space(A)\nprint(\"Orthogonal complement:\", orthogonal_complement)"
  },
  {
    "input": "Given a linear functional f(x) = 3x\u2081 - 4x\u2082 on R\u00b2, find the vector associated with f via the Riesz Representation Theorem.",
    "output": "import numpy as np\nf = np.array([3, -4])\nprint(\"Associated vector:\", f)"
  },
  {
    "input": "Verify the Cauchy\u2013Schwarz inequality for u = [1, 2, 3] and v = [4, -5, 6] in R\u00b3.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, -5, 6])\nleft_side = np.abs(np.dot(u, v))\nright_side = np.linalg.norm(u) * np.linalg.norm(v)\nprint(\"Cauchy\u2013Schwarz inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Compute the norm of the linear functional f(x) = 2x\u2081 - x\u2082 + 3x\u2083 on R\u00b3.",
    "output": "import numpy as np\nf = np.array([2, -1, 3])\nnorm_f = np.linalg.norm(f)\nprint(\"Norm of f:\", norm_f)"
  },
  {
    "input": "Show that the set of all vectors orthogonal to [1, -1, 2] in R\u00b3 forms a subspace.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, -1, 2]])\northogonal_subspace = null_space(A)\nprint(\"Orthogonal subspace basis:\", orthogonal_subspace)"
  },
  {
    "input": "Use the Polarization Identity to compute the inner product of u = [4, 0] and v = [0, 3] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([4, 0])\nv = np.array([0, 3])\ninner_product = 0.25 * (np.linalg.norm(u + v)**2 - np.linalg.norm(u - v)**2)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Find the projection of [2, 3, 4] onto the subspace orthogonal to [1, 1, 1] in R\u00b3.",
    "output": "import numpy as np\nv = np.array([2, 3, 4])\na = np.array([1, 1, 1])\nprojection = v - (np.dot(v, a) / np.dot(a, a)) * a\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the Parallelogram Law for u = [5, -2] and v = [-1, 3] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([5, -2])\nv = np.array([-1, 3])\nleft_side = np.linalg.norm(u + v)**2 + np.linalg.norm(u - v)**2\nright_side = 2 * (np.linalg.norm(u)**2 + np.linalg.norm(v)**2)\nprint(\"Parallelogram Law holds:\", np.isclose(left_side, right_side))"
  },
  {
    "input": "Compute the inner product of u = [1, 2, 3] and v = [4, 5, 6] using the Polarization Identity in R\u00b3.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\ninner_product = 0.25 * (np.linalg.norm(u + v)**2 - np.linalg.norm(u - v)**2)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by [2, -1, 3] in R\u00b3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[2, -1, 3]])\northogonal_complement = null_space(A)\nprint(\"Orthogonal complement:\", orthogonal_complement)"
  },
  {
    "input": "Given a linear functional f(x) = x\u2081 + 2x\u2082 - x\u2083 on R\u00b3, find the vector associated with f via the Riesz Representation Theorem.",
    "output": "import numpy as np\nf = np.array([1, 2, -1])\nprint(\"Associated vector:\", f)"
  },
  {
    "input": "Verify the Cauchy\u2013Schwarz inequality for u = [2, -3, 1] and v = [-1, 4, -2] in R\u00b3.",
    "output": "import numpy as np\n\nu = np.array([2, -3, 1])\nv = np.array([-1, 4, -2])\n\n# Compute both sides of the inequality\nleft_side = np.abs(np.dot(u, v))\nright_side = np.linalg.norm(u) * np.linalg.norm(v)\n\nprint(\"|<u, v>| =\", left_side)\nprint(\"||u|| * ||v|| =\", right_side)\nprint(\"Cauchy\u2013Schwarz inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Verify the Cauchy\u2013Schwarz inequality for u = [2, -3, 1] and v = [-1, 4, -2] in R\u00b3.",
    "output": "import numpy as np\n\nu = np.array([2, -3, 1])\nv = np.array([-1, 4, -2])\n\nleft_side = np.abs(np.dot(u, v))\nright_side = np.linalg.norm(u) * np.linalg.norm(v)\n\nprint(\"|\u27e8u, v\u27e9|:\", left_side)\nprint(\"||u|| * ||v||:\", right_side)\nprint(\"Cauchy\u2013Schwarz inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Verify the Minkowski inequality for u = [1, 2, 3] and v = [4, 5, 6] in R\u00b3.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, 5, 6])\nleft_side = np.linalg.norm(u + v, ord=2)\nright_side = np.linalg.norm(u, ord=2) + np.linalg.norm(v, ord=2)\nprint(\"Minkowski inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Demonstrate the Triangle Inequality for u = [-1, 4] and v = [3, -2] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([-1, 4])\nv = np.array([3, -2])\nleft_side = np.linalg.norm(u + v, ord=2)\nright_side = np.linalg.norm(u, ord=2) + np.linalg.norm(v, ord=2)\nprint(\"Triangle Inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Compute the orthogonal projection of [3, 4, 5] onto the subspace spanned by [1, 0, 0] in R\u00b3.",
    "output": "import numpy as np\nv = np.array([3, 4, 5])\na = np.array([1, 0, 0])\nprojection = (np.dot(v, a) / np.dot(a, a)) * a\nprint(\"Orthogonal projection:\", projection)"
  },
  {
    "input": "Apply the Gram-Schmidt process to orthogonalize the set {[1, 1, 0], [0, 1, 1]} in R\u00b3.",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0])\nv2 = np.array([0, 1, 1])\nu1 = v1\nu2 = v2 - (np.dot(v2, u1) / np.dot(u1, u1)) * u1\nprint(\"Orthonormal basis:\", u1 / np.linalg.norm(u1), u2 / np.linalg.norm(u2))"
  },
  {
    "input": "Verify Bessel's inequality for the vector [2, 3, 4] and the orthonormal set {[1, 0, 0], [0, 1, 0]} in R\u00b3.",
    "output": "import numpy as np\nv = np.array([2, 3, 4])\ne1 = np.array([1, 0, 0])\ne2 = np.array([0, 1, 0])\nleft_side = np.dot(v, v)\nright_side = np.dot(np.dot(v, e1), e1) + np.dot(np.dot(v, e2), e2)\nprint(\"Bessel's inequality holds:\", right_side <= left_side)"
  },
  {
    "input": "Calculate the norm of the vector [1, -2, 3, -4] in R\u2074 using the Euclidean norm.",
    "output": "import numpy as np\nv = np.array([1, -2, 3, -4])\nnorm_v = np.linalg.norm(v, ord=2)\nprint(\"Euclidean norm:\", norm_v)"
  },
  {
    "input": "Show that the set of all vectors orthogonal to both [1, 0, 0] and [0, 1, 0] in R\u00b3 forms a subspace.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 0, 0], [0, 1, 0]])\northogonal_subspace = null_space(A)\nprint(\"Orthogonal subspace basis:\", orthogonal_subspace)"
  },
  {
    "input": "Use the Polarization Identity to compute the inner product of u = [2, 3] and v = [-1, 4] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([-1, 4])\ninner_product = 0.25 * (np.linalg.norm(u + v, ord=2)**2 - np.linalg.norm(u - v, ord=2)**2)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Find the projection of [1, 2, 3] onto the line spanned by [4, 5, 6] in R\u00b3.",
    "output": "import numpy as np\nv = np.array([1, 2, 3])\na = np.array([4, 5, 6])\nprojection = (np.dot(v, a) / np.dot(a, a)) * a\nprint(\"Projection:\", projection)"
  },
  {
    "input": "Verify the Parallelogram Law for u = [2, -3] and v = [1, 4] in R\u00b2.",
    "output": "import numpy as np\nu = np.array([2, -3])\nv = np.array([1, 4])\nleft_side = np.linalg.norm(u + v, ord=2)**2 + np.linalg.norm(u - v, ord=2)**2\nright_side = 2 * (np.linalg.norm(u, ord=2)**2 + np.linalg.norm(v, ord=2)**2)\nprint(\"Parallelogram Law holds:\", np.isclose(left_side, right_side))"
  },
  {
    "input": "Compute the inner product of u = [3, 4, 5] and v = [-2, 1, 3] using the Polarization Identity in R\u00b3.",
    "output": "import numpy as np\nu = np.array([3, 4, 5])\nv = np.array([-2, 1, 3])\ninner_product = 0.25 * (np.linalg.norm(u + v, ord=2)**2 - np.linalg.norm(u - v, ord=2)**2)\nprint(\"Inner product:\", inner_product)"
  },
  {
    "input": "Find the orthogonal complement of the subspace spanned by [1, 2, 3] in R\u00b3.",
    "output": "import numpy as np\nfrom scipy.linalg import null_space\nA = np.array([[1, 2, 3]])\northogonal_complement = null_space(A)\nprint(\"Orthogonal complement:\", orthogonal_complement)"
  },
  {
    "input": "Verify the Cauchy\u2013Schwarz inequality for u = [2, -3, 1] and v = [-1, 4, -2] in R\u00b3.",
    "output": "import numpy as np\n\nu = np.array([2, -3, 1])\nv = np.array([-1, 4, -2])\n\nleft_side = np.abs(np.dot(u, v))\nright_side = np.linalg.norm(u) * np.linalg.norm(v)\n\nprint(\"|\u27e8u, v\u27e9| =\", left_side)\nprint(\"||u|| * ||v|| =\", right_side)\nprint(\"Cauchy\u2013Schwarz inequality holds:\", left_side <= right_side)"
  },
  {
    "input": "Given u = [1, 2] and v = [3, 4], verify whether the norm satisfies the triangle inequality.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([3, 4])\nleft = np.linalg.norm(u + v)\nright = np.linalg.norm(u) + np.linalg.norm(v)\nprint(\"Triangle inequality holds:\", left <= right)"
  },
  {
    "input": "Show that u = [2, -1, 3] and v = [1, 2, -1] are orthogonal using inner product.",
    "output": "import numpy as np\nu = np.array([2, -1, 3])\nv = np.array([1, 2, -1])\ndot = np.dot(u, v)\nprint(\"Orthogonal:\", np.isclose(dot, 0))"
  },
  {
    "input": "Compute the norm of vector v = [3, -4, 1].",
    "output": "import numpy as np\nv = np.array([3, -4, 1])\nnorm = np.linalg.norm(v)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Use Polarization Identity to compute \u27e8u, v\u27e9 where u = [1, 0], v = [0, 1].",
    "output": "import numpy as np\nu = np.array([1, 0])\nv = np.array([0, 1])\ninner = 0.25 * (np.linalg.norm(u + v)**2 - np.linalg.norm(u - v)**2)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Check if function \u27e8u, v\u27e9 = u\u2081v\u2081 + 2u\u2082v\u2082 is an inner product on R\u00b2.",
    "output": "def is_inner_product():\n    symmetric = (1*2 + 2*3) == (2*1 + 3*2)\n    positive_definite = (1*1 + 2*2) > 0\n    print(\"Inner product:\", symmetric and positive_definite)\nis_inner_product()"
  },
  {
    "input": "Find the projection of u = [1, 2, 3] onto v = [4, -1, 2].",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([4, -1, 2])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Determine if w = [2, 4, -6] lies in the orthogonal complement of span{[1, 2, -3]}.",
    "output": "import numpy as np\nw = np.array([2, 4, -6])\nv = np.array([1, 2, -3])\ndot = np.dot(w, v)\nprint(\"In orthogonal complement:\", np.isclose(dot, 0))"
  },
  {
    "input": "Check if ||au|| = |a| ||u|| holds for a = -2 and u = [1, -1].",
    "output": "import numpy as np\na = -2\nu = np.array([1, -1])\nholds = np.isclose(np.linalg.norm(a * u), abs(a) * np.linalg.norm(u))\nprint(\"Scaling property holds:\", holds)"
  },
  {
    "input": "Find the angle \u03b8 between u = [1, 0] and v = [1, 1].",
    "output": "import numpy as np\nu = np.array([1, 0])\nv = np.array([1, 1])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle = np.arccos(cos_theta)\nprint(\"Angle in degrees:\", np.degrees(angle))"
  },
  {
    "input": "Find norm induced by inner product \u27e8u,v\u27e9 = u\u2081v\u2081 + 3u\u2082v\u2082 on vector [2, 1].",
    "output": "import numpy as np\nu = np.array([2, 1])\nnorm = np.sqrt(u[0]**2 + 3 * u[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Use Cauchy\u2013Schwarz inequality to bound |\u27e8u,v\u27e9| for u = [1, 2], v = [-2, 4].",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([-2, 4])\nleft = abs(np.dot(u, v))\nright = np.linalg.norm(u) * np.linalg.norm(v)\nprint(\"CS inequality holds:\", left <= right)"
  },
  {
    "input": "Verify if \u27e8u,v\u27e9 = u\u2081v\u2081 + u\u2082v\u2082 - u\u2083v\u2083 defines an inner product on R\u00b3.",
    "output": "def test_inner():\n    u = [1, 0, 1]\n    inner = u[0]**2 + u[1]**2 - u[2]**2\n    print(\"Positive definite:\", inner > 0)\ntest_inner()"
  },
  {
    "input": "Given norm ||x|| = sqrt(x\u2081\u00b2 + x\u2082\u00b2), verify it satisfies the triangle inequality for x = [3, 4], y = [1, -2].",
    "output": "import numpy as np\nx = np.array([3, 4])\ny = np.array([1, -2])\nprint(\"Triangle inequality:\", np.linalg.norm(x + y) <= np.linalg.norm(x) + np.linalg.norm(y))"
  },
  {
    "input": "Given vectors u = [2, 3], v = [1, 1], compute projection of u on v.",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([1, 1])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Compute the norm of f(x) = x\u2081 - 2x\u2082 + 3x\u2083 in R\u00b3 using Riesz Representation.",
    "output": "import numpy as np\nf = np.array([1, -2, 3])\nprint(\"Norm of functional:\", np.linalg.norm(f))"
  },
  {
    "input": "Check if u = [1, 2] is unit vector under norm ||x|| = sqrt(x\u2081\u00b2 + x\u2082\u00b2).",
    "output": "import numpy as np\nu = np.array([1, 2])\nprint(\"Is unit vector:\", np.isclose(np.linalg.norm(u), 1))"
  },
  {
    "input": "Find the unit vector in the direction of u = [-2, 2, 1].",
    "output": "import numpy as np\nu = np.array([-2, 2, 1])\nunit = u / np.linalg.norm(u)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Compute \u27e8u,v\u27e9 where u = [3, 1, 0] and v = [1, 0, -1].",
    "output": "import numpy as np\nu = np.array([3, 1, 0])\nv = np.array([1, 0, -1])\nprint(\"Inner product:\", np.dot(u, v))"
  },
  {
    "input": "Given inner product \u27e8u,v\u27e9 = u\u2081v\u2081 + u\u2082v\u2082 + 4u\u2083v\u2083, find induced norm for u = [0, 2, 1].",
    "output": "import numpy as np\nu = np.array([0, 2, 1])\nnorm = np.sqrt(u[0]**2 + u[1]**2 + 4 * u[2]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Check orthogonality of u = [1, 2, 3], v = [-2, -1, 0] using dot product.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([-2, -1, 0])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Prove ||x||\u00b2 = \u27e8x,x\u27e9 for x = [4, 3, 0].",
    "output": "import numpy as np\nx = np.array([4, 3, 0])\nprint(\"Norm squared equals inner product:\", np.isclose(np.linalg.norm(x)**2, np.dot(x, x)))"
  },
  {
    "input": "Is \u27e8u,v\u27e9 = 2u\u2081v\u2081 + u\u2082v\u2082 a valid inner product in R\u00b2?",
    "output": "def check():\n u, v = [1,2], [3,4]\n lhs = 2*u[0]*v[0] + u[1]*v[1]\n rhs = 2*v[0]*u[0] + v[1]*u[1]\n print(\"Symmetric:\", lhs == rhs)\ncheck()"
  },
  {
    "input": "Find angle between vectors [2, 2] and [1, -1].",
    "output": "import numpy as np\nu = np.array([2, 2])\nv = np.array([1, -1])\nangle = np.arccos(np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v)))\nprint(\"Angle (deg):\", np.degrees(angle))"
  },
  {
    "input": "Use Riesz Representation Theorem to write functional f(x) = 4x\u2081 + x\u2082 in vector form.",
    "output": "import numpy as np\nf = np.array([4, 1])\nprint(\"Vector representation:\", f)"
  },
  {
    "input": "Compute the L\u00b9-norm of vector v = [3, -4, 5].",
    "output": "import numpy as np\nv = np.array([3, -4, 5])\nnorm = np.sum(np.abs(v))\nprint(\"L1 norm:\", norm)"
  },
  {
    "input": "Compute the L\u221e-norm of vector v = [-1, 7, -3].",
    "output": "import numpy as np\nv = np.array([-1, 7, -3])\nnorm = np.max(np.abs(v))\nprint(\"L-infinity norm:\", norm)"
  },
  {
    "input": "Find the Euclidean norm of vector u = [0, -3, 4].",
    "output": "import numpy as np\nu = np.array([0, -3, 4])\nnorm = np.linalg.norm(u)\nprint(\"Euclidean norm:\", norm)"
  },
  {
    "input": "Verify if the function ||x|| = sqrt(x\u2081\u00b2 + x\u2082\u00b2 + x\u2083\u00b2) is a norm on R\u00b3.",
    "output": "def is_norm(x):\n return all([\n     x == [0, 0, 0] or np.linalg.norm(x) > 0,\n     np.linalg.norm([-a for a in x]) == np.linalg.norm(x),\n     np.linalg.norm([a*2 for a in x]) == 2 * np.linalg.norm(x)\n ])\nprint(\"Is norm:\", is_norm([1, 2, 3]))"
  },
  {
    "input": "Find inner product \u27e8u, v\u27e9 where u = [2, 2], v = [3, -3].",
    "output": "import numpy as np\nu = np.array([2, 2])\nv = np.array([3, -3])\ninner = np.dot(u, v)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Check if u = [1, 0, 1], v = [-1, 0, 1] are orthogonal.",
    "output": "import numpy as np\nu = np.array([1, 0, 1])\nv = np.array([-1, 0, 1])\nprint(\"Orthogonal:\", np.isclose(np.dot(u, v), 0))"
  },
  {
    "input": "Given u = [1, 1], compute its projection on v = [2, 0].",
    "output": "import numpy as np\nu = np.array([1, 1])\nv = np.array([2, 0])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Using Gram-Schmidt, orthogonalize vectors u1 = [1, 1], u2 = [1, 0].",
    "output": "import numpy as np\nu1 = np.array([1, 1])\nu2 = np.array([1, 0])\nv1 = u1\nproj = (np.dot(u2, v1) / np.dot(v1, v1)) * v1\nv2 = u2 - proj\nprint(\"Orthogonal vector v2:\", v2)"
  },
  {
    "input": "Find distance between u = [1, 1] and v = [4, 5] using norm.",
    "output": "import numpy as np\nu = np.array([1, 1])\nv = np.array([4, 5])\ndistance = np.linalg.norm(u - v)\nprint(\"Distance:\", distance)"
  },
  {
    "input": "Find cosine of angle between u = [1, 2], v = [2, 3].",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([2, 3])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nprint(\"Cosine:\", cos_theta)"
  },
  {
    "input": "Verify Pythagoras Theorem for u = [2, 1], v = [-1, 2].",
    "output": "import numpy as np\nu = np.array([2, 1])\nv = np.array([-1, 2])\nprint(\"Pythagoras holds:\", np.isclose(np.linalg.norm(u + v)**2, np.linalg.norm(u)**2 + np.linalg.norm(v)**2))"
  },
  {
    "input": "Is f(x) = 3x\u2081 - x\u2082 + 2x\u2083 a continuous linear functional on R\u00b3?",
    "output": "print(\"Yes, f(x) is a linear combination of coordinates, so it's continuous and linear.\")"
  },
  {
    "input": "Given \u27e8u,v\u27e9 = u\u2081v\u2081 + 2u\u2082v\u2082, find norm of u = [3, 1].",
    "output": "import numpy as np\nu = np.array([3, 1])\nnorm = np.sqrt(u[0]**2 + 2*u[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Prove norm is zero iff vector is zero for v = [0, 0, 0].",
    "output": "import numpy as np\nv = np.array([0, 0, 0])\nprint(\"Zero norm iff zero vector:\", np.linalg.norm(v) == 0)"
  },
  {
    "input": "Check if \u27e8u,v\u27e9 = u\u2081v\u2081 + 2u\u2082v\u2082 - u\u2081v\u2082 is symmetric.",
    "output": "def check_sym():\n u = [1, 2]; v = [3, 4]\n a = u[0]*v[0] + 2*u[1]*v[1] - u[0]*v[1]\n b = v[0]*u[0] + 2*v[1]*u[1] - v[0]*u[1]\n print(\"Symmetric:\", a == b)\ncheck_sym()"
  },
  {
    "input": "Given u = [2, 3], v = [1, 4], compute ||u - v||\u00b2.",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([1, 4])\ndiff = u - v\nprint(\"Squared distance:\", np.dot(diff, diff))"
  },
  {
    "input": "Is \u27e8u,v\u27e9 = u\u2081v\u2081 + u\u2082v\u2082 + u\u2081v\u2082 an inner product?",
    "output": "print(\"No, fails symmetry as \u27e8u,v\u27e9 \u2260 \u27e8v,u\u27e9 generally.\")"
  },
  {
    "input": "Given orthogonal vectors u = [1, 2], v = [-4, 2], show their dot product is 0.",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([-4, 2])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Calculate inner product in function space: \u27e8f,g\u27e9 = \u222b\u2080\u00b9 f(x)g(x) dx for f(x)=x, g(x)=x\u00b2.",
    "output": "from scipy.integrate import quad\nf = lambda x: x\ng = lambda x: x**2\nresult, _ = quad(lambda x: f(x)*g(x), 0, 1)\nprint(\"Inner product:\", result)"
  },
  {
    "input": "Normalize vector u = [5, 12].",
    "output": "import numpy as np\nu = np.array([5, 12])\nunit = u / np.linalg.norm(u)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Find component of u = [2, 3] along v = [1, 0].",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([1, 0])\ncomponent = np.dot(u, v) / np.linalg.norm(v)\nprint(\"Component:\", component)"
  },
  {
    "input": "Check if norm ||x|| = max(|x\u2081|, |x\u2082|) satisfies triangle inequality.",
    "output": "import numpy as np\nx = np.array([2, -3])\ny = np.array([-1, 4])\nprint(\"Triangle inequality:\", np.max(np.abs(x + y)) <= np.max(np.abs(x)) + np.max(np.abs(y)))"
  },
  {
    "input": "Determine if vector u = [1, 1] and v = [-1, 1] form an orthonormal set.",
    "output": "import numpy as np\nu = np.array([1, 1]) / np.sqrt(2)\nv = np.array([-1, 1]) / np.sqrt(2)\nprint(\"Orthonormal:\", np.isclose(np.linalg.norm(u), 1) and np.isclose(np.linalg.norm(v), 1) and np.isclose(np.dot(u, v), 0))"
  },
  {
    "input": "Compute norm of linear transformation T(x) = 2x in R\u00b9.",
    "output": "import numpy as np\nx = 1\nT = lambda x: 2 * x\nnorm = abs(T(x)) / abs(x)\nprint(\"Operator norm:\", norm)"
  },
  {
    "input": "Apply Gram-Schmidt on vectors [1, 1, 0] and [1, 0, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0])\nv2 = np.array([1, 0, 1])\nu1 = v1\nu2 = v2 - (np.dot(v2, u1)/np.dot(u1, u1))*u1\nprint(\"Ortho vector:\", u2)"
  },
  {
    "input": "Check triangle inequality for ||x||\u221e with x = [2, -3] and y = [-1, 4].",
    "output": "import numpy as np\nx = np.array([2, -3])\ny = np.array([-1, 4])\nleft = np.max(np.abs(x + y))\nright = np.max(np.abs(x)) + np.max(np.abs(y))\nprint(\"Triangle inequality holds:\", left <= right)"
  },
  {
    "input": "Find angle between u = [1, 0], v = [1, 1] in degrees.",
    "output": "import numpy as np\nu = np.array([1, 0])\nv = np.array([1, 1])\ncos_theta = np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v))\nangle = np.degrees(np.arccos(cos_theta))\nprint(\"Angle (degrees):\", angle)"
  },
  {
    "input": "Determine whether the vectors [3, 1] and [-2, 6] are orthogonal.",
    "output": "import numpy as np\nu = np.array([3, 1])\nv = np.array([-2, 6])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Compute norm induced by \u27e8u,v\u27e9 = 2u\u2081v\u2081 + 3u\u2082v\u2082 for u = [2, -1].",
    "output": "import numpy as np\nu = np.array([2, -1])\nnorm = np.sqrt(2*u[0]**2 + 3*u[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Show that norm of vector v = [4, -3] is same as sqrt of dot product with itself.",
    "output": "import numpy as np\nv = np.array([4, -3])\nprint(\"Norm via dot product:\", np.sqrt(np.dot(v, v)))"
  },
  {
    "input": "Given u = [1, 1], v = [1, -1], verify \u27e8u, v\u27e9 = 0 implies orthogonality.",
    "output": "import numpy as np\nu = np.array([1, 1])\nv = np.array([1, -1])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Normalize the vector [7, 24].",
    "output": "import numpy as np\nv = np.array([7, 24])\nunit = v / np.linalg.norm(v)\nprint(\"Normalized vector:\", unit)"
  },
  {
    "input": "Compute L1 norm of vector [-2, 0, 4, -3].",
    "output": "import numpy as np\nv = np.array([-2, 0, 4, -3])\nnorm = np.sum(np.abs(v))\nprint(\"L1 norm:\", norm)"
  },
  {
    "input": "Verify if \u27e8u, v\u27e9 = u\u2081v\u2081 + u\u2082v\u2082 is bilinear.",
    "output": "print(\"Yes, standard dot product is bilinear.\")"
  },
  {
    "input": "Compute Euclidean norm of vector [1, -2, 2, -1].",
    "output": "import numpy as np\nv = np.array([1, -2, 2, -1])\nnorm = np.linalg.norm(v)\nprint(\"Euclidean norm:\", norm)"
  },
  {
    "input": "Check homogeneity: Is ||2x|| = 2||x|| for x = [3, 4]?",
    "output": "import numpy as np\nx = np.array([3, 4])\nprint(\"Homogeneity holds:\", np.isclose(np.linalg.norm(2*x), 2*np.linalg.norm(x)))"
  },
  {
    "input": "Use Gram-Schmidt to orthogonalize u1 = [1, 0, 1], u2 = [1, 1, 1].",
    "output": "import numpy as np\nu1 = np.array([1, 0, 1])\nu2 = np.array([1, 1, 1])\nv1 = u1\nproj = (np.dot(u2, v1) / np.dot(v1, v1)) * v1\nv2 = u2 - proj\nprint(\"v2:\", v2)"
  },
  {
    "input": "Find squared norm of u = [2, 3] using \u27e8u,u\u27e9.",
    "output": "import numpy as np\nu = np.array([2, 3])\nsquared_norm = np.dot(u, u)\nprint(\"Squared norm:\", squared_norm)"
  },
  {
    "input": "Check if norm ||x|| = |x\u2081| + |x\u2082| is subadditive.",
    "output": "import numpy as np\nx = np.array([3, -4])\ny = np.array([-1, 5])\nleft = np.sum(np.abs(x + y))\nright = np.sum(np.abs(x)) + np.sum(np.abs(y))\nprint(\"Subadditive:\", left <= right)"
  },
  {
    "input": "Compute inner product \u27e8f, g\u27e9 where f(x)=sin(x), g(x)=cos(x) on [0, \u03c0/2].",
    "output": "from scipy.integrate import quad\nfrom numpy import sin, cos\nresult, _ = quad(lambda x: sin(x)*cos(x), 0, np.pi/2)\nprint(\"Inner product:\", result)"
  },
  {
    "input": "Find projection of u = [2, 2] onto v = [1, 1].",
    "output": "import numpy as np\nu = np.array([2, 2])\nv = np.array([1, 1])\nproj = (np.dot(u, v) / np.dot(v, v)) * v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Compute ||x|| where x = [1, -1, 2, -2] under max norm.",
    "output": "import numpy as np\nx = np.array([1, -1, 2, -2])\nnorm = np.max(np.abs(x))\nprint(\"Max norm:\", norm)"
  },
  {
    "input": "Are vectors u = [2, 0], v = [1, 1] orthogonal?",
    "output": "import numpy as np\nu = np.array([2, 0])\nv = np.array([1, 1])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Find unit vector in direction of u = [-5, 12].",
    "output": "import numpy as np\nu = np.array([-5, 12])\nunit = u / np.linalg.norm(u)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Given vectors a = [1, 2], b = [2, 1], compute \u27e8a, b\u27e9 in inner product space with weight matrix W = [[2, 0], [0, 3]].",
    "output": "import numpy as np\na = np.array([1, 2])\nb = np.array([2, 1])\nW = np.array([[2, 0], [0, 3]])\ninner = np.dot(a.T, np.dot(W, b))\nprint(\"Weighted inner product:\", inner)"
  },
  {
    "input": "Show that ||u + v||\u00b2 = ||u||\u00b2 + ||v||\u00b2 if u \u27c2 v; use u = [1, 0], v = [0, 2].",
    "output": "import numpy as np\nu = np.array([1, 0])\nv = np.array([0, 2])\nleft = np.linalg.norm(u + v)**2\nright = np.linalg.norm(u)**2 + np.linalg.norm(v)**2\nprint(\"Pythagoras holds:\", np.isclose(left, right))"
  },
  {
    "input": "Calculate distance between vectors a = [1, 2] and b = [4, 6] using 2-norm.",
    "output": "import numpy as np\na = np.array([1, 2])\nb = np.array([4, 6])\nd = np.linalg.norm(a - b)\nprint(\"Distance:\", d)"
  },
  {
    "input": "Determine whether f(x) = ||x||\u00b2 is convex for x in R\u00b2.",
    "output": "print(\"Yes, squared norm is convex as it satisfies Jensen\u2019s inequality.\")"
  },
  {
    "input": "Find norm of u = [2, -3, 6] under L2 norm.",
    "output": "import numpy as np\nu = np.array([2, -3, 6])\nnorm = np.linalg.norm(u)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Determine whether f(x)=x and g(x)=x^2 are orthogonal on [\u22121,1] using \u27e8f,g\u27e9=\u222b(\u22121 to 1) f(x)g(x) dx.",
    "output": "from scipy.integrate import quad\nf = lambda x: x\ng = lambda x: x**2\ninner, _ = quad(lambda x: f(x)*g(x), -1, 1)\nprint(\"Orthogonal:\", inner == 0)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize vectors u1 = [1, 1, 0], u2 = [1, 0, 1].",
    "output": "import numpy as np\nu1 = np.array([1, 1, 0])\nu2 = np.array([1, 0, 1])\nv1 = u1 / np.linalg.norm(u1)\nproj = np.dot(u2, v1) * v1\nv2 = u2 - proj\nv2 = v2 / np.linalg.norm(v2)\nprint(\"Orthonormal vectors:\", v1, v2)"
  },
  {
    "input": "Prove that inner product is symmetric for a = [1,2], b = [3,4].",
    "output": "import numpy as np\na = np.array([1,2])\nb = np.array([3,4])\nprint(\"Symmetric:\", np.dot(a,b) == np.dot(b,a))"
  },
  {
    "input": "Find norm induced by inner product \u27e8x, y\u27e9 = 4x\u2081y\u2081 + 2x\u2082y\u2082 for x = [2,3].",
    "output": "import numpy as np\nx = np.array([2,3])\nnorm = np.sqrt(4*x[0]**2 + 2*x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Compute inner product of polynomials f(x)=x and g(x)=x^3 on [0,1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x*x**3, 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Check if ||x|| = \u221a(x\u2081\u00b2 + x\u2082\u00b2 + x\u2081x\u2082) defines a norm.",
    "output": "print(\"Check positive-definiteness, homogeneity, triangle inequality.\")"
  },
  {
    "input": "Calculate projection of a = [2, 4] on b = [1, 1].",
    "output": "import numpy as np\na = np.array([2, 4])\nb = np.array([1, 1])\nproj = (np.dot(a,b)/np.dot(b,b)) * b\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Verify that standard inner product in R\u00b2 satisfies \u27e8x,x\u27e9 \u2265 0 and equals 0 iff x=0.",
    "output": "import numpy as np\nx = np.array([3, 4])\nprint(\"Non-negativity:\", np.dot(x,x) >= 0, \"; Equals zero iff x = 0\")"
  },
  {
    "input": "Compute ||x||\u221e for x = [-1, 5, 2, -4].",
    "output": "import numpy as np\nx = np.array([-1, 5, 2, -4])\nprint(\"Infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Show that projection of u on v is orthogonal to u \u2212 projection.",
    "output": "import numpy as np\nu = np.array([2, 3])\nv = np.array([1, 1])\nproj = (np.dot(u,v)/np.dot(v,v)) * v\northo = u - proj\nprint(\"Orthogonal to projection:\", np.dot(ortho, proj) == 0)"
  },
  {
    "input": "Given a = [3,4], b = [4,3], find angle between them in degrees.",
    "output": "import numpy as np\na = np.array([3,4])\nb = np.array([4,3])\ncos_theta = np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b))\nangle = np.degrees(np.arccos(cos_theta))\nprint(\"Angle:\", angle)"
  },
  {
    "input": "Calculate norm of f(x)=x^2 on [0,1] under L2 norm.",
    "output": "from scipy.integrate import quad\nfrom numpy import sqrt\nf = lambda x: x**2\nsquared_norm, _ = quad(lambda x: f(x)**2, 0, 1)\nprint(\"L2 norm:\", sqrt(squared_norm))"
  },
  {
    "input": "Find L1 norm of vector [1, -2, 3, -4].",
    "output": "import numpy as np\nx = np.array([1, -2, 3, -4])\nprint(\"L1 norm:\", np.sum(np.abs(x)))"
  },
  {
    "input": "Are [1,2] and [\u22122,1] orthogonal?",
    "output": "import numpy as np\nu = np.array([1,2])\nv = np.array([-2,1])\nprint(\"Orthogonal:\", np.dot(u,v)==0)"
  },
  {
    "input": "Normalize vector [6, 8].",
    "output": "import numpy as np\nx = np.array([6, 8])\nunit = x / np.linalg.norm(x)\nprint(\"Normalized:\", unit)"
  },
  {
    "input": "Determine if norm ||x|| = max{|x\u2081|, |x\u2082|} satisfies triangle inequality.",
    "output": "import numpy as np\nx = np.array([2, -1])\ny = np.array([-1, 3])\nprint(\"Triangle inequality:\", np.max(np.abs(x + y)) <= np.max(np.abs(x)) + np.max(np.abs(y)))"
  },
  {
    "input": "Verify linearity in first argument for \u27e8x,y\u27e9 = x\u1d40y using x1=[1,2], x2=[2,1], y=[3,4].",
    "output": "import numpy as np\nx1 = np.array([1,2])\nx2 = np.array([2,1])\ny = np.array([3,4])\na, b = 2, 3\nlhs = np.dot(a*x1 + b*x2, y)\nrhs = a*np.dot(x1, y) + b*np.dot(x2, y)\nprint(\"Linearity holds:\", lhs == rhs)"
  },
  {
    "input": "Find induced norm using \u27e8x,y\u27e9 = x\u2081y\u2081 + 4x\u2082y\u2082 for x = [1, 2].",
    "output": "import numpy as np\nx = np.array([1, 2])\nnorm = np.sqrt(np.dot(x, [1, 8]))\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Compute angle between vectors u = [5, 0] and v = [0, 12].",
    "output": "import numpy as np\nu = np.array([5, 0])\nv = np.array([0, 12])\ncos_theta = np.dot(u, v)/(np.linalg.norm(u)*np.linalg.norm(v))\nangle = np.degrees(np.arccos(cos_theta))\nprint(\"Angle:\", angle)"
  },
  {
    "input": "For f(x)=x^2, compute norm over [\u22121,1] in L2 space.",
    "output": "from scipy.integrate import quad\nfrom numpy import sqrt\nf = lambda x: x**2\nsquared_norm, _ = quad(lambda x: f(x)**2, -1, 1)\nprint(\"L2 norm:\", sqrt(squared_norm))"
  },
  {
    "input": "Verify symmetry: \u27e8f, g\u27e9 = \u27e8g, f\u27e9 for f(x)=x and g(x)=x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\nf = lambda x: x\ng = lambda x: x**2\nip1, _ = quad(lambda x: f(x)*g(x), 0, 1)\nip2, _ = quad(lambda x: g(x)*f(x), 0, 1)\nprint(\"Symmetric:\", ip1 == ip2)"
  },
  {
    "input": "Check orthogonality of vectors [1,2,3] and [3,2,1].",
    "output": "import numpy as np\na = np.array([1,2,3])\nb = np.array([3,2,1])\nprint(\"Orthogonal:\", np.dot(a,b) == 0)"
  },
  {
    "input": "Is ||x|| = |x\u2081 \u2212 x\u2082| a norm on R\u00b2?",
    "output": "print(\"Not a valid norm: does not satisfy triangle inequality in general.\")"
  },
  {
    "input": "Find projection of f(x)=x^2 on g(x)=x on [0,1].",
    "output": "from scipy.integrate import quad\nnum, _ = quad(lambda x: x**3, 0, 1)\nden, _ = quad(lambda x: x**2, 0, 1)\nprint(\"Projection scalar:\", num/den)"
  },
  {
    "input": "Check if the vectors [1, 1, 0] and [1, -1, 0] are orthogonal under standard dot product.",
    "output": "import numpy as np\nu = np.array([1, 1, 0])\nv = np.array([1, -1, 0])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Find L2 norm of vector [1, 3, 5].",
    "output": "import numpy as np\nv = np.array([1, 3, 5])\nprint(\"L2 norm:\", np.linalg.norm(v))"
  },
  {
    "input": "Compute ||x||\u2081 and ||x||\u221e for x = [4, -3, 2, -7].",
    "output": "import numpy as np\nx = np.array([4, -3, 2, -7])\nprint(\"L1 norm:\", np.sum(np.abs(x)))\nprint(\"Infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Compute inner product \u27e8x, y\u27e9 for x = [2, 0, -1], y = [-1, 4, 3].",
    "output": "import numpy as np\nx = np.array([2, 0, -1])\ny = np.array([-1, 4, 3])\nprint(\"Inner product:\", np.dot(x, y))"
  },
  {
    "input": "Find unit vector in direction of v = [3, -4].",
    "output": "import numpy as np\nv = np.array([3, -4])\nunit_v = v / np.linalg.norm(v)\nprint(\"Unit vector:\", unit_v)"
  },
  {
    "input": "Verify positive-definiteness of norm ||x||\u2082 using vector [2, -3].",
    "output": "import numpy as np\nx = np.array([2, -3])\nnorm = np.linalg.norm(x)\nprint(\"Positive-definite:\", norm >= 0 and (norm == 0) == np.all(x == 0))"
  },
  {
    "input": "Is \u27e8f,g\u27e9 = \u222b(0 to 1) f(x)g(x) dx an inner product on C[0,1]?",
    "output": "print(\"Yes, it satisfies linearity, symmetry, and positive-definiteness.\")"
  },
  {
    "input": "Apply Gram-Schmidt to vectors [1, 2], [3, 4].",
    "output": "import numpy as np\nv1 = np.array([1, 2])\nv2 = np.array([3, 4])\ne1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, e1) * e1\ne2 = v2 - proj\ne2 = e2 / np.linalg.norm(e2)\nprint(\"Orthonormal basis:\", e1, e2)"
  },
  {
    "input": "Find projection of x = [1, 2, 3] on y = [1, 0, -1].",
    "output": "import numpy as np\nx = np.array([1, 2, 3])\ny = np.array([1, 0, -1])\nproj = (np.dot(x, y) / np.dot(y, y)) * y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Check triangle inequality for vectors u = [1, 2], v = [2, -1].",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([2, -1])\nprint(\"Triangle inequality holds:\", np.linalg.norm(u + v) <= np.linalg.norm(u) + np.linalg.norm(v))"
  },
  {
    "input": "Find induced norm from inner product \u27e8x,y\u27e9 = x\u2081y\u2081 + 9x\u2082y\u2082 for x = [2, 1].",
    "output": "import numpy as np\nx = np.array([2, 1])\nnorm = np.sqrt(np.dot(x, [2, 9]))\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Evaluate \u27e8f,g\u27e9 = \u222b(0 to 1) f(x)g(x) dx for f(x)=sin(x), g(x)=cos(x).",
    "output": "from scipy.integrate import quad\nimport numpy as np\ninner, _ = quad(lambda x: np.sin(x)*np.cos(x), 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Verify ||a+b||\u00b2 = ||a||\u00b2 + ||b||\u00b2 for orthogonal a=[1,0], b=[0,2].",
    "output": "import numpy as np\na = np.array([1, 0])\nb = np.array([0, 2])\nprint(\"Pythagorean identity:\", np.linalg.norm(a + b)**2 == np.linalg.norm(a)**2 + np.linalg.norm(b)**2)"
  },
  {
    "input": "Compute cosine similarity between a = [2, 3], b = [3, 2].",
    "output": "import numpy as np\na = np.array([2, 3])\nb = np.array([3, 2])\ncos_sim = np.dot(a, b)/(np.linalg.norm(a)*np.linalg.norm(b))\nprint(\"Cosine similarity:\", cos_sim)"
  },
  {
    "input": "Determine if x = [2, -1], y = [-1, 2] are orthogonal.",
    "output": "import numpy as np\nx = np.array([2, -1])\ny = np.array([-1, 2])\nprint(\"Orthogonal:\", np.dot(x, y) == 0)"
  },
  {
    "input": "Calculate ||x||\u2082 for x = [7, 24].",
    "output": "import numpy as np\nx = np.array([7, 24])\nprint(\"Euclidean norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Compute L2 norm of f(x)=e^x on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nf = lambda x: np.exp(x)\nsq_norm, _ = quad(lambda x: f(x)**2, 0, 1)\nprint(\"L2 norm:\", np.sqrt(sq_norm))"
  },
  {
    "input": "Use Gram-Schmidt on vectors u1=[1,1,1], u2=[1,0,1], u3=[0,0,1].",
    "output": "import numpy as np\nu1 = np.array([1,1,1])\nu2 = np.array([1,0,1])\nu3 = np.array([0,0,1])\ne1 = u1/np.linalg.norm(u1)\nproj2 = np.dot(u2, e1)*e1\ne2 = u2 - proj2\ne2 /= np.linalg.norm(e2)\nproj3 = np.dot(u3, e1)*e1 + np.dot(u3, e2)*e2\ne3 = u3 - proj3\ne3 /= np.linalg.norm(e3)\nprint(\"Orthonormal basis:\", e1, e2, e3)"
  },
  {
    "input": "Compute angle between a = [1, 2], b = [2, 3] in radians.",
    "output": "import numpy as np\na = np.array([1,2])\nb = np.array([2,3])\nangle = np.arccos(np.dot(a, b)/(np.linalg.norm(a)*np.linalg.norm(b)))\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Find distance between vectors x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1, 2])\ny = np.array([3, 4])\nprint(\"Distance:\", np.linalg.norm(x - y))"
  },
  {
    "input": "For inner product \u27e8x,y\u27e9 = 2x\u2081y\u2081 + 3x\u2082y\u2082, compute ||x|| for x=[3,4].",
    "output": "import numpy as np\nx = np.array([3,4])\nnorm = np.sqrt(2*x[0]**2 + 3*x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Check whether norm ||x|| = |x\u2081| + |2x\u2082| is valid.",
    "output": "print(\"Check all three norm properties: positivity, scalability, triangle inequality\")"
  },
  {
    "input": "Verify if \u27e8x,y\u27e9 = x\u2081y\u2082 + x\u2082y\u2081 defines an inner product.",
    "output": "print(\"It is symmetric but not positive definite, so it's NOT a valid inner product.\")"
  },
  {
    "input": "Find the L1 norm of function f(x) = |x| over interval [\u22121, 1].",
    "output": "from scipy.integrate import quad\nf = lambda x: abs(x)\narea, _ = quad(f, -1, 1)\nprint(\"L1 norm:\", area)"
  },
  {
    "input": "Verify Cauchy-Schwarz inequality for u = [1, 2], v = [3, 4].",
    "output": "import numpy as np\nu = np.array([1, 2])\nv = np.array([3, 4])\nleft = abs(np.dot(u, v))\nright = np.linalg.norm(u) * np.linalg.norm(v)\nprint(\"Cauchy-Schwarz holds:\", left <= right)"
  },
  {
    "input": "Compute the projection of a = [2, 3] on b = [1, 1].",
    "output": "import numpy as np\na = np.array([2, 3])\nb = np.array([1, 1])\nproj = (np.dot(a, b)/np.dot(b, b)) * b\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Find the orthogonal component of [2, 2] with respect to [1, 0].",
    "output": "import numpy as np\nv = np.array([2, 2])\nu = np.array([1, 0])\nproj = (np.dot(v, u)/np.dot(u, u)) * u\northogonal_component = v - proj\nprint(\"Orthogonal component:\", orthogonal_component)"
  },
  {
    "input": "Use Gram-Schmidt on [1, 0], [1, 1], [1, 2].",
    "output": "import numpy as np\nu1 = np.array([1, 0])\nu2 = np.array([1, 1])\nu3 = np.array([1, 2])\ne1 = u1 / np.linalg.norm(u1)\nproj2 = np.dot(u2, e1) * e1\ne2 = u2 - proj2\ne2 = e2 / np.linalg.norm(e2)\nproj3 = np.dot(u3, e1)*e1 + np.dot(u3, e2)*e2\ne3 = u3 - proj3\ne3 = e3 / np.linalg.norm(e3)\nprint(\"Orthonormal basis:\", e1, e2, e3)"
  },
  {
    "input": "Calculate the L1 norm of x = [-3, 4, -5, 6].",
    "output": "import numpy as np\nx = np.array([-3, 4, -5, 6])\nprint(\"L1 norm:\", np.sum(np.abs(x)))"
  },
  {
    "input": "Compute ||x||_\u221e for x = [1, -9, 3, 4].",
    "output": "import numpy as np\nx = np.array([1, -9, 3, 4])\nprint(\"Infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Check if vectors [1, 2, 3] and [3, -2, 1] are orthogonal.",
    "output": "import numpy as np\nu = np.array([1, 2, 3])\nv = np.array([3, -2, 1])\nprint(\"Orthogonal:\", np.dot(u, v) == 0)"
  },
  {
    "input": "Compute induced norm from \u27e8x,y\u27e9 = 5x\u2081y\u2081 + 2x\u2082y\u2082 for x = [2, 3].",
    "output": "import numpy as np\nx = np.array([2, 3])\nnorm = np.sqrt(5 * x[0]**2 + 2 * x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Evaluate inner product of polynomials x\u00b2 and 1 on [0, 1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x**2 * 1, 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Find cosine of angle between a = [1, 1, 1] and b = [1, -1, 0].",
    "output": "import numpy as np\na = np.array([1, 1, 1])\nb = np.array([1, -1, 0])\ncos_theta = np.dot(a, b)/(np.linalg.norm(a)*np.linalg.norm(b))\nprint(\"Cosine:\", cos_theta)"
  },
  {
    "input": "Normalize the vector [4, -3].",
    "output": "import numpy as np\nv = np.array([4, -3])\nunit_v = v / np.linalg.norm(v)\nprint(\"Normalized vector:\", unit_v)"
  },
  {
    "input": "Find inner product \u27e8f,g\u27e9 where f(x)=x, g(x)=x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x * x**2, 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Determine norm ||f||\u2082 for f(x) = sin(pi*x) on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm_sq, _ = quad(lambda x: np.sin(np.pi*x)**2, 0, 1)\nprint(\"L2 norm:\", np.sqrt(norm_sq))"
  },
  {
    "input": "Verify parallelogram law for u = [2,1], v = [1,2].",
    "output": "import numpy as np\nu = np.array([2, 1])\nv = np.array([1, 2])\nleft = np.linalg.norm(u+v)**2 + np.linalg.norm(u-v)**2\nright = 2*np.linalg.norm(u)**2 + 2*np.linalg.norm(v)**2\nprint(\"Parallelogram Law holds:\", np.isclose(left, right))"
  },
  {
    "input": "Show that norm of x = [0,0] is zero under any norm.",
    "output": "import numpy as np\nx = np.array([0,0])\nprint(\"Zero norm (L2):\", np.linalg.norm(x))"
  },
  {
    "input": "Check if ||\u03b1x|| = |\u03b1| ||x|| for \u03b1 = -3, x = [2,2].",
    "output": "import numpy as np\nx = np.array([2, 2])\n\u03b1 = -3\nlhs = np.linalg.norm(\u03b1*x)\nrhs = abs(\u03b1) * np.linalg.norm(x)\nprint(\"Scalar multiplication property:\", np.isclose(lhs, rhs))"
  },
  {
    "input": "Find orthonormal basis for [1,2], [2,4] using Gram-Schmidt.",
    "output": "import numpy as np\nu1 = np.array([1, 2])\nu2 = np.array([2, 4])\ne1 = u1 / np.linalg.norm(u1)\nproj = np.dot(u2, e1)*e1\ne2 = u2 - proj\nprint(\"Linear dependence:\", np.allclose(e2, 0))"
  },
  {
    "input": "Compute norm from inner product \u27e8x,y\u27e9 = x\u1d40Ay, A=diag(2,3), x=[1,2].",
    "output": "import numpy as np\nx = np.array([1,2])\nA = np.diag([2,3])\nnorm = np.sqrt(np.dot(x, A.dot(x)))\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Compute \u27e8x,y\u27e9 where x = [1, -1], y = [2, 2] under dot product.",
    "output": "import numpy as np\nx = np.array([1, -1])\ny = np.array([2, 2])\nprint(\"Inner product:\", np.dot(x, y))"
  },
  {
    "input": "Find distance between vectors [0,0,1] and [1,1,0].",
    "output": "import numpy as np\nx = np.array([0, 0, 1])\ny = np.array([1, 1, 0])\nprint(\"Distance:\", np.linalg.norm(x - y))"
  },
  {
    "input": "Verify norm positivity: ||x|| \u2265 0 for x = [-5, 12].",
    "output": "import numpy as np\nx = np.array([-5, 12])\nprint(\"Norm is positive:\", np.linalg.norm(x) >= 0)"
  },
  {
    "input": "Evaluate ||x+y||\u00b2 for x=[1,2], y=[2,1] and compare with ||x||\u00b2+||y||\u00b2.",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,1])\nprint(\"LHS:\", np.linalg.norm(x+y)**2)\nprint(\"RHS:\", np.linalg.norm(x)**2 + np.linalg.norm(y)**2)"
  },
  {
    "input": "Find projection of x=[2,1] onto unit vector y=[1/sqrt(2), 1/sqrt(2)].",
    "output": "import numpy as np\nx = np.array([2,1])\ny = np.array([1/np.sqrt(2), 1/np.sqrt(2)])\nproj = np.dot(x, y) * y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Is the set {[1,0], [1,1]} orthogonal?",
    "output": "import numpy as np\na = np.array([1, 0])\nb = np.array([1, 1])\nprint(\"Orthogonal:\", np.dot(a, b) == 0)"
  },
  {
    "input": "Evaluate ||x+y||\u00b2 for x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nresult = np.linalg.norm(x+y)**2\nprint(\"||x+y||\u00b2:\", result)"
  },
  {
    "input": "Check if unit vectors u=[1/\u221a2, 1/\u221a2], v=[1/\u221a2, -1/\u221a2] are orthogonal.",
    "output": "import numpy as np\nu = np.array([1/np.sqrt(2), 1/np.sqrt(2)])\nv = np.array([1/np.sqrt(2), -1/np.sqrt(2)])\nprint(\"Orthogonal:\", np.isclose(np.dot(u, v), 0))"
  },
  {
    "input": "Find the L2 norm of vector x = [0.6, 0.8].",
    "output": "import numpy as np\nx = np.array([0.6, 0.8])\nprint(\"L2 norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Normalize function f(x)=x on interval [0,1] using L2 norm.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm_sq, _ = quad(lambda x: x**2, 0, 1)\nnorm = np.sqrt(norm_sq)\nprint(\"Normalized function: f(x)/norm with norm =\", norm)"
  },
  {
    "input": "Check if \u27e8x,x\u27e9 = 0 implies x = 0 for x = [0,0].",
    "output": "import numpy as np\nx = np.array([0,0])\nprint(\"<x,x> = 0 implies x=0:\", np.dot(x,x)==0 and np.all(x==0))"
  },
  {
    "input": "Compute norm induced by inner product \u27e8x,y\u27e9=4x\u2081y\u2081 + x\u2082y\u2082, x=[2,1].",
    "output": "import numpy as np\nx = np.array([2,1])\nnorm = np.sqrt(4*x[0]**2 + x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Find projection of v=[1,2,3] on u=[1,0,0].",
    "output": "import numpy as np\nv = np.array([1,2,3])\nu = np.array([1,0,0])\nproj = (np.dot(v,u)/np.dot(u,u)) * u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Determine angle between vectors a=[0,1] and b=[1,0].",
    "output": "import numpy as np\na = np.array([0,1])\nb = np.array([1,0])\nangle = np.arccos(np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b)))\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Check Cauchy-Schwarz for x=[1,2,2], y=[2,0,1].",
    "output": "import numpy as np\nx = np.array([1,2,2])\ny = np.array([2,0,1])\nleft = abs(np.dot(x,y))\nright = np.linalg.norm(x) * np.linalg.norm(y)\nprint(\"Cauchy-Schwarz holds:\", left <= right)"
  },
  {
    "input": "Find inner product of vectors [2, -1] and [-1, 2].",
    "output": "import numpy as np\nx = np.array([2, -1])\ny = np.array([-1, 2])\nprint(\"Inner product:\", np.dot(x, y))"
  },
  {
    "input": "Compute L1 norm of x = [5, -7, 2].",
    "output": "import numpy as np\nx = np.array([5, -7, 2])\nprint(\"L1 norm:\", np.sum(np.abs(x)))"
  },
  {
    "input": "Compute \u221e-norm of x = [-1, 4, -3].",
    "output": "import numpy as np\nx = np.array([-1, 4, -3])\nprint(\"Infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Check norm subadditivity ||x+y|| \u2264 ||x|| + ||y|| for x=[3,4], y=[-1,2].",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([-1,2])\nprint(\"Subadditivity:\", np.linalg.norm(x+y) <= np.linalg.norm(x)+np.linalg.norm(y))"
  },
  {
    "input": "Compute inner product of sin(x) and cos(x) on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nimport numpy as np\ninner, _ = quad(lambda x: np.sin(x)*np.cos(x), 0, np.pi)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Find projection of [4,2] on [1,1].",
    "output": "import numpy as np\nv = np.array([4,2])\nu = np.array([1,1])\nproj = (np.dot(v, u)/np.dot(u,u)) * u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Verify that inner product is symmetric for x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nprint(\"Symmetric:\", np.dot(x,y) == np.dot(y,x))"
  },
  {
    "input": "Use Gram-Schmidt on [1,1,0], [1,0,1].",
    "output": "import numpy as np\na = np.array([1,1,0])\nb = np.array([1,0,1])\ne1 = a / np.linalg.norm(a)\nproj = np.dot(b, e1)*e1\ne2 = b - proj\ne2 = e2 / np.linalg.norm(e2)\nprint(\"Orthonormal basis:\", e1, e2)"
  },
  {
    "input": "Find cosine similarity between x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\ncos_sim = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nprint(\"Cosine similarity:\", cos_sim)"
  },
  {
    "input": "Evaluate \u27e8x,x\u27e9 for x = [1,2,3].",
    "output": "import numpy as np\nx = np.array([1,2,3])\nprint(\"<x,x>:\", np.dot(x,x))"
  },
  {
    "input": "Check if [1,2] and [2,-1] are orthogonal.",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,-1])\nprint(\"Orthogonal:\", np.dot(x,y)==0)"
  },
  {
    "input": "Compute induced norm from \u27e8x,y\u27e9 = x\u2081y\u2081 + 4x\u2082y\u2082 for x = [1,2].",
    "output": "import numpy as np\nx = np.array([1,2])\nnorm = np.sqrt(x[0]**2 + 4*x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Evaluate inner product of x\u00b2 and x\u00b3 on [0,1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x**5, 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Normalize vector [2, 2, 1].",
    "output": "import numpy as np\nx = np.array([2,2,1])\nunit = x / np.linalg.norm(x)\nprint(\"Normalized vector:\", unit)"
  },
  {
    "input": "Find norm of vector [0,3,4] using Euclidean norm.",
    "output": "import numpy as np\nx = np.array([0,3,4])\nprint(\"Norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Compute L2 norm of function f(x) = x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nintegral, _ = quad(lambda x: x**4, 0, 1)\nnorm = np.sqrt(integral)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Determine if vectors [1,1,1] and [1,-1,0] are orthogonal.",
    "output": "import numpy as np\na = np.array([1,1,1])\nb = np.array([1,-1,0])\nprint(\"Orthogonal:\", np.dot(a,b)==0)"
  },
  {
    "input": "Find inner product of polynomials f(x)=x and g(x)=x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x**3, 0, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Check triangle inequality for x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nprint(\"Triangle inequality:\", np.linalg.norm(x+y) <= np.linalg.norm(x) + np.linalg.norm(y))"
  },
  {
    "input": "Compute cosine of angle between a=[1,0,0] and b=[1,1,0].",
    "output": "import numpy as np\na = np.array([1,0,0])\nb = np.array([1,1,0])\ncos_theta = np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b))\nprint(\"Cosine:\", cos_theta)"
  },
  {
    "input": "Find norm induced by inner product \u27e8x,y\u27e9=2x\u2081y\u2081+3x\u2082y\u2082, x=[1,2].",
    "output": "import numpy as np\nx = np.array([1,2])\nnorm = np.sqrt(2*x[0]**2 + 3*x[1]**2)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Compute projection of [2,3] on [1,1].",
    "output": "import numpy as np\nv = np.array([2,3])\nu = np.array([1,1])\nproj = (np.dot(v,u)/np.dot(u,u)) * u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Evaluate \u27e8x,y\u27e9 where x = [0,1], y = [1,1].",
    "output": "import numpy as np\nx = np.array([0,1])\ny = np.array([1,1])\nprint(\"Inner product:\", np.dot(x, y))"
  },
  {
    "input": "Calculate L1 norm of vector [1, -2, 3].",
    "output": "import numpy as np\nx = np.array([1, -2, 3])\nprint(\"L1 norm:\", np.sum(np.abs(x)))"
  },
  {
    "input": "Compute norm of vector [6,8] using L2 norm.",
    "output": "import numpy as np\nx = np.array([6,8])\nprint(\"L2 norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Is vector [0,0,0] orthogonal to [1,2,3]?",
    "output": "import numpy as np\nx = np.array([0,0,0])\ny = np.array([1,2,3])\nprint(\"Orthogonal:\", np.dot(x,y)==0)"
  },
  {
    "input": "Find unit vector in direction of [4,0,3].",
    "output": "import numpy as np\nx = np.array([4,0,3])\nunit = x / np.linalg.norm(x)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Verify \u27e8x,x\u27e9 \u2265 0 for x = [-1,2].",
    "output": "import numpy as np\nx = np.array([-1,2])\nprint(\"\u27e8x,x\u27e9 \u2265 0:\", np.dot(x,x) >= 0)"
  },
  {
    "input": "Compute norm of function f(x) = 1 on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: 1, 0, 1)[0])\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Evaluate inner product of x=[2,1] and y=[-1,2].",
    "output": "import numpy as np\nx = np.array([2,1])\ny = np.array([-1,2])\nprint(\"Inner product:\", np.dot(x,y))"
  },
  {
    "input": "Calculate \u221e-norm of [-2, 5, -3, 4].",
    "output": "import numpy as np\nx = np.array([-2, 5, -3, 4])\nprint(\"Infinity norm:\", np.max(np.abs(x)))"
  },
  {
    "input": "Check symmetry of inner product for [3,2] and [1,4].",
    "output": "import numpy as np\nx = np.array([3,2])\ny = np.array([1,4])\nprint(\"Symmetric:\", np.dot(x,y) == np.dot(y,x))"
  },
  {
    "input": "Find cosine similarity between [2,3] and [4,5].",
    "output": "import numpy as np\nx = np.array([2,3])\ny = np.array([4,5])\ncos_sim = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nprint(\"Cosine similarity:\", cos_sim)"
  },
  {
    "input": "Check if vector [3,4] is unit vector.",
    "output": "import numpy as np\nx = np.array([3,4])\nprint(\"Is unit:\", np.isclose(np.linalg.norm(x), 1))"
  },
  {
    "input": "Normalize function f(x)=x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: x**4, 0, 1)[0])\nprint(\"Normalized f(x): f(x)/norm with norm =\", norm)"
  },
  {
    "input": "Find projection of [1,1,1] on [0,1,0].",
    "output": "import numpy as np\nv = np.array([1,1,1])\nu = np.array([0,1,0])\nproj = (np.dot(v,u)/np.dot(u,u)) * u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Evaluate inner product on [0,\u03c0] of sin\u00b2(x).",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: np.sin(x)**2, 0, np.pi)\nprint(\"Inner product:\", val)"
  },
  {
    "input": "Compute L2 norm of x = [1,1,1,1].",
    "output": "import numpy as np\nx = np.ones(4)\nprint(\"L2 norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Check orthogonality of [2,2] and [2,-2].",
    "output": "import numpy as np\nx = np.array([2,2])\ny = np.array([2,-2])\nprint(\"Orthogonal:\", np.dot(x,y)==0)"
  },
  {
    "input": "Compute norm of vector [1,2,2] with inner product \u27e8x,y\u27e9=x\u2081y\u2081+x\u2082y\u2082+2x\u2083y\u2083.",
    "output": "import numpy as np\nx = np.array([1,2,2])\nnorm = np.sqrt(x[0]**2 + x[1]**2 + 2*x[2]**2)\nprint(\"Custom norm:\", norm)"
  },
  {
    "input": "Prove whether ||x + y||\u00b2 + ||x - y||\u00b2 = 2||x||\u00b2 + 2||y||\u00b2 holds for x=[3,1], y=[1,2].",
    "output": "import numpy as np\nx = np.array([3,1])\ny = np.array([1,2])\nleft = np.linalg.norm(x+y)**2 + np.linalg.norm(x-y)**2\nright = 2*np.linalg.norm(x)**2 + 2*np.linalg.norm(y)**2\nprint(\"Identity holds:\", np.isclose(left, right))"
  },
  {
    "input": "Find the angle (in degrees) between [1,2,2] and [2,0,1].",
    "output": "import numpy as np\nx = np.array([1,2,2])\ny = np.array([2,0,1])\ncos_theta = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nangle = np.degrees(np.arccos(cos_theta))\nprint(\"Angle:\", angle)"
  },
  {
    "input": "Given ||x||=3, ||y||=4 and \u27e8x,y\u27e9=6, compute ||x - y||\u00b2.",
    "output": "norm_sq = 3**2 + 4**2 - 2*6\nprint(\"||x - y||\u00b2:\", norm_sq)"
  },
  {
    "input": "Find distance from point (1,2) to line through origin in direction (3,4).",
    "output": "import numpy as np\np = np.array([1,2])\nd = np.array([3,4])\nproj = (np.dot(p,d)/np.dot(d,d)) * d\ndist = np.linalg.norm(p - proj)\nprint(\"Distance:\", dist)"
  },
  {
    "input": "Verify Cauchy-Schwarz inequality for [1,2,3] and [-1,0,1].",
    "output": "import numpy as np\na = np.array([1,2,3])\nb = np.array([-1,0,1])\ndot = np.dot(a,b)\nprod_norms = np.linalg.norm(a)*np.linalg.norm(b)\nprint(\"Holds:\", abs(dot) <= prod_norms)"
  },
  {
    "input": "Given \u27e8f,g\u27e9 = \u222b\u2080\u00b9 f(x)g(x)dx, check if f=x and g=2x\u22121 are orthogonal.",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x*(2*x - 1), 0, 1)\nprint(\"Orthogonal:\", np.isclose(inner, 0))"
  },
  {
    "input": "Compute Gram-Schmidt orthonormal basis for vectors [1,1] and [1,0].",
    "output": "import numpy as np\nx = np.array([1,1], dtype=float)\ny = np.array([1,0], dtype=float)\ne1 = x/np.linalg.norm(x)\nproj = np.dot(y,e1)*e1\ne2 = (y - proj)/np.linalg.norm(y - proj)\nprint(\"Basis:\", e1, e2)"
  },
  {
    "input": "Find L2 norm of f(x)=sin(x) on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: np.sin(x)**2, 0, np.pi)\nnorm = np.sqrt(val)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Compute orthogonal projection of f(x)=x on subspace spanned by g(x)=1 over [0,1].",
    "output": "from scipy.integrate import quad\nnum, _ = quad(lambda x: x*1, 0, 1)\nden, _ = quad(lambda x: 1, 0, 1)\nc = num/den\nprint(\"Projection function is f\u0302(x) =\", c)"
  },
  {
    "input": "Given vectors x=[3,4], find scalar \u03bb such that x and x\u2212\u03bb[1,1] are orthogonal.",
    "output": "import numpy as np\nx = np.array([3,4])\na = np.array([1,1])\n# \u27e8x, x - \u03bba\u27e9 = 0 \u21d2 x\u00b7x - \u03bb x\u00b7a = 0\nlam = np.dot(x,x)/np.dot(x,a)\nprint(\"Lambda:\", lam)"
  },
  {
    "input": "Find value of a such that vectors [1,a] and [a,1] are orthogonal.",
    "output": "import sympy as sp\na = sp.Symbol('a')\ndot = 1*a + a*1\nsolution = sp.solve(dot, a)\nprint(\"Value of a:\", solution)"
  },
  {
    "input": "Find inner product \u27e8f,g\u27e9 with f(x)=x\u00b2, g(x)=x\u00b3 over [\u22121,1].",
    "output": "from scipy.integrate import quad\ninner, _ = quad(lambda x: x**5, -1, 1)\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Check if the function space with inner product \u27e8f,g\u27e9=\u222b f(x)g(x)dx satisfies linearity.",
    "output": "from sympy import symbols, integrate\nx = symbols('x')\nf = x\nh = 2*x\nalpha = 3\ng = 1\nip1 = integrate((alpha*f + h)*g, (x, 0, 1))\nip2 = alpha*integrate(f*g, (x,0,1)) + integrate(h*g, (x,0,1))\nprint(\"Linearity holds:\", ip1 == ip2)"
  },
  {
    "input": "If \u27e8x,y\u27e9 = 0 and x \u2260 0, prove that ||x+y||\u00b2 = ||x||\u00b2 + ||y||\u00b2.",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,2])\nlhs = np.linalg.norm(x+y)**2\nrhs = np.linalg.norm(x)**2 + np.linalg.norm(y)**2\nprint(\"Parallelogram law:\", np.isclose(lhs, rhs))"
  },
  {
    "input": "Find orthogonal component of [3,2] w.r.t subspace spanned by [1,1].",
    "output": "import numpy as np\nv = np.array([3,2])\nu = np.array([1,1])\nproj = (np.dot(v,u)/np.dot(u,u)) * u\north = v - proj\nprint(\"Orthogonal component:\", orth)"
  },
  {
    "input": "Given \u27e8x,y\u27e9 = x\u1d40Ay with A=[[2,0],[0,3]], compute induced norm of x=[1,1].",
    "output": "import numpy as np\nx = np.array([1,1])\nA = np.array([[2,0],[0,3]])\nnorm = np.sqrt(np.dot(x, A @ x))\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "For f(x)=x, find closest constant function to f(x) in L\u00b2[0,1].",
    "output": "from scipy.integrate import quad\nc = quad(lambda x: x, 0, 1)[0]\nprint(\"Best constant approximation:\", c)"
  },
  {
    "input": "Compute L2 norm of f(x)=e^x on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: np.exp(2*x), 0, 1)\nprint(\"L2 norm:\", np.sqrt(val))"
  },
  {
    "input": "If \u27e8f,g\u27e9=0 in L\u00b2[0,1] and ||f||=1, ||g||=2, what is ||f+g||?",
    "output": "import numpy as np\nnorm = np.sqrt(1**2 + 2**2)\nprint(\"||f+g||:\", norm)"
  },
  {
    "input": "Determine if norm satisfies ||x||=0 \u21d2 x=0 for x=[0,0].",
    "output": "import numpy as np\nx = np.array([0,0])\nprint(\"Holds:\", np.linalg.norm(x)==0 and np.all(x==0))"
  },
  {
    "input": "Compute L2 norm of f(x) = x\u00b3 on interval [-1, 1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: x**6, -1, 1)\nnorm = np.sqrt(val)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Is the mapping \u27e8x,y\u27e9 = x\u2081y\u2081 \u2212 x\u2082y\u2082 an inner product?",
    "output": "import numpy as np\ndef is_positive_definite():\n for a in range(-2,3):\n  for b in range(-2,3):\n   v = np.array([a,b])\n   if np.dot(v,[v[0],-v[1]]) < 0: return False\n return True\nprint(\"Valid inner product:\", is_positive_definite())"
  },
  {
    "input": "Find inner product of functions f(x)=1, g(x)=cos(\u03c0x) on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: np.cos(np.pi*x), 0, 1)\nprint(\"Inner product:\", val)"
  },
  {
    "input": "Determine best approximation of f(x)=x\u00b2 by ax on [0,1].",
    "output": "from scipy.integrate import quad\na = quad(lambda x: x**3, 0, 1)[0]/quad(lambda x: x**2, 0, 1)[0]\nprint(\"Best a:\", a)"
  },
  {
    "input": "Find the norm induced by inner product \u27e8x,y\u27e9 = x\u1d40Ay where A = [[4,0],[0,9]] and x = [2,1].",
    "output": "import numpy as np\nx = np.array([2,1])\nA = np.array([[4,0],[0,9]])\nnorm = np.sqrt(x @ A @ x)\nprint(\"Induced norm:\", norm)"
  },
  {
    "input": "Check orthogonality of x=[1,2,1] and y=[2,0,-2] using dot product.",
    "output": "import numpy as np\nx = np.array([1,2,1])\ny = np.array([2,0,-2])\nprint(\"Orthogonal:\", np.dot(x,y)==0)"
  },
  {
    "input": "Compute angle between [3,-1,2] and [1,4,-2] in radians.",
    "output": "import numpy as np\na = np.array([3,-1,2])\nb = np.array([1,4,-2])\nangle = np.arccos(np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b)))\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Prove that inner product \u27e8f,g\u27e9 = \u222b\u2080\u00b9 f(x)g(x)dx is symmetric using f=x, g=x\u00b2.",
    "output": "from scipy.integrate import quad\ninner_fg = quad(lambda x: x*x**2, 0, 1)[0]\ninner_gf = quad(lambda x: x**2*x, 0, 1)[0]\nprint(\"Symmetric:\", np.isclose(inner_fg, inner_gf))"
  },
  {
    "input": "Find projection of [2,3] onto [1,2].",
    "output": "import numpy as np\na = np.array([2,3])\nb = np.array([1,2])\nproj = (np.dot(a,b)/np.dot(b,b)) * b\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Compute norm of matrix A = [[1,2],[3,4]] under Frobenius norm.",
    "output": "import numpy as np\nA = np.array([[1,2],[3,4]])\nnorm = np.linalg.norm(A, 'fro')\nprint(\"Frobenius norm:\", norm)"
  },
  {
    "input": "Let f(x)=cos(x), g(x)=sin(x) on [0,\u03c0]. Are they orthogonal in L\u00b2?",
    "output": "from scipy.integrate import quad\nimport numpy as np\nval, _ = quad(lambda x: np.cos(x)*np.sin(x), 0, np.pi)\nprint(\"Orthogonal:\", np.isclose(val, 0))"
  },
  {
    "input": "Find unit vector in direction of v = [5,12].",
    "output": "import numpy as np\nv = np.array([5,12])\nunit = v / np.linalg.norm(v)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Check triangle inequality ||x + y|| \u2264 ||x|| + ||y|| for x=[1,2], y=[2,-1].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,-1])\nprint(\"Inequality holds:\", np.linalg.norm(x+y) <= np.linalg.norm(x) + np.linalg.norm(y))"
  },
  {
    "input": "Find L1 norm of vector [1,\u22122,3].",
    "output": "import numpy as np\nv = np.array([1,-2,3])\nnorm = np.linalg.norm(v, 1)\nprint(\"L1 norm:\", norm)"
  },
  {
    "input": "Find L\u221e norm of vector [\u22124,2,7,\u22121].",
    "output": "import numpy as np\nv = np.array([-4,2,7,-1])\nnorm = np.linalg.norm(v, np.inf)\nprint(\"L\u221e norm:\", norm)"
  },
  {
    "input": "Compute \u27e8x,y\u27e9 with x=[1,2], y=[2,5] in R\u00b2.",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,5])\nprint(\"Inner product:\", np.dot(x,y))"
  },
  {
    "input": "Given u=[1,2], v=[3,4], compute Gram-Schmidt orthogonal basis.",
    "output": "import numpy as np\nu = np.array([1,2])\nv = np.array([3,4])\ne1 = u / np.linalg.norm(u)\nproj = np.dot(v, e1) * e1\ne2 = (v - proj) / np.linalg.norm(v - proj)\nprint(\"Orthonormal basis:\", e1, e2)"
  },
  {
    "input": "If \u27e8x,y\u27e9=x\u1d40y and ||x||=2, ||y||=3, \u27e8x,y\u27e9=6, find angle between x and y.",
    "output": "import numpy as np\ncos_theta = 6/(2*3)\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Verify parallelogram identity for a=[2,1], b=[1,2].",
    "output": "import numpy as np\na = np.array([2,1])\nb = np.array([1,2])\nleft = np.linalg.norm(a + b)**2 + np.linalg.norm(a - b)**2\nright = 2*np.linalg.norm(a)**2 + 2*np.linalg.norm(b)**2\nprint(\"Identity holds:\", np.isclose(left, right))"
  },
  {
    "input": "Compute cosine similarity between vectors [1,2,3] and [4,5,6].",
    "output": "import numpy as np\na = np.array([1,2,3])\nb = np.array([4,5,6])\nsim = np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b))\nprint(\"Cosine similarity:\", sim)"
  },
  {
    "input": "Find vector orthogonal to both [1,0,1] and [0,1,1].",
    "output": "import numpy as np\n\na = np.array([1, 0, 1])\nb = np.array([0, 1, 1])\n\north = np.cross(a, b)\nprint(\"Orthogonal vector:\", orth)"
  },
  {
    "input": "Check if [1,1,1] is orthogonal to [1,\u22121,0].",
    "output": "import numpy as np\nprint(\"Orthogonal:\", np.dot([1,1,1],[1,-1,0]) == 0)"
  },
  {
    "input": "Let x=[1,2], y=[-2,1]. Find \u27e8x,y\u27e9 and interpret geometrically.",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([-2,1])\ndot = np.dot(x,y)\nprint(\"Inner product (dot):\", dot, \"\u2192 Orthogonal\" if dot==0 else \"\u2192 Not orthogonal\")"
  },
  {
    "input": "Find distance between points a=[3,4] and b=[0,0] using norm.",
    "output": "import numpy as np\na = np.array([3,4])\ndist = np.linalg.norm(a - [0,0])\nprint(\"Distance:\", dist)"
  },
  {
    "input": "Given vectors x=[1,2,3], y=[2,1,1], compute projection of x onto y.",
    "output": "import numpy as np\nx = np.array([1,2,3])\ny = np.array([2,1,1])\nproj = (np.dot(x,y)/np.dot(y,y)) * y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Evaluate \u222b\u2080\u00b9 (x\u00b2)(1) dx and check if x\u00b2 and 1 are orthogonal.",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: x**2 * 1, 0, 1)[0]\nprint(\"Inner product:\", ip, \"\u2192 Orthogonal\" if np.isclose(ip, 0) else \"\u2192 Not orthogonal\")"
  },
  {
    "input": "Is matrix A=[[1,2],[2,1]] symmetric and positive definite?",
    "output": "import numpy as np\nA = np.array([[1,2],[2,1]])\neigvals = np.linalg.eigvals(A)\nprint(\"Symmetric:\", np.allclose(A, A.T), \", Positive definite:\", np.all(eigvals > 0))"
  },
  {
    "input": "If \u27e8f,g\u27e9 = 0 and ||f||=2, ||g||=1, compute ||f + 2g||.",
    "output": "import numpy as np\nnorm = np.sqrt(2**2 + (2*1)**2)\nprint(\"Norm:\", norm)"
  },
  {
    "input": "Is matrix A=[[1,2],[2,1]] symmetric and positive definite?",
    "output": "import numpy as np\nA = np.array([[1,2],[2,1]])\nsymmetric = np.allclose(A, A.T)\neigvals = np.linalg.eigvals(A)\npos_def = np.all(eigvals > 0)\nprint(\"Symmetric:\", symmetric, \"Positive Definite:\", pos_def)"
  },
  {
    "input": "Let u=[1,1,1], v=[-1,0,1], w=[0,1,\u22121]. Check if u is orthogonal to v+w.",
    "output": "import numpy as np\nu = np.array([1,1,1])\nv = np.array([-1,0,1])\nw = np.array([0,1,-1])\nprint(\"Orthogonal:\", np.dot(u, v+w) == 0)"
  },
  {
    "input": "Find the L2 norm of the vector x=[1, 2, 2].",
    "output": "import numpy as np\nx = np.array([1,2,2])\nnorm = np.linalg.norm(x)\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "For vector v=[3,\u22124], compute normalized vector using L2 norm.",
    "output": "import numpy as np\nv = np.array([3,-4])\nunit = v / np.linalg.norm(v)\nprint(\"Normalized vector:\", unit)"
  },
  {
    "input": "Let x=[1,2], y=[3,4]. Compute inner product and norm of x+y.",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\ninner = np.dot(x,y)\nsum_norm = np.linalg.norm(x + y)\nprint(\"Inner product:\", inner, \"Norm of x+y:\", sum_norm)"
  },
  {
    "input": "Prove Cauchy-Schwarz inequality using vectors x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nleft = abs(np.dot(x,y))\nright = np.linalg.norm(x) * np.linalg.norm(y)\nprint(\"Cauchy-Schwarz holds:\", left <= right)"
  },
  {
    "input": "Given A = [[1, 2], [2, 5]], x = [1, 0], compute ||x||_A.",
    "output": "import numpy as np\nA = np.array([[1,2],[2,5]])\nx = np.array([1,0])\nnorm = np.sqrt(x @ A @ x)\nprint(\"Norm induced by A:\", norm)"
  },
  {
    "input": "Check orthonormality of vectors u=[1/\u221a2,1/\u221a2], v=[1/\u221a2,\u22121/\u221a2].",
    "output": "import numpy as np\nu = np.array([1/np.sqrt(2),1/np.sqrt(2)])\nv = np.array([1/np.sqrt(2),-1/np.sqrt(2)])\northogonal = np.dot(u,v) == 0\nunit_u = np.isclose(np.linalg.norm(u),1)\nunit_v = np.isclose(np.linalg.norm(v),1)\nprint(\"Orthonormal:\", orthogonal and unit_u and unit_v)"
  },
  {
    "input": "Determine if x=[2,\u22121,0] and y=[4,\u22122,1] are linearly dependent.",
    "output": "import numpy as np\nx = np.array([2,-1,0])\ny = np.array([4,-2,1])\nprint(\"Linearly dependent:\", np.linalg.matrix_rank(np.stack((x,y))) < 2)"
  },
  {
    "input": "Compute projection of u=[1,2,2] onto v=[2,0,1].",
    "output": "import numpy as np\nu = np.array([1,2,2])\nv = np.array([2,0,1])\nproj = (np.dot(u,v)/np.dot(v,v))*v\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Let f(x)=x, g(x)=1 on [0,2]. Compute \u27e8f,g\u27e9 and ||f||.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nip = quad(lambda x: x*1, 0, 2)[0]\nnorm = np.sqrt(quad(lambda x: x**2, 0, 2)[0])\nprint(\"Inner product:\", ip, \"Norm of f:\", norm)"
  },
  {
    "input": "Is x=[1,2,3] orthogonal to y=[2,\u22121,0]?",
    "output": "import numpy as np\nprint(\"Orthogonal:\", np.dot([1,2,3], [2,-1,0]) == 0)"
  },
  {
    "input": "Given x=[1,1], y=[1,\u22121], compute their angle in degrees.",
    "output": "import numpy as np\nx = np.array([1,1])\ny = np.array([1,-1])\nangle = np.arccos(np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y)))\nprint(\"Angle (degrees):\", np.degrees(angle))"
  },
  {
    "input": "Find orthogonal projection of f(x)=x\u00b2 onto g(x)=x on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\ndef f(x): return x**2\ndef g(x): return x\nnum = quad(lambda x: f(x)*g(x), 0, 1)[0]\nden = quad(lambda x: g(x)*g(x), 0, 1)[0]\ncoeff = num/den\nprint(\"Projection coefficient:\", coeff)"
  },
  {
    "input": "Given x=[1,2,3], compute projection onto subspace spanned by u=[1,1,1].",
    "output": "import numpy as np\nx = np.array([1,2,3])\nu = np.array([1,1,1])\nproj = (np.dot(x,u)/np.dot(u,u))*u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Verify if ||x+y||\u00b2 = ||x||\u00b2 + ||y||\u00b2 holds for x=[1,0], y=[0,1].",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,1])\nlhs = np.linalg.norm(x+y)**2\nrhs = np.linalg.norm(x)**2 + np.linalg.norm(y)**2\nprint(\"Equality holds:\", np.isclose(lhs, rhs))"
  },
  {
    "input": "Given x=[1,2], compute projection onto unit vector u=[1/\u221a5,2/\u221a5].",
    "output": "import numpy as np\nx = np.array([1,2])\nu = np.array([1/np.sqrt(5),2/np.sqrt(5)])\nproj = np.dot(x,u)*u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Is matrix A=[[2,\u22121],[\u22121,2]] positive definite?",
    "output": "import numpy as np\nA = np.array([[2,-1],[-1,2]])\neigs = np.linalg.eigvals(A)\nprint(\"Positive definite:\", np.all(eigs > 0))"
  },
  {
    "input": "Compute L2 norm of polynomial f(x)=3x\u00b2\u22122x on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: (3*x**2 - 2*x)**2, 0, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Are vectors [1,0,1], [0,1,0], [1,1,1] linearly independent?",
    "output": "import numpy as np\nA = np.array([[1,0,1],[0,1,1],[1,0,1]]).T\nprint(\"Linearly independent:\", np.linalg.matrix_rank(A)==3)"
  },
  {
    "input": "If f(x)=sin(x), g(x)=cos(x), find \u27e8f,g\u27e9 on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nip = quad(lambda x: np.sin(x)*np.cos(x), 0, np.pi)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Let x=[3,4], find projection onto y=[4,\u22123].",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([4,-3])\nproj = (np.dot(x,y)/np.dot(y,y))*y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Are [1,1,1] and [1,\u22121,1] orthogonal in \u211d\u00b3?",
    "output": "import numpy as np\nprint(\"Orthogonal:\", np.dot([1,1,1],[1,-1,1]) == 0)"
  },
  {
    "input": "Compute unit vector of [7,24] and confirm L2 norm = 1.",
    "output": "import numpy as np\nv = np.array([7,24])\nu = v/np.linalg.norm(v)\nprint(\"Unit vector:\", u, \"Norm:\", np.linalg.norm(u))"
  },
  {
    "input": "If f(x)=sin(x), g(x)=cos(x), find \u27e8f,g\u27e9 on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: np.sin(x)*np.cos(x), 0, np.pi)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Find orthonormal basis of span{[1,1,0], [1,0,1]} using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([1,1,0])\nv2 = np.array([1,0,1])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(\"Orthonormal basis:\", u1, u2)"
  },
  {
    "input": "Check if the matrix A=[[4,1],[1,3]] is symmetric and orthogonal.",
    "output": "import numpy as np\nA = np.array([[4,1],[1,3]])\nsymmetric = np.allclose(A, A.T)\northogonal = np.allclose(A.T @ A, np.eye(2))\nprint(\"Symmetric:\", symmetric, \"Orthogonal:\", orthogonal)"
  },
  {
    "input": "Given x=[3,4], verify triangle inequality with y=[1,2].",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([1,2])\nprint(\"Triangle inequality holds:\", np.linalg.norm(x+y) <= np.linalg.norm(x)+np.linalg.norm(y))"
  },
  {
    "input": "Let x=[1,\u22121], y=[2,2]. Find angle between them in radians.",
    "output": "import numpy as np\nx = np.array([1,-1])\ny = np.array([2,2])\ncos_theta = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Is the vector [1,1,1] orthogonal to [1,\u22122,1]?",
    "output": "import numpy as np\nprint(\"Orthogonal:\", np.dot([1,1,1],[1,-2,1]) == 0)"
  },
  {
    "input": "Given functions f(x)=x\u00b2, g(x)=x\u00b3, compute \u27e8f,g\u27e9 on [0,1].",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: x**2 * x**3, 0, 1)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Compute ||f|| where f(x)=e^x on [0,1] using L2 norm.",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: np.exp(x)**2, 0, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Let x=[1,2,3], find its component orthogonal to u=[1,1,1].",
    "output": "import numpy as np\nx = np.array([1,2,3])\nu = np.array([1,1,1])\nproj = (np.dot(x,u)/np.dot(u,u))*u\north = x - proj\nprint(\"Orthogonal component:\", orth)"
  },
  {
    "input": "Given A=[[2,1],[1,2]], check if it defines an inner product.",
    "output": "import numpy as np\nA = np.array([[2,1],[1,2]])\neigvals = np.linalg.eigvals(A)\nprint(\"Defines inner product:\", np.all(eigvals > 0))"
  },
  {
    "input": "For x=[3,4], y=[5,12], verify if \u27e8x,y\u27e9 = ||x|| * ||y|| * cos(\u03b8).",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([5,12])\ninner = np.dot(x,y)\ncos_theta = inner / (np.linalg.norm(x)*np.linalg.norm(y))\nreconstructed = np.linalg.norm(x)*np.linalg.norm(y)*cos_theta\nprint(\"Equality holds:\", np.isclose(inner, reconstructed))"
  },
  {
    "input": "Use Gram-Schmidt on vectors [1,0,0], [1,1,0], [1,1,1].",
    "output": "import numpy as np\nv1 = np.array([1,0,0])\nv2 = np.array([1,1,0])\nv3 = np.array([1,1,1])\nu1 = v1 / np.linalg.norm(v1)\nv2_proj = v2 - np.dot(v2,u1)*u1\nu2 = v2_proj / np.linalg.norm(v2_proj)\nv3_proj = v3 - np.dot(v3,u1)*u1 - np.dot(v3,u2)*u2\nu3 = v3_proj / np.linalg.norm(v3_proj)\nprint(\"Orthonormal basis:\", u1, u2, u3)"
  },
  {
    "input": "Check if \u27e8x,x\u27e9 \u2265 0 and = 0 iff x=0 for x=[0,0].",
    "output": "import numpy as np\nx = np.array([0,0])\nip = np.dot(x,x)\nprint(\"Non-negative:\", ip >= 0, \"Zero iff x=0:\", ip == 0)"
  },
  {
    "input": "Is matrix A=[[1,0],[0,\u22121]] positive definite?",
    "output": "import numpy as np\nA = np.array([[1,0],[0,-1]])\neigs = np.linalg.eigvals(A)\nprint(\"Positive definite:\", np.all(eigs > 0))"
  },
  {
    "input": "Given u=[1,1,1], v=[2,2,2], is their dot product equal to ||u|| * ||v||?",
    "output": "import numpy as np\nu = np.array([1,1,1])\nv = np.array([2,2,2])\ndot = np.dot(u,v)\nmags = np.linalg.norm(u) * np.linalg.norm(v)\nprint(\"Equal:\", np.isclose(dot, mags))"
  },
  {
    "input": "Calculate the L1 norm of vector [\u22123, 4, \u22122].",
    "output": "import numpy as np\nx = np.array([-3,4,-2])\nnorm = np.linalg.norm(x, 1)\nprint(\"L1 norm:\", norm)"
  },
  {
    "input": "Given u=[1,2], v=[2,1], find \u27e8u,v\u27e9 and angle between them.",
    "output": "import numpy as np\nu = np.array([1,2])\nv = np.array([2,1])\ndot = np.dot(u,v)\nangle = np.arccos(dot/(np.linalg.norm(u)*np.linalg.norm(v)))\nprint(\"Inner product:\", dot, \"Angle (deg):\", np.degrees(angle))"
  },
  {
    "input": "Let x=[2,\u22121,1], find L\u221e norm.",
    "output": "import numpy as np\nx = np.array([2,-1,1])\nnorm = np.linalg.norm(x, np.inf)\nprint(\"L\u221e norm:\", norm)"
  },
  {
    "input": "Check if f(x)=1 and g(x)=x\u22120.5 are orthogonal on [0,1].",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: 1*(x-0.5), 0, 1)[0]\nprint(\"Orthogonal:\", np.isclose(ip, 0))"
  },
  {
    "input": "Is projection of x=[2,3] onto y=[1,1] same as y scaled?",
    "output": "import numpy as np\nx = np.array([2,3])\ny = np.array([1,1])\nproj = (np.dot(x,y)/np.dot(y,y)) * y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Given vectors u=[3,0], v=[4,0], compute norm of u\u2212v.",
    "output": "import numpy as np\nu = np.array([3,0])\nv = np.array([4,0])\nnorm = np.linalg.norm(u - v)\nprint(\"Norm of u-v:\", norm)"
  },
  {
    "input": "If \u27e8x,y\u27e9 = 0, what is the angle between x=[1,2] and y=[2,\u22121]?",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,-1])\nangle = np.degrees(np.arccos(np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))))\nprint(\"Angle:\", angle)"
  },
  {
    "input": "Verify Pythagoras theorem for x=[1,0], y=[0,2].",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,2])\nprint(\"Pythagorean holds:\", np.isclose(np.linalg.norm(x+y)**2, np.linalg.norm(x)**2 + np.linalg.norm(y)**2))"
  },
  {
    "input": "Given vectors u=[3,0], v=[4,0], compute norm of u\u2212v.",
    "output": "import numpy as np\nu = np.array([3,0])\nv = np.array([4,0])\ndiff = u - v\nprint(\"Norm of u\u2212v:\", np.linalg.norm(diff))"
  },
  {
    "input": "Verify if projection of [2,2] onto [1,\u22121] lies on the line y=\u2212x.",
    "output": "import numpy as np\nx = np.array([2,2])\ny = np.array([1,-1])\nproj = (np.dot(x,y)/np.dot(y,y))*y\nprint(\"Projection lies on y=\u2212x:\", np.isclose(proj[1], -proj[0]))"
  },
  {
    "input": "Given f(x)=x and g(x)=1\u2212x on [0,1], compute \u27e8f,g\u27e9.",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: x*(1-x), 0, 1)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Is the function space with \u27e8f,g\u27e9=\u222bf(x)g(x)dx over [0,1] an inner product space?",
    "output": "print(\"Yes, it satisfies all inner product axioms: linearity, symmetry, positivity.\")"
  },
  {
    "input": "Let x=[1,1,1], project it onto u=[1,0,0].",
    "output": "import numpy as np\nx = np.array([1,1,1])\nu = np.array([1,0,0])\nproj = (np.dot(x,u)/np.dot(u,u))*u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Check Cauchy-Schwarz inequality for x=[2,3], y=[1,4].",
    "output": "import numpy as np\nx = np.array([2,3])\ny = np.array([1,4])\nleft = abs(np.dot(x,y))\nright = np.linalg.norm(x)*np.linalg.norm(y)\nprint(\"Cauchy-Schwarz holds:\", left <= right)"
  },
  {
    "input": "Find if \u27e8x,y\u27e9=\u27e8y,x\u27e9 for x=[2,3], y=[5,1].",
    "output": "import numpy as np\nx = np.array([2,3])\ny = np.array([5,1])\nprint(\"Symmetric inner product:\", np.dot(x,y) == np.dot(y,x))"
  },
  {
    "input": "Compute the cosine similarity between x=[1,2] and y=[2,1].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,1])\ncos_sim = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nprint(\"Cosine similarity:\", cos_sim)"
  },
  {
    "input": "If x=[1,2,2], find unit vector in same direction.",
    "output": "import numpy as np\nx = np.array([1,2,2])\nunit = x / np.linalg.norm(x)\nprint(\"Unit vector:\", unit)"
  },
  {
    "input": "Verify if vector x=[1,2,3] has zero norm.",
    "output": "import numpy as np\nx = np.array([1,2,3])\nprint(\"Zero norm:\", np.linalg.norm(x)==0)"
  },
  {
    "input": "Let x=[1,0], y=[0,1], z=x+y. Check if z is orthogonal to x or y.",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,1])\nz = x + y\nprint(\"z orthogonal to x:\", np.dot(z,x)==0, \"z orthogonal to y:\", np.dot(z,y)==0)"
  },
  {
    "input": "Find L2 norm of function f(x)=x\u00b2 on [0,2].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: x**4, 0, 2)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Check if [1,\u22121,0] and [0,1,1] are orthogonal.",
    "output": "import numpy as np\nprint(\"Orthogonal:\", np.dot([1,-1,0],[0,1,1]) == 0)"
  },
  {
    "input": "Find angle between x=[1,2,2] and y=[2,1,1].",
    "output": "import numpy as np\nx = np.array([1,2,2])\ny = np.array([2,1,1])\ncos_theta = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nangle = np.arccos(cos_theta)\nprint(\"Angle (radians):\", angle)"
  },
  {
    "input": "Is vector x=[0,0] orthogonal to all vectors in R\u00b2?",
    "output": "print(\"Yes, the zero vector is orthogonal to every vector by definition.\")"
  },
  {
    "input": "Normalize function f(x)=sin(x) on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: np.sin(x)**2, 0, np.pi)[0])\nprint(\"Normalized f(x): sin(x)/\", norm)"
  },
  {
    "input": "Given u=[1,1], find projection of x=[2,0] onto u.",
    "output": "import numpy as np\nu = np.array([1,1])\nx = np.array([2,0])\nproj = (np.dot(x,u)/np.dot(u,u))*u\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Check linearity: \u27e82x+y, z\u27e9 = 2\u27e8x,z\u27e9+\u27e8y,z\u27e9 for x=[1,0], y=[0,1], z=[1,1].",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,1])\nz = np.array([1,1])\nleft = np.dot(2*x+y, z)\nright = 2*np.dot(x,z) + np.dot(y,z)\nprint(\"Linearity holds:\", left == right)"
  },
  {
    "input": "Determine if inner product is zero for f(x)=x, g(x)=1\u2212x on [\u22121,1].",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: x*(1-x), -1, 1)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Find L2 norm of constant function f(x)=3 on [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: 9, 0, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Find projection of [1,2,3] on [1,0,1].",
    "output": "import numpy as np\nx = np.array([1,2,3])\ny = np.array([1,0,1])\nproj = (np.dot(x,y)/np.dot(y,y))*y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Is \u27e8x,x\u27e9 = ||x||\u00b2 for x=[4,3]?",
    "output": "import numpy as np\nx = np.array([4,3])\nprint(\"Equality holds:\", np.dot(x,x) == np.linalg.norm(x)**2)"
  },
  {
    "input": "Find norm of vector from origin to point (3,4,12).",
    "output": "import numpy as np\nx = np.array([3,4,12])\nprint(\"Norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Does \u27e8x,y\u27e9 = 0 imply ||x+y||\u00b2 = ||x||\u00b2 + ||y||\u00b2?",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([0,1])\nlhs = np.linalg.norm(x+y)**2\nrhs = np.linalg.norm(x)**2 + np.linalg.norm(y)**2\nprint(\"Equality holds:\", np.isclose(lhs, rhs))"
  },
  {
    "input": "Compute the inner product of x = [2, -1, 3] and y = [1, 4, -2].",
    "output": "import numpy as np\nx = np.array([2,-1,3])\ny = np.array([1,4,-2])\nprint(\"Inner product:\", np.dot(x, y))"
  },
  {
    "input": "Is the function space with \u27e8f,g\u27e9 = \u222b\u2080\u00b9 f(x)g(x) dx complete?",
    "output": "print(\"Yes, it is a Hilbert space and hence complete.\")"
  },
  {
    "input": "Find the norm of x = [5, 12].",
    "output": "import numpy as np\nx = np.array([5,12])\nprint(\"Norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Check orthogonality: x = [1,2,\u22121], y = [2,1,4].",
    "output": "import numpy as np\nx = np.array([1,2,-1])\ny = np.array([2,1,4])\nprint(\"Orthogonal:\", np.dot(x,y) == 0)"
  },
  {
    "input": "Normalize x = [1,2,2].",
    "output": "import numpy as np\nx = np.array([1,2,2])\nprint(\"Normalized vector:\", x / np.linalg.norm(x))"
  },
  {
    "input": "Compute projection of [1,2] onto [3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nproj = (np.dot(x,y)/np.dot(y,y)) * y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Verify Pythagorean identity for orthogonal x=[3,4], y=[4,\u22123].",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([4,-3])\nz = x + y\nprint(\"Pythagorean identity holds:\", np.linalg.norm(z)**2 == np.linalg.norm(x)**2 + np.linalg.norm(y)**2)"
  },
  {
    "input": "Find L2 norm of f(x)=x^3 over [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: x**6, 0, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Find unit vector in direction of [4,4,7].",
    "output": "import numpy as np\nx = np.array([4,4,7])\nprint(\"Unit vector:\", x / np.linalg.norm(x))"
  },
  {
    "input": "Determine if ||x + y|| \u2264 ||x|| + ||y|| for x=[1,2], y=[3,4].",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([3,4])\nprint(\"Triangle inequality holds:\", np.linalg.norm(x + y) <= np.linalg.norm(x) + np.linalg.norm(y))"
  },
  {
    "input": "Find angle between [1,0] and [1,1].",
    "output": "import numpy as np\nx = np.array([1,0])\ny = np.array([1,1])\ncos_theta = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nangle = np.arccos(cos_theta)\nprint(\"Angle in radians:\", angle)"
  },
  {
    "input": "Find the projection of x=[4,1] onto y=[1,2].",
    "output": "import numpy as np\nx = np.array([4,1])\ny = np.array([1,2])\nproj = (np.dot(x,y)/np.dot(y,y))*y\nprint(\"Projection:\", proj)"
  },
  {
    "input": "Is the inner product \u27e8x,y\u27e9 = x\u2081y\u2081 \u2212 x\u2082y\u2082 valid?",
    "output": "print(\"No, it is not positive definite.\")"
  },
  {
    "input": "Compute \u222b\u2080^\u03c0 sin(x)\u00b7cos(x) dx.",
    "output": "from scipy.integrate import quad\nip = quad(lambda x: np.sin(x)*np.cos(x), 0, np.pi)[0]\nprint(\"Inner product:\", ip)"
  },
  {
    "input": "Let u=[1,1], v=[\u22121,1]. Are they orthogonal?",
    "output": "import numpy as np\nu = np.array([1,1])\nv = np.array([-1,1])\nprint(\"Orthogonal:\", np.dot(u,v) == 0)"
  },
  {
    "input": "Find L2 norm of f(x)=e^x over [0,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: np.exp(2*x), 0, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Let x=[1,2,3], y=[4,5,6]. Compute \u27e8x,y\u27e9 and check if equal to \u27e8y,x\u27e9.",
    "output": "import numpy as np\nx = np.array([1,2,3])\ny = np.array([4,5,6])\nprint(\"Equal inner products:\", np.dot(x,y) == np.dot(y,x))"
  },
  {
    "input": "Check ||x|| = sqrt(\u27e8x,x\u27e9) for x = [2,2].",
    "output": "import numpy as np\nx = np.array([2,2])\nprint(\"Equality holds:\", np.linalg.norm(x) == np.sqrt(np.dot(x,x)))"
  },
  {
    "input": "Is \u27e8x,x\u27e9 \u2265 0 always true for any x?",
    "output": "print(\"Yes, by definition of an inner product.\")"
  },
  {
    "input": "Verify linearity: \u27e8ax,x\u27e9 = a\u27e8x,x\u27e9 for a=3, x=[1,2].",
    "output": "import numpy as np\nx = np.array([1,2])\na = 3\nprint(\"Linearity holds:\", np.dot(a*x,x) == a*np.dot(x,x))"
  },
  {
    "input": "Let x=[1,1,1], y=[\u22121,1,0]. Check if \u27e8x,y\u27e9 = 0.",
    "output": "import numpy as np\nx = np.array([1,1,1])\ny = np.array([-1,1,0])\nprint(\"Orthogonal:\", np.dot(x,y) == 0)"
  },
  {
    "input": "Is inner product \u27e8x,y\u27e9 = x\u1d40y linear in first argument?",
    "output": "print(\"Yes, \u27e8x,y\u27e9 is linear in the first argument.\")"
  },
  {
    "input": "Determine if projection of [3,4] onto [0,1] is [0,4].",
    "output": "import numpy as np\nx = np.array([3,4])\ny = np.array([0,1])\nproj = (np.dot(x,y)/np.dot(y,y))*y\nprint(\"Is [0,4]:\", np.allclose(proj, [0,4]))"
  },
  {
    "input": "Find norm of vector [7,24].",
    "output": "import numpy as np\nx = np.array([7,24])\nprint(\"Norm:\", np.linalg.norm(x))"
  },
  {
    "input": "Let x=[2,1], y=[\u22121,2]. Find \u27e8x+y,x\u2212y\u27e9.",
    "output": "import numpy as np\nx = np.array([2,1])\ny = np.array([-1,2])\nprint(\"Inner product:\", np.dot(x+y,x-y))"
  },
  {
    "input": "Is the function \u27e8x,y\u27e9 = x\u2081y\u2081 + 2x\u2082y\u2082 an inner product on \u211d\u00b2?",
    "output": "print(\"Yes, it satisfies all properties of an inner product.\")"
  },
  {
    "input": "Find the inner product of x=[3,4,5] and y=[1,0,1].",
    "output": "import numpy as np\nx = np.array([3,4,5])\ny = np.array([1,0,1])\nprint(\"Inner product:\", np.dot(x,y))"
  },
  {
    "input": "Verify ||x||\u00b2 = \u27e8x,x\u27e9 for x = [6,8].",
    "output": "import numpy as np\nx = np.array([6,8])\nprint(\"Holds:\", np.linalg.norm(x)**2 == np.dot(x,x))"
  },
  {
    "input": "Find unit vector of [6,2,3].",
    "output": "import numpy as np\nx = np.array([6,2,3])\nprint(\"Unit vector:\", x / np.linalg.norm(x))"
  },
  {
    "input": "Let f(x)=x, g(x)=1 over [0,1]. Compute \u27e8f,g\u27e9.",
    "output": "from scipy.integrate import quad\ninner = quad(lambda x: x * 1, 0, 1)[0]\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Are x=[1,2], y=[2,4] linearly independent?",
    "output": "import numpy as np\nx = np.array([1,2])\ny = np.array([2,4])\nprint(\"Linearly independent:\", not np.allclose(y, 2*x))"
  },
  {
    "input": "Find the cosine of angle between [1,2,2] and [2,1,2].",
    "output": "import numpy as np\nx = np.array([1,2,2])\ny = np.array([2,1,2])\ncos_theta = np.dot(x,y)/(np.linalg.norm(x)*np.linalg.norm(y))\nprint(\"Cosine of angle:\", cos_theta)"
  },
  {
    "input": "Check if \u27e8x,y\u27e9 = \u27e8y,x\u27e9 for complex x=[1+2j, 3], y=[1,2+1j].",
    "output": "import numpy as np\nx = np.array([1+2j, 3])\ny = np.array([1, 2+1j])\nprint(\"Conjugate symmetric:\", np.vdot(x,y) == np.conj(np.vdot(y,x)))"
  },
  {
    "input": "Compute ||f||\u00b2 where f(x) = sin(x) on [0,\u03c0].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm_sq = quad(lambda x: np.sin(x)**2, 0, np.pi)[0]\nprint(\"Norm squared:\", norm_sq)"
  },
  {
    "input": "If \u27e8x,y\u27e9 = 0 and x\u22600, y\u22600, what can you say?",
    "output": "print(\"x and y are orthogonal.\")"
  },
  {
    "input": "Let x=[1,\u22122,3], y=[4,0,\u22121]. Check orthogonality.",
    "output": "import numpy as np\nx = np.array([1,-2,3])\ny = np.array([4,0,-1])\nprint(\"Orthogonal:\", np.dot(x,y) == 0)"
  },
  {
    "input": "Check if norm is invariant under scalar multiplication by \u22121 for x = [2,2].",
    "output": "import numpy as np\nx = np.array([2,2])\nprint(\"Invariant:\", np.linalg.norm(-x) == np.linalg.norm(x))"
  },
  {
    "input": "Verify if ||x+y||\u00b2 = ||x||\u00b2 + ||y||\u00b2 + 2\u27e8x,y\u27e9 for x=[2,1], y=[1,3].",
    "output": "import numpy as np\nx = np.array([2,1])\ny = np.array([1,3])\nlhs = np.linalg.norm(x+y)**2\nrhs = np.linalg.norm(x)**2 + np.linalg.norm(y)**2 + 2*np.dot(x,y)\nprint(\"Equality holds:\", np.isclose(lhs, rhs))"
  },
  {
    "input": "Is \u27e8x,y\u27e9 = x\u2081y\u2081 + x\u2082y\u2082 + x\u2083y\u2083 + 2x\u2084y\u2084 an inner product?",
    "output": "print(\"Yes, it satisfies inner product axioms.\")"
  },
  {
    "input": "Check if ||x+y|| \u2264 ||x|| + ||y|| for x=[\u22121,2], y=[3,\u22121].",
    "output": "import numpy as np\nx = np.array([-1,2])\ny = np.array([3,-1])\nprint(\"Triangle inequality holds:\", np.linalg.norm(x+y) <= np.linalg.norm(x) + np.linalg.norm(y))"
  },
  {
    "input": "Is \u27e8x,y\u27e9 = 2x\u2081y\u2081 + 3x\u2082y\u2082 positive definite?",
    "output": "print(\"Yes, as coefficients are positive.\")"
  },
  {
    "input": "Find L2 norm of x^2 on [\u22121,1].",
    "output": "from scipy.integrate import quad\nimport numpy as np\nnorm = np.sqrt(quad(lambda x: x**4, -1, 1)[0])\nprint(\"L2 norm:\", norm)"
  },
  {
    "input": "Compute \u27e8f,g\u27e9 where f(x)=x, g(x)=x\u00b2 on [0,1].",
    "output": "from scipy.integrate import quad\ninner = quad(lambda x: x*x**2, 0, 1)[0]\nprint(\"Inner product:\", inner)"
  },
  {
    "input": "Is every norm induced by an inner product?",
    "output": "print(\"No, only norms satisfying parallelogram law are.\")"
  },
  {
    "input": "Find distance between x=[1,1] and y=[4,5].",
    "output": "import numpy as np\nx = np.array([1,1])\ny = np.array([4,5])\nprint(\"Distance:\", np.linalg.norm(x - y))"
  }
]