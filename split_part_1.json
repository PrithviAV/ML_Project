[
  {
    "input": "Find the rank of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[2, 4, 6], [1, 2, 3], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 2, 3], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[5, 10], [10, 20]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 10], [10, 20]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3], [0, 0, 0], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 0, 0], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2], [2, 4], [3, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 4], [3, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2], [3, 4], [5, 6], [7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 3, 5], [4, 6, 10], [1, 1.5, 2.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 5], [4, 6, 10], [1, 1.5, 2.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3], [0, 1, 4], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 4, 1], [0, 3, 7], [6, 9, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 1], [0, 3, 7], [6, 9, 8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[5, 0, 0], [0, 5, 0], [0, 0, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0, 0], [0, 5, 0], [0, 0, 5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0, 1, 2], [1, 0, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [1, 0, 3], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 1, 1], [1, 1, 1], [1, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[2, 3, 5], [4, 6, 10], [8, 12, 20]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 5], [4, 6, 10], [8, 12, 20]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2], [3, 6], [5, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 6], [5, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[7, 8, 9], [2, 4, 6], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 8, 9], [2, 4, 6], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 4, 6], [1, 2, 3], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 2, 3], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[3, 1, 4], [1, 5, 9], [2, 6, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 1], [2, 4, 2], [3, 6, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [2, 4, 2], [3, 6, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 0], [0, 1, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 3, 5], [2, 4, 6], [3, 5, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5], [2, 4, 6], [3, 5, 7]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[3, 6, 9], [2, 4, 6], [1, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 6, 9], [2, 4, 6], [1, 2, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[10, 20], [5, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 20], [5, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the zero matrix of order 3.",
    "output": "import numpy as np\nmatrix = np.zeros((3, 3))\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of a matrix with two identical rows?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [1, 2, 3], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[2, 4], [6, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4], [6, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of a diagonal matrix with one zero entry: [[1,0,0], [0,0,0], [0,0,3]].",
    "output": "import numpy as np\nmatrix = np.array([[1,0,0], [0,0,0], [0,0,3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[1, 0, 0], [0, 1, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the identity matrix of order 4?",
    "output": "import numpy as np\nmatrix = np.identity(4)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix with a row of zeros: [[3, 5, 2], [1, 2, 1], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 5, 2], [1, 2, 1], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of a 2x2 invertible matrix [[7, 3], [2, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 3], [2, 5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of [[1, 2, 3], [2, 4, 6], [3, 6, 9]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of a matrix where all elements are the same: [[5, 5], [5, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 5], [5, 5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[1, 1, 1], [1, 2, 3], [1, 4, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1], [1, 2, 3], [1, 4, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of a matrix with full row rank but more columns than rows: [[1, 2, 3], [4, 5, 6]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of [[0, 2], [0, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2], [0, 4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of a 1x3 matrix [[4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of a matrix with a column of zeros: [[2, 0, 3], [4, 0, 6], [6, 0, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 3], [4, 0, 6], [6, 0, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[1, 3], [2, 6], [3, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3], [2, 6], [3, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of a 3x3 matrix with two linearly dependent rows?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [2, 4, 6], [5, 6, 7]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of a sparse matrix [[0, 0, 5], [0, 0, 0], [0, 0, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 5], [0, 0, 0], [0, 0, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of [[1, 0], [0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0], [0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of the matrix [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of a matrix [[1, 0, 0], [0, 0, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 4, 6], [1, 2, 3], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 2, 3], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.zeros((3, 3))\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]]?",
    "output": "import numpy as np\nmatrix = np.identity(3)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3], [0, 0, 0], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 0, 0], [7, 8, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4], [5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[2, 3], [5, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3], [5, 7]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2], [2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2], [3, 4], [5, 6], [7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[2, 4, 6], [4, 8, 12], [6, 12, 18]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [4, 8, 12], [6, 12, 18]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[2, 4, 6], [8, 10, 12], [14, 16, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [8, 10, 12], [14, 16, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-1, -2, -3], [-4, -5, -6], [-7, -8, -7]].",
    "output": "import numpy as np\nmatrix = np.array([[-1, -2, -3], [-4, -5, -6], [-7, -8, -7]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 5, 6], [1, 0, 1], [1, 3, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 5, 6], [1, 0, 1], [1, 3, 2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[7, 0, 0], [1, 8, 2], [0, 4, 1]]?",
    "output": "import numpy as np\nmatrix = np.array([[7, 0, 0], [1, 8, 2], [0, 4, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[10, 5], [6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 5], [6, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[5, 3], [2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 3], [2, 4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 4, 2, 4], [2, 6, 4, 4], [4, 8, 6, 8], [6, 14, 8, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 2, 4], [2, 6, 4, 4], [4, 8, 6, 8], [6, 14, 8, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[3, 6, 9], [1, 2, 3], [2, 4, 6]]?",
    "output": "import numpy as np\nmatrix = np.array([[3, 6, 9], [1, 2, 3], [2, 4, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.zeros((3, 3))\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.identity(3)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2], [2, 4], [3, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 4], [3, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3], [0, 0, 0], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 0, 0], [7, 8, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2], [3, 4], [5, 6]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4], [5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.zeros((3, 3))\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.identity(3)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[2, 4, 6], [1, 2, 3], [3, 6, 9]]?",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 2, 3], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[5, 10, 15], [10, 20, 30], [15, 30, 45]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 10, 15], [10, 20, 30], [15, 30, 45]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2], [3, 4], [5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4], [5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 3, 5], [7, 11, 13], [17, 19, 23]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 5], [7, 11, 13], [17, 19, 23]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.identity(4)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[0, 1, 2], [0, 0, 3], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [0, 0, 3], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 4, 4], [5, 6, 7, 8], [9, 10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[3, 6, 9], [1, 2, 4], [4, 8, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 6, 9], [1, 2, 3], [4, 8, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 3, 5], [2, 4, 6], [3, 6, 9]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5], [2, 4, 6], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.identity(4)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 13]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 13]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 2], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 2], [4, 5, 6], [7, 8, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[8, 2, 3, 4], [5, 6, 8, 8], [9, 10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0, 0, 2], [0, 0, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 2], [2, 4], [3, 6], [4, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 4], [3, 6], [4, 8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[5, 0, 0], [0, 0, 0], [5, 0, 0]]?",
    "output": "import numpy as np\nmatrix = np.array([[5, 0, 0], [5, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.identity(5)\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3], [2, 4, 6], [3, 6, 9], [4, 8, 12]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9], [4, 8, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[0, 1, 2, 3], [0, 0, 3, 4], [0, 0, 0, 5], [0, 0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2, 3], [0, 0, 3, 4], [0, 0, 0, 5], [0, 0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10], [11, 12, 13]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10], [11, 12, 13]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2, 4, 6], [4, 8, 12], [6, 12, 18]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [4, 8, 12], [6, 12, 18]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3], [0, 0, 0], [0, 0, 0]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 0, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 0], [0, 1], [1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0], [0, 1], [1, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[2, 3, 5], [7, 11, 13], [17, 19, 23]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 5], [7, 11, 13], [17, 19, 23]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[2, -3, 1], [4, -6, 2], [1, -1.5, 0.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -3, 1], [4, -6, 2], [1, -1.5, 0.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[1, 2, 1], [2, 4, 2], [3, 6, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [2, 4, 2], [3, 6, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[1, 2, 3], [0, 1, 4], [5, 6, 0]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[3, 0, 2], [2, 0, -2], [0, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 0, 2], [2, 0, -2], [0, 1, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[1, 1, 1, 1], [0, 1, 2, 3], [1, 2, 3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1, 1], [0, 1, 2, 3], [1, 2, 3, 4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of a matrix formed by rows [1, 0, 1], [0, 1, 1], [1, 1, 2].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 1], [0, 1, 1], [1, 1, 2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1, 0, 0], [2, 3, 0], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [2, 3, 0], [4, 5, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[3, 2, 1], [6, 4, 2], [9, 6, 3]]?",
    "output": "import numpy as np\nmatrix = np.array([[3, 2, 1], [6, 4, 2], [9, 6, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[4, 2], [8, 4], [12, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 2], [8, 4], [12, 6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[1, 2], [2, 5], [3, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [2, 5], [3, 7]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of a matrix where all rows are multiples of [1, 1, 1].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[4, 5, 6], [2, 3, 1], [6, 7, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 5, 6], [2, 3, 1], [6, 7, 5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[2, 4, 6], [1, 3, 5], [0, 1, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 3, 5], [0, 1, 2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[7, 8, 9], [5, 6, 4], [3, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 8, 9], [5, 6, 4], [3, 2, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[1, 3, 5, 7], [2, 4, 6, 8], [3, 6, 9, 12]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5, 7], [2, 4, 6, 8], [3, 6, 9, 12]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of the matrix with rows [0, 1, 0], [1, 0, 0], [0, 0, 1].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[1, 2, 3], [2, 4, 6], [3, 6, 9.001]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9.001]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of a matrix with one row being all nines: [[1, 2, 3], [9, 9, 9], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [9, 9, 9], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of the matrix formed by [[2, 5], [4, 10], [6, 15]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 5], [4, 10], [6, 15]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0, 0, 1], [0, 1, 0], [1, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[1, 4, 7], [2, 5, 8], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[1, 1, 1, 1], [1, 2, 3, 4], [4, 3, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1, 1], [1, 2, 3, 4], [4, 3, 2, 1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0, 0], [0, 5], [0, 10]]?",
    "output": "import numpy as np\nmatrix = np.array([[0, 0], [0, 5], [0, 10]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[2, 3], [4, 6.1], [6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3], [4, 6.1], [6, 9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[1.2, 2.4], [2.4, 4.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 2.4], [2.4, 4.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[0.5, 1.0], [1.5, 2.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.0], [1.5, 2.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[3.14, 2.71], [1.61, 0.57]].",
    "output": "import numpy as np\nmatrix = np.array([[3.14, 2.71], [1.61, 0.57]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[1.1, 2.2, 3.3], [2.2, 4.4, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3], [2.2, 4.4, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0.1, 0.2, 0.3], [0.3, 0.6, 0.9], [0.2, 0.4, 0.6]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.2, 0.3], [0.3, 0.6, 0.9], [0.2, 0.4, 0.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[2.5, 3.5], [5.0, 7.0]].",
    "output": "import numpy as np\nmatrix = np.array([[2.5, 3.5], [5.0, 7.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[1.001, 1.002], [2.002, 2.004]].",
    "output": "import numpy as np\nmatrix = np.array([[1.001, 1.002], [2.002, 2.004]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.5, 1.5, 2.5], [1.0, 3.0, 5.0], [1.5, 4.5, 7.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.5, 2.5], [1.0, 3.0, 5.0], [1.5, 4.5, 7.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[1.2, 3.5], [2.4, 7.0], [3.6, 10.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 3.5], [2.4, 7.0], [3.6, 10.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.3, 0.6], [0.9, 1.8], [1.2, 2.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.3, 0.6], [0.9, 1.8], [1.2, 2.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[4.1, 5.2, 6.3], [2.2, 3.3, 4.4], [6.3, 8.4, 10.5]]?",
    "output": "import numpy as np\nmatrix = np.array([[4.1, 5.2, 6.3], [2.2, 3.3, 4.4], [6.3, 8.4, 10.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[7.7, 8.8, 9.9], [6.6, 5.5, 4.4], [3.3, 2.2, 1.1]].",
    "output": "import numpy as np\nmatrix = np.array([[7.7, 8.8, 9.9], [6.6, 5.5, 4.4], [3.3, 2.2, 1.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[1.111, 2.222], [3.333, 4.444]].",
    "output": "import numpy as np\nmatrix = np.array([[1.111, 2.222], [3.333, 4.444]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[5.5, 6.6], [11.0, 13.2]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 6.6], [11.0, 13.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0.123, 0.456], [0.789, 1.234]].",
    "output": "import numpy as np\nmatrix = np.array([[0.123, 0.456], [0.789, 1.234]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[9.8, 7.6, 5.4], [3.2, 1.0, 0.9], [6.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[9.8, 7.6, 5.4], [3.2, 1.0, 0.9], [6.7, 8.8, 9.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[2.25, 3.75], [4.5, 7.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2.25, 3.75], [4.5, 7.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[0.0, 0.1], [0.1, 0.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.0, 0.1], [0.1, 0.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[3.3, 2.2], [6.6, 4.4], [9.9, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.2], [6.6, 4.4], [9.9, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.12, 0.34], [0.56, 0.78]].",
    "output": "import numpy as np\nmatrix = np.array([[0.12, 0.34], [0.56, 0.78]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[5.25, 6.75], [10.5, 13.5]].",
    "output": "import numpy as np\nmatrix = np.array([[5.25, 6.75], [10.5, 13.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0.999, 0.998], [0.997, 0.996]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.999, 0.998], [0.997, 0.996]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]].",
    "output": "import numpy as np\nmatrix = np.array([[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[1.234, 2.345, 3.456], [4.567, 5.678, 6.789]].",
    "output": "import numpy as np\nmatrix = np.array([[1.234, 2.345, 3.456], [4.567, 5.678, 6.789]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.2, 0.4, 0.6], [0.1, 0.2, 0.3], [0.3, 0.6, 0.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.2, 0.4, 0.6], [0.1, 0.2, 0.3], [0.3, 0.6, 0.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[2.3, 3.6, 4.8], [1.1, 2.2, 3.3], [3.4, 5.8, 8.1]].",
    "output": "import numpy as np\nmatrix = np.array([[2.3, 3.6, 4.8], [1.1, 2.2, 3.3], [3.4, 5.8, 8.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[1.5, 2.5, 3.5], [3.0, 5.0, 7.0], [4.5, 7.5, 10.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.5, 3.5], [3.0, 5.0, 7.0], [4.5, 7.5, 10.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0.33, 0.66], [0.99, 1.32]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.33, 0.66], [0.99, 1.32]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[2.0, 4.0], [1.0, 2.0], [0.5, 1.0]].",
    "output": "import numpy as np\nmatrix = np.array([[2.0, 4.0], [1.0, 2.0], [0.5, 1.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute rank of matrix [[1.25, 2.50], [2.50, 5.00]].",
    "output": "import numpy as np\nmatrix = np.array([[1.25, 2.50], [2.50, 5.00]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[3.3, 6.6, 9.9], [6.6, 13.2, 19.8]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 6.6, 9.9], [6.6, 13.2, 19.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[5.5, 11.0], [11.0, 22.0], [16.5, 33.0]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 11.0], [11.0, 22.0], [16.5, 33.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.1, 0.1, 0.1]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.1, 0.1], [0.1, 0.1, 0.1], [0.1, 0.1, 0.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0.99, 1.98], [1.98, 3.96], [2.97, 5.94]].",
    "output": "import numpy as np\nmatrix = np.array([[0.99, 1.98], [1.98, 3.96], [2.97, 5.94]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[3.7, 1.8], [7.2, 3.5], [5.1, 2.4]]?",
    "output": "import numpy as np\nmatrix = np.array([[3.7, 1.8], [7.2, 3.5], [5.1, 2.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[0.55, 0.65, 0.75], [1.1, 1.3, 1.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.55, 0.65, 0.75], [1.1, 1.3, 1.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[8.8, 9.9, 10.1], [4.4, 5.5, 6.6], [2.2, 3.3, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[8.8, 9.9, 10.1], [4.4, 5.5, 6.6], [2.2, 3.3, 4.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[1.9, 3.8], [3.8, 7.6], [5.7, 11.4]].",
    "output": "import numpy as np\nmatrix = np.array([[1.9, 3.8], [3.8, 7.6], [5.7, 11.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[0.25, 0.50, 0.75], [0.50, 1.00, 1.50], [0.75, 1.50, 2.25]].",
    "output": "import numpy as np\nmatrix = np.array([[0.25, 0.50, 0.75], [0.50, 1.00, 1.50], [0.75, 1.50, 2.25]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[2.8, 3.6, 4.4], [5.6, 7.2, 8.8], [8.4, 10.8, 13.2]].",
    "output": "import numpy as np\nmatrix = np.array([[2.8, 3.6, 4.4], [5.6, 7.2, 8.8], [8.4, 10.8, 13.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[1.6, 3.2], [3.2, 6.4], [4.8, 9.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.6, 3.2], [3.2, 6.4], [4.8, 9.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0.45, 0.90], [0.90, 1.80], [1.35, 2.70]].",
    "output": "import numpy as np\nmatrix = np.array([[0.45, 0.90], [0.90, 1.80], [1.35, 2.70]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[0.101, 0.202], [0.303, 0.404]].",
    "output": "import numpy as np\nmatrix = np.array([[0.101, 0.202], [0.303, 0.404]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0.01, 0.03], [0.05, 0.07]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.01, 0.03], [0.05, 0.07]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[1.1, 2.3], [3.5, 4.7], [5.9, 6.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.3], [3.5, 4.7], [5.9, 6.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[2.222, 3.333], [4.444, 5.555]].",
    "output": "import numpy as np\nmatrix = np.array([[2.222, 3.333], [4.444, 5.555]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.2, 2.4, 3.6], [4.8, 6.0, 7.2], [8.4, 9.6, 10.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 2.4, 3.6], [4.8, 6.0, 7.2], [8.4, 9.6, 10.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[0.5, 1.5], [1.0, 3.0], [1.5, 4.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.5], [1.0, 3.0], [1.5, 4.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[2.25, 4.5, 6.75], [1.5, 3.0, 4.5], [0.75, 1.5, 2.25]].",
    "output": "import numpy as np\nmatrix = np.array([[2.25, 4.5, 6.75], [1.5, 3.0, 4.5], [0.75, 1.5, 2.25]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[4.4, 2.2], [6.6, 3.3]]?",
    "output": "import numpy as np\nmatrix = np.array([[4.4, 2.2], [6.6, 3.3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.1, 0.3, 0.5], [0.2, 0.6, 1.0], [0.4, 1.2, 2.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.3, 0.5], [0.2, 0.6, 1.0], [0.4, 1.2, 2.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[9.9, 8.8, 7.7], [6.6, 5.5, 4.4], [3.3, 2.2, 1.1]].",
    "output": "import numpy as np\nmatrix = np.array([[9.9, 8.8, 7.7], [6.6, 5.5, 4.4], [3.3, 2.2, 1.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[2.1, 3.2], [4.3, 6.4], [6.5, 9.6]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 3.2], [4.3, 6.4], [6.5, 9.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[3.3, 3.3], [6.6, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 3.3], [6.6, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[0.05, 0.10], [0.10, 0.20]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.05, 0.10], [0.10, 0.20]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.2, 0.4], [0.6, 0.8], [1.0, 1.2]].",
    "output": "import numpy as np\nmatrix = np.array([[0.2, 0.4], [0.6, 0.8], [1.0, 1.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[5.5, 4.4, 3.3], [2.2, 1.1, 0.0], [0.0, -1.1, -2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 4.4, 3.3], [2.2, 1.1, 0.0], [0.0, -1.1, -2.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[7.1, 8.2], [9.3, 10.4], [11.5, 12.6]].",
    "output": "import numpy as np\nmatrix = np.array([[7.1, 8.2], [9.3, 10.4], [11.5, 12.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[1.0, 2.0, 3.0], [4.1, 5.1, 6.1], [7.2, 8.2, 9.2]].",
    "output": "import numpy as np\nmatrix = np.array([[1.0, 2.0, 3.0], [4.1, 5.1, 6.1], [7.2, 8.2, 9.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[-1.1, -2.2], [3.3, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[-1.1, -2.2], [3.3, 4.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[0.333, 0.667, 1.000], [0.999, 1.333, 1.667]].",
    "output": "import numpy as np\nmatrix = np.array([[0.333, 0.667, 1.000], [0.999, 1.333, 1.667]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[1.1, 2.2], [2.2, 4.4]]?",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2], [2.2, 4.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[9.1, 8.3, 7.2], [6.2, 5.1, 4.0], [3.0, 2.5, 1.5]].",
    "output": "import numpy as np\nmatrix = np.array([[9.1, 8.3, 7.2], [6.2, 5.1, 4.0], [3.0, 2.5, 1.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[0.15, 0.3], [0.3, 0.6], [0.45, 0.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.15, 0.3], [0.3, 0.6], [0.45, 0.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate rank of matrix [[1.123, 2.246], [3.369, 4.492]].",
    "output": "import numpy as np\nmatrix = np.array([[1.123, 2.246], [3.369, 4.492]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[4.0, 4.0], [4.0, 4.0]]?",
    "output": "import numpy as np\nmatrix = np.array([[4.0, 4.0], [4.0, 4.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.33, 0.66], [0.99, 1.32], [1.65, 1.98]].",
    "output": "import numpy as np\nmatrix = np.array([[0.33, 0.66], [0.99, 1.32], [1.65, 1.98]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[7.25, 5.75, 3.25], [2.50, 1.25, 0.75], [1.00, 0.50, 0.25]].",
    "output": "import numpy as np\nmatrix = np.array([[7.25, 5.75, 3.25], [2.50, 1.25, 0.75], [1.00, 0.50, 0.25]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[3.333, 3.667], [4.444, 5.556], [6.666, 7.777]].",
    "output": "import numpy as np\nmatrix = np.array([[3.333, 3.667], [4.444, 5.556], [6.666, 7.777]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[1.2, 3.4], [5.6, 7.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 3.4], [5.6, 7.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.1, 0.2], [0.2, 0.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.2], [0.2, 0.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of the matrix [[9.1, 8.2, 7.3], [6.4, 5.5, 4.6], [3.7, 2.8, 1.9]].",
    "output": "import numpy as np\nmatrix = np.array([[9.1, 8.2, 7.3], [6.4, 5.5, 4.6], [3.7, 2.8, 1.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check the rank of the matrix [[0.33, 0.66, 0.99], [1.32, 1.65, 1.98], [2.31, 2.64, 2.97]].",
    "output": "import numpy as np\nmatrix = np.array([[0.33, 0.66, 0.99], [1.32, 1.65, 1.98], [2.31, 2.64, 2.97]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[2.2, 4.4, 6.6], [1.1, 2.2, 3.3], [3.3, 6.6, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[2.2, 4.4, 6.6], [1.1, 2.2, 3.3], [3.3, 6.6, 9.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[-1.1, -2.2], [3.3, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[-1.1, -2.2], [3.3, 4.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.25, 0.5], [0.75, 1.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.25, 0.5], [0.75, 1.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[5.5, 0.0], [0.0, 5.5]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 0.0], [0.0, 5.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[1.1, 1.1], [2.2, 2.2], [3.3, 3.3]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 1.1], [2.2, 2.2], [3.3, 3.3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check rank of matrix [[0.6, 1.2, 1.8], [2.4, 3.0, 3.6], [4.2, 4.8, 5.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.6, 1.2, 1.8], [2.4, 3.0, 3.6], [4.2, 4.8, 5.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix with decimal values: [[3.3, 2.2], [6.6, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.2], [6.6, 4.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.75, 0.25], [0.25, 0.75]].",
    "output": "import numpy as np\nmatrix = np.array([[0.75, 0.25], [0.25, 0.75]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[2.5, 5.0, 7.5], [5.0, 10.0, 15.0], [7.5, 15.0, 22.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2.5, 5.0, 7.5], [5.0, 10.0, 15.0], [7.5, 15.0, 22.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[-3.3, -6.6, -9.9], [4.4, 8.8, 13.2], [5.5, 11.0, 16.5]].",
    "output": "import numpy as np\nmatrix = np.array([[-3.3, -6.6, -9.9], [4.4, 8.8, 13.2], [5.5, 11.0, 16.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check the rank of matrix [[0.01, 0.02], [0.03, 0.06]].",
    "output": "import numpy as np\nmatrix = np.array([[0.01, 0.02], [0.03, 0.06]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[1.1, 2.2, 3.3, 4.4], [2.2, 4.4, 6.6, 8.8], [3.3, 6.6, 9.9, 13.2]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3, 4.4], [2.2, 4.4, 6.6, 8.8], [3.3, 6.6, 9.9, 13.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[2.1, 4.2], [1.05, 2.1]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 4.2], [1.05, 2.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[1.11, 2.22, 3.33], [4.44, 5.55, 6.66], [7.77, 8.88, 9.99]].",
    "output": "import numpy as np\nmatrix = np.array([[1.11, 2.22, 3.33], [4.44, 5.55, 6.66], [7.77, 8.88, 9.99]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[0.123, 0.456], [0.789, 0.321]].",
    "output": "import numpy as np\nmatrix = np.array([[0.123, 0.456], [0.789, 0.321]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[2.75, 3.25, 4.75], [5.25, 6.5, 7.25], [8.1, 9.2, 10.3]].",
    "output": "import numpy as np\nmatrix = np.array([[2.75, 3.25, 4.75], [5.25, 6.5, 7.25], [8.1, 9.2, 10.3]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.11, 0.22], [0.33, 0.44]].",
    "output": "import numpy as np\nmatrix = np.array([[0.11, 0.22], [0.33, 0.44]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[1.01, 2.02, 3.03], [4.04, 5.05, 6.06], [7.07, 8.08, 9.09]].",
    "output": "import numpy as np\nmatrix = np.array([[1.01, 2.02, 3.03], [4.04, 5.05, 6.06], [7.07, 8.08, 9.09]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[10.1, 20.2, 30.3], [5.05, 10.1, 15.15], [2.02, 4.04, 6.06]].",
    "output": "import numpy as np\nmatrix = np.array([[10.1, 20.2, 30.3], [5.05, 10.1, 15.15], [2.02, 4.04, 6.06]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check the rank of matrix [[-1.2, 2.3, -3.4], [4.5, -5.6, 6.7], [-7.8, 8.9, -9.0]].",
    "output": "import numpy as np\nmatrix = np.array([[-1.2, 2.3, -3.4], [4.5, -5.6, 6.7], [-7.8, 8.9, -9.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.0, 0.0, 0.1], [0.1, 0.0, 0.0], [0.0, 0.1, 0.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.0, 0.0, 0.1], [0.1, 0.0, 0.0], [0.0, 0.1, 0.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[1.333, 2.666], [2.666, 5.332]].",
    "output": "import numpy as np\nmatrix = np.array([[1.333, 2.666], [2.666, 5.332]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[3.14, 1.59, 2.65], [3.58, 9.79, 3.23], [8.46, 2.64, 3.38]].",
    "output": "import numpy as np\nmatrix = np.array([[3.14, 1.59, 2.65], [3.58, 9.79, 3.23], [8.46, 2.64, 3.38]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check rank of matrix [[-4.4, -3.3], [-2.2, -1.1]].",
    "output": "import numpy as np\nmatrix = np.array([[-4.4, -3.3], [-2.2, -1.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[6.6, 7.7, 8.8], [9.9, 10.1, 11.2], [12.3, 13.4, 14.5]].",
    "output": "import numpy as np\nmatrix = np.array([[6.6, 7.7, 8.8], [9.9, 10.1, 11.2], [12.3, 13.4, 14.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute rank of matrix [[0.125, 0.25], [0.375, 0.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.125, 0.25], [0.375, 0.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[0.0001, 0.0002], [0.0003, 0.0004]].",
    "output": "import numpy as np\nmatrix = np.array([[0.0001, 0.0002], [0.0003, 0.0004]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine rank of matrix [[1.5, 3.0, 4.5], [3.0, 6.0, 9.0], [4.5, 9.0, 13.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 3.0, 4.5], [3.0, 6.0, 9.0], [4.5, 9.0, 13.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[-1.25, -2.5, -3.75], [1.25, 2.5, 3.75], [-2.5, -5.0, -7.5]].",
    "output": "import numpy as np\nmatrix = np.array([[-1.25, -2.5, -3.75], [1.25, 2.5, 3.75], [-2.5, -5.0, -7.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Check the rank of matrix [[5.123, 6.234], [7.345, 8.456]].",
    "output": "import numpy as np\nmatrix = np.array([[5.123, 6.234], [7.345, 8.456]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute rank of matrix [[0.314, 1.592, 2.653], [5.897, 9.793, 2.384], [6.264, 3.383, 2.327]].",
    "output": "import numpy as np\nmatrix = np.array([[0.314, 1.592, 2.653], [5.897, 9.793, 2.384], [6.264, 3.383, 2.327]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find rank of matrix [[7.7, 8.8, 9.9], [1.1, 2.2, 3.3], [4.4, 5.5, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[7.7, 8.8, 9.9], [1.1, 2.2, 3.3], [4.4, 5.5, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate rank of matrix [[0.5, 0.3, 0.2], [1.0, 0.6, 0.4], [1.5, 0.9, 0.6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 0.3, 0.2], [1.0, 0.6, 0.4], [1.5, 0.9, 0.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-5.77, 5.208, 3.71], [-1.596, 0.835, -9.983]].",
    "output": "import numpy as np\nmatrix = np.array([[-5.77, 5.208, 3.71], [-1.596, 0.835, -9.983]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[8.993, 2.375, 7.29, 8.975], [6.246, 2.768, 9.959, 8.955], [7.939, 2.767, 6.618, 4.936], [-5.508, 2.865, -0.844, 7.82]].",
    "output": "import numpy as np\nmatrix = np.array([[8.993, 2.375, 7.29, 8.975], [6.246, 2.768, 9.959, 8.955], [7.939, 2.767, 6.618, 4.936], [-5.508, 2.865, -0.844, 7.82]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.354, -3.652, 5.876], [2.002, -6.523, 9.128]].",
    "output": "import numpy as np\nmatrix = np.array([[1.354, -3.652, 5.876], [2.002, -6.523, 9.128]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[4.621, -7.332], [1.112, 0.003], [3.141, 6.283]].",
    "output": "import numpy as np\nmatrix = np.array([[4.621, -7.332], [1.112, 0.003], [3.141, 6.283]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2.718, 3.141, 1.414], [1.732, 0.577, 2.236], [0.707, 1.618, 3.333]].",
    "output": "import numpy as np\nmatrix = np.array([[2.718, 3.141, 1.414], [1.732, 0.577, 2.236], [0.707, 1.618, 3.333]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.001, 0.002], [0.003, 0.004]].",
    "output": "import numpy as np\nmatrix = np.array([[0.001, 0.002], [0.003, 0.004]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[10.1, 20.2, 30.3], [40.4, 50.5, 60.6], [70.7, 80.8, 90.9]].",
    "output": "import numpy as np\nmatrix = np.array([[10.1, 20.2, 30.3], [40.4, 50.5, 60.6], [70.7, 80.8, 90.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-0.25, 0.75], [-1.25, 1.75], [2.5, -2.5]].",
    "output": "import numpy as np\nmatrix = np.array([[-0.25, 0.75], [-1.25, 1.75], [2.5, -2.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[5.555, -6.666, 7.777, -8.888], [9.999, -0.101, 1.212, -2.323], [3.434, -4.545, 5.656, -6.767]].",
    "output": "import numpy as np\nmatrix = np.array([[5.555, -6.666, 7.777, -8.888], [9.999, -0.101, 1.212, -2.323], [3.434, -4.545, 5.656, -6.767]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[3.333, 2.222, 1.111], [4.444, 5.555, 6.666], [7.777, 8.888, 9.999]].",
    "output": "import numpy as np\nmatrix = np.array([[3.333, 2.222, 1.111], [4.444, 5.555, 6.666], [7.777, 8.888, 9.999]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-3.21, 2.98], [-4.67, 5.43]].",
    "output": "import numpy as np\nmatrix = np.array([[-3.21, 2.98], [-4.67, 5.43]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.001, 2.002, 3.003, 4.004], [5.005, 6.006, 7.007, 8.008]].",
    "output": "import numpy as np\nmatrix = np.array([[1.001, 2.002, 3.003, 4.004], [5.005, 6.006, 7.007, 8.008]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.11, 2.22], [3.33, 4.44], [5.55, 6.66]].",
    "output": "import numpy as np\nmatrix = np.array([[1.11, 2.22], [3.33, 4.44], [5.55, 6.66]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[9.81, -1.62], [4.37, 2.19]].",
    "output": "import numpy as np\nmatrix = np.array([[9.81, -1.62], [4.37, 2.19]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.707, 0.707], [0.866, -0.5], [0.5, 0.866]].",
    "output": "import numpy as np\nmatrix = np.array([[0.707, 0.707], [0.866, -0.5], [0.5, 0.866]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2.33, 4.66], [3.99, 7.98]].",
    "output": "import numpy as np\nmatrix = np.array([[2.33, 4.66], [3.99, 7.98]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-1.1, 2.2, -3.3], [4.4, -5.5, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[-1.1, 2.2, -3.3], [4.4, -5.5, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.123, 0.456], [0.789, 1.012], [1.345, 1.678]].",
    "output": "import numpy as np\nmatrix = np.array([[0.123, 0.456], [0.789, 1.012], [1.345, 1.678]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[10.1, 20.2, 30.3], [40.4, 50.5, 60.6]].",
    "output": "import numpy as np\nmatrix = np.array([[10.1, 20.2, 30.3], [40.4, 50.5, 60.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-7.7, 8.8], [-9.9, 10.01]].",
    "output": "import numpy as np\nmatrix = np.array([[-7.7, 8.8], [-9.9, 10.01]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2.222, 4.444, 6.666], [8.888, 10.101, 12.121]].",
    "output": "import numpy as np\nmatrix = np.array([[2.222, 4.444, 6.666], [8.888, 10.101, 12.121]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.001, 1.002], [1.003, 1.004], [1.005, 1.006]].",
    "output": "import numpy as np\nmatrix = np.array([[1.001, 1.002], [1.003, 1.004], [1.005, 1.006]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[3.14, 1.59, 2.65], [5.35, 8.97, 9.32], [3.84, 6.26, 4.33]].",
    "output": "import numpy as np\nmatrix = np.array([[3.14, 1.59, 2.65], [5.35, 8.97, 9.32], [3.84, 6.26, 4.33]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[1.6, 3.7, 9.2], [2.4, 1.5, 6.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.6, 3.7, 9.2], [2.4, 1.5, 6.8]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[-2.2, 4.4, -6.6], [8.8, -10.1, 12.2], [14.3, -16.4, 18.5]].",
    "output": "import numpy as np\nmatrix = np.array([[-2.2, 4.4, -6.6], [8.8, -10.1, 12.2], [14.3, -16.4, 18.5]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.12, 0.34, 0.56], [0.78, 0.90, 0.12], [0.34, 0.56, 0.78]].",
    "output": "import numpy as np\nmatrix = np.array([[0.12, 0.34, 0.56], [0.78, 0.90, 0.12], [0.34, 0.56, 0.78]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[6.022, 3.141], [2.718, 1.618], [1.414, 0.577]].",
    "output": "import numpy as np\nmatrix = np.array([[6.022, 3.141], [2.718, 1.618], [1.414, 0.577]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[2.45, 1.39, 3.57], [4.21, 5.62, 6.33], [7.74, 8.19, 9.83]].",
    "output": "import numpy as np\nmatrix = np.array([[2.45, 1.39, 3.57], [4.21, 5.62, 6.33], [7.74, 8.19, 9.83]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[0.33, 1.67], [2.99, 3.15], [4.20, 5.31]].",
    "output": "import numpy as np\nmatrix = np.array([[0.33, 1.67], [2.99, 3.15], [4.20, 5.31]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[6.6, 3.3, 1.1], [2.2, 4.4, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[6.6, 3.3, 1.1], [2.2, 4.4, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of the matrix [[1.25, 3.75], [2.50, 7.50], [3.75, 11.25]].",
    "output": "import numpy as np\nmatrix = np.array([[1.25, 3.75], [2.50, 7.50], [3.75, 11.25]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of the matrix [[0.8, 1.6], [3.2, 6.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.8, 1.6], [3.2, 6.4]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of the matrix [[10.5, 12.6, 14.7], [15.8, 18.9, 20.0]].",
    "output": "import numpy as np\nmatrix = np.array([[10.5, 12.6, 14.7], [15.8, 18.9, 20.0]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of the matrix [[2.3, 3.4, 5.6], [1.2, 0.8, 4.1]].",
    "output": "import numpy as np\nmatrix = np.array([[2.3, 3.4, 5.6], [1.2, 0.8, 4.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of the matrix [[0.12, 0.24, 0.36], [0.48, 0.60, 0.72], [0.84, 0.96, 1.08]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.12, 0.24, 0.36], [0.48, 0.60, 0.72], [0.84, 0.96, 1.08]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of the matrix [[1.11, 0.22, -1.33], [-0.44, 0.55, 0.66]].",
    "output": "import numpy as np\nmatrix = np.array([[1.11, 0.22, -1.33], [-0.44, 0.55, 0.66]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[3.75, 5.50, 7.25], [9.00, 10.75, 12.50], [14.25, 16.00, 17.75]].",
    "output": "import numpy as np\nmatrix = np.array([[3.75, 5.50, 7.25], [9.00, 10.75, 12.50], [14.25, 16.00, 17.75]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of the matrix [[2.718, 3.141, 1.618], [0.577, 1.732, 2.236]].",
    "output": "import numpy as np\nmatrix = np.array([[2.718, 3.141, 1.618], [0.577, 1.732, 2.236]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[4.2, 8.4, 12.6], [2.1, 4.2, 6.3], [0.7, 1.4, 2.1]].",
    "output": "import numpy as np\nmatrix = np.array([[4.2, 8.4, 12.6], [2.1, 4.2, 6.3], [0.7, 1.4, 2.1]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the rank of matrix [[3.2, 4.4], [5.6, 6.8], [7.0, 8.2]].",
    "output": "import numpy as np\nmatrix = np.array([[3.2, 4.4], [5.6, 6.8], [7.0, 8.2]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[0.001, 0.002], [0.003, 0.004], [0.005, 0.006]].",
    "output": "import numpy as np\nmatrix = np.array([[0.001, 0.002], [0.003, 0.004], [0.005, 0.006]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[1.1, -2.2], [-3.3, 4.4], [5.5, -6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, -2.2], [-3.3, 4.4], [5.5, -6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[9.999, 8.888, 7.777], [6.666, 5.555, 4.444]].",
    "output": "import numpy as np\nmatrix = np.array([[9.999, 8.888, 7.777], [6.666, 5.555, 4.444]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Evaluate the rank of matrix [[3.3, 3.3, 3.3], [6.6, 6.6, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 3.3, 3.3], [6.6, 6.6, 6.6]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "What is the rank of matrix [[7.12, 6.45, 8.32], [5.99, 3.22, 2.13], [9.89, 0.01, 4.56]]?",
    "output": "import numpy as np\nmatrix = np.array([[7.12, 6.45, 8.32], [5.99, 3.22, 2.13], [9.89, 0.01, 4.56]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Compute the rank of matrix [[11.11, 22.22], [33.33, 44.44]].",
    "output": "import numpy as np\nmatrix = np.array([[11.11, 22.22], [33.33, 44.44]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Determine the rank of matrix [[13.13, 26.26, 39.39], [52.52, 65.65, 78.78]].",
    "output": "import numpy as np\nmatrix = np.array([[13.13, 26.26, 39.39], [52.52, 65.65, 78.78]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Find the rank of matrix [[4.41, 3.14], [2.17, 1.61], [0.57, 6.02]].",
    "output": "import numpy as np\nmatrix = np.array([[4.41, 3.14], [2.17, 1.61], [0.57, 6.02]])\nrank = np.linalg.matrix_rank(matrix)\nprint(f'The rank is {rank}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4, 3], [6, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 3], [6, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, -1, 3], [1, 0, 2], [4, 1, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -1, 3], [1, 0, 2], [4, 1, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[5, 2], [7, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2], [7, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, -2], [5, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[3, -2], [5, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, 3, 1], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 1], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[6, 1], [4, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1], [4, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 4, 7], [2, 5, 8], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[5, 0], [0, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0], [0, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, 0, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 0], [0, 3, 0], [0, 0, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[2, 3, 4], [1, 0, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 4], [1, 0, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, 2], [1, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2], [1, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[4, 5], [6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 5], [6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[2, 3, 1], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 1], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 0], [0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0], [0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, 2], [5, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2], [5, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 4, 7], [2, 5, 8], [3, 6, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2, -3], [4, -6]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -3], [4, -6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[5, 3, 1], [2, 4, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 3, 1], [2, 4, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0, 1], [1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1], [1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[4, 0], [0, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 0], [0, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[3, 1], [2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1], [2, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[6, 1, 1], [4, -2, 5], [2, 8, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1, 1], [4, -2, 5], [2, 8, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2, 0, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 0], [0, 3, 0], [0, 0, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[0, 2], [3, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2], [3, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 2, 3], [0, 1, 4], [5, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [5, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2, 3], [1, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3], [1, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[0, 1, 2], [3, 4, 5], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[5, -2], [7, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[5, -2], [7, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 2, 1], [2, 1, 2], [1, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [2, 1, 2], [1, 2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, 0], [0, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 0], [0, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, 3, 4], [1, 0, 1], [4, 3, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 4], [1, 0, 1], [4, 3, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, 2, 3], [3, 2, 1], [2, 3, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [3, 2, 1], [2, 3, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4, 0], [0, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 0], [0, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2, 0], [0, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0], [0, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[3, 1, 4], [1, 5, 9], [2, 6, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 3, 3], [1, 4, 3], [1, 3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 3], [1, 4, 3], [1, 3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[5, 0], [0, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0], [0, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[2, 4, 6], [1, 3, 5], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 3, 5], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, 2], [5, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2], [5, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[0, 1], [1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1], [1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[3, 2, 1], [1, 0, 2], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2, 1], [1, 0, 2], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[3, 1], [2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1], [2, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[6, 1, 1], [4, -2, 5], [2, 8, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1, 1], [4, -2, 5], [2, 8, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 2], [3, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2], [3, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[7, -4, 2], [3, 1, -5], [2, 2, -5]].",
    "output": "import numpy as np\nmatrix = np.array([[7, -4, 2], [3, 1, -5], [2, 2, -5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, -6, -7], [1, -4, 7], [-1, -3, -6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, -6, -7], [1, -4, 7], [-1, -3, -6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[-1, -1, -1], [4, 5, -3], [-1, -6, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[-1, -1, -1], [4, 5, -3], [-1, -6, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[7, 5, 7], [6, -5, -5], [6, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 5, 7], [6, -5, -5], [6, 2, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4, -6, 4], [-4, -7, -5], [2, 7, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[4, -6, 4], [-4, -7, -5], [2, 7, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[-1, -3, 4], [-1, 2, 6], [-3, -7, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[-1, -3, 4], [-1, 2, 6], [-3, -7, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2, 7, 5], [1, 2, 5], [0, 0, -4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 7, 5], [1, 2, 5], [0, 0, -4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1, -2, 2], [-5, -1, 5], [4, -1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, -2, 2], [-5, -1, 5], [4, -1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[-5, 2, -3], [-2, -1, -5], [5, -5, -3]].",
    "output": "import numpy as np\nmatrix = np.array([[-5, 2, -3], [-2, -1, -5], [5, -5, -3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[-4, 1, 2], [1, -3, 2], [-4, 4, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[-4, 1, 2], [1, -3, 2], [-4, 4, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2, 5], [3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 5], [3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[6, 2], [-5, -2]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 2], [-5, -2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3, -3], [2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[3, -3], [2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[0.5, -2], [4, -6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, -2], [4, -6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[-5, 4], [-4, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[-5, 4], [-4, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[-9, -0.2], [-10, -0.5]].",
    "output": "import numpy as np\nmatrix = np.array([[-9, -0.2], [-10, -0.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[9, 3], [4, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 3], [4, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 2, 1], [0, 3, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [0, 3, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[7, 8], [2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 8], [2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[1, 0, 5], [2, 1, 6], [3, 4, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 5], [2, 1, 6], [3, 4, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0, 3, 2], [1, -1, 4], [2, 1, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 3, 2], [1, -1, 4], [2, 1, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[4, 1], [7, -3]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 1], [7, -3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2, -1, 3], [1, 4, -2], [0, 5, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -1, 3], [1, 4, -2], [0, 5, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[6, 7], [2, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 7], [2, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.5, 1.5], [2.5, 3.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.5], [2.5, 3.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[5, 2, 1], [0, 3, 4], [2, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2, 1], [0, 3, 4], [2, 1, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1.2, 0.5], [3.4, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 0.5], [3.4, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0, 2, 1], [3, 0, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2, 1], [3, 0, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, 3], [1, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3], [1, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[1, 4, 6], [2, 1, 5], [3, 7, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 6], [2, 1, 5], [3, 7, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[4, 2, 1], [1, 5, 3], [2, 0, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 2, 1], [1, 5, 3], [2, 0, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, -2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, -2, 3], [0, 1, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[8, 2], [3, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[8, 2], [3, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[0, 1, 2], [3, 0, 1], [4, 5, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [3, 0, 1], [4, 5, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[-1, 2], [3, -4]].",
    "output": "import numpy as np\nmatrix = np.array([[-1, 2], [3, -4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[5, 0, 1], [1, 3, 0], [0, 2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0, 1], [1, 3, 0], [0, 2, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2.5, 1.2], [4.1, 3.3]].",
    "output": "import numpy as np\nmatrix = np.array([[2.5, 1.2], [4.1, 3.3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[3, 4, 1], [2, 0, 5], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 4, 1], [2, 0, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[3, 0, 0], [0, 4, 0], [0, 0, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 0, 0], [0, 4, 0], [0, 0, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.2, 1.1], [3.3, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[2.2, 1.1], [3.3, 4.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[0.5, 1.5, 2.5], [1.0, 2.0, 3.0], [4.0, 5.0, 6.0]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.5, 2.5], [1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[1.2, 3.4], [5.6, 7.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 3.4], [5.6, 7.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[3.3, 1.1, 0.9], [2.2, 4.4, 6.6], [5.5, 7.7, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 1.1, 0.9], [2.2, 4.4, 6.6], [5.5, 7.7, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1.5, 2.5], [3.5, 4.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.5], [3.5, 4.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.7, 1.3, 2.9], [4.1, 5.6, 6.2], [7.8, 8.3, 9.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.7, 1.3, 2.9], [4.1, 5.6, 6.2], [7.8, 8.3, 9.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[5.0, 1.2], [0.3, 7.7]].",
    "output": "import numpy as np\nmatrix = np.array([[5.0, 1.2], [0.3, 7.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[4.4, 2.2, 1.1], [0.5, 3.3, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[4.4, 2.2, 1.1], [0.5, 3.3, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[6.1, 2.3], [1.4, 3.5]].",
    "output": "import numpy as np\nmatrix = np.array([[6.1, 2.3], [1.4, 3.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[9.8, 7.6, 5.4], [3.2, 1.0, 0.8], [6.6, 4.4, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[9.8, 7.6, 5.4], [3.2, 1.0, 0.8], [6.6, 4.4, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[0.2, 0.4], [0.6, 0.8]].",
    "output": "import numpy as np\nmatrix = np.array([[0.2, 0.4], [0.6, 0.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[3.1, 2.4], [1.6, 4.8]].",
    "output": "import numpy as np\nmatrix = np.array([[3.1, 2.4], [1.6, 4.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.3, 0.6, 0.9], [1.2, 1.5, 1.8], [2.1, 2.4, 2.7]].",
    "output": "import numpy as np\nmatrix = np.array([[0.3, 0.6, 0.9], [1.2, 1.5, 1.8], [2.1, 2.4, 2.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[7.2, 5.1], [4.3, 6.4]].",
    "output": "import numpy as np\nmatrix = np.array([[7.2, 5.1], [4.3, 6.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[3.0, 1.0, 2.0], [0.5, 4.5, 5.5], [6.5, 7.5, 8.5]].",
    "output": "import numpy as np\nmatrix = np.array([[3.0, 1.0, 2.0], [0.5, 4.5, 5.5], [6.5, 7.5, 8.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[9.0, 3.0], [6.0, 2.0]].",
    "output": "import numpy as np\nmatrix = np.array([[9.0, 3.0], [6.0, 2.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[0.2, 0.1, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.2, 0.1, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[3.6, 2.1], [5.2, 1.7]].",
    "output": "import numpy as np\nmatrix = np.array([[3.6, 2.1], [5.2, 1.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[2.5, 1.2, 3.3], [4.4, 0.1, 2.2], [3.3, 4.4, 5.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2.5, 1.2, 3.3], [4.4, 0.1, 2.2], [3.3, 4.4, 5.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.9, 1.2], [2.3, 3.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.9, 1.2], [2.3, 3.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the matrix [[1.6, 2.7, 3.8], [4.9, 5.1, 6.2], [7.3, 8.4, 9.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.6, 2.7, 3.8], [4.9, 5.1, 6.2], [7.3, 8.4, 9.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[6.5, 5.6], [4.0, 8.9]].",
    "output": "import numpy as np\nmatrix = np.array([[6.5, 5.6], [4.0, 8.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.4, 6.4, 7.8], [0.9, 7.6, 8.3], [1.9, 7.1, 5.6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.4, 6.4, 7.8], [0.9, 7.6, 8.3], [1.9, 7.1, 5.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.6, 6.0, 4.1], [8.0, 5.8, 5.7], [5.1, 3.5, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[0.6, 6.0, 4.1], [8.0, 5.8, 5.7], [5.1, 3.5, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3.3, 4.4], [5.5, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 4.4], [5.5, 6.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.5, 1.2], [3.3, 2.1]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.2], [3.3, 2.1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1.5, 2.5, 3.5], [0.5, 4.5, 6.5], [7.5, 8.5, 9.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.5, 3.5], [0.5, 4.5, 6.5], [7.5, 8.5, 9.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[9.1, 8.2], [3.4, 1.6]].",
    "output": "import numpy as np\nmatrix = np.array([[9.1, 8.2], [3.4, 1.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4.4, 5.5], [6.6, 7.7]].",
    "output": "import numpy as np\nmatrix = np.array([[4.4, 5.5], [6.6, 7.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.4, 3.5], [4.6, 5.7]].",
    "output": "import numpy as np\nmatrix = np.array([[2.4, 3.5], [4.6, 5.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[8.3, 2.4, 1.5], [0.5, 1.2, 2.3], [3.1, 4.6, 5.8]].",
    "output": "import numpy as np\nmatrix = np.array([[8.3, 2.4, 1.5], [0.5, 1.2, 2.3], [3.1, 4.6, 5.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.1, 0.4, 1.7], [3.5, 6.4, 2.3], [7.1, 1.8, 0.5]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 0.4, 1.7], [3.5, 6.4, 2.3], [7.1, 1.8, 0.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.7, 3.2], [4.5, 5.6]].",
    "output": "import numpy as np\nmatrix = np.array([[2.7, 3.2], [4.5, 5.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4.1, 5.5], [6.6, 7.7]].",
    "output": "import numpy as np\nmatrix = np.array([[4.1, 5.5], [6.6, 7.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[5.2, 6.6], [7.7, 8.8]].",
    "output": "import numpy as np\nmatrix = np.array([[5.2, 6.6], [7.7, 8.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[6.3, 7.7], [8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[6.3, 7.7], [8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1.4, 2.3], [3.2, 4.1]].",
    "output": "import numpy as np\nmatrix = np.array([[1.4, 2.3], [3.2, 4.1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.9, 1.8], [2.7, 3.6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.9, 1.8], [2.7, 3.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3.5, 4.4], [5.5, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.5, 4.4], [5.5, 6.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[7.6, 8.9], [9.2, 2.3]].",
    "output": "import numpy as np\nmatrix = np.array([[7.6, 8.9], [9.2, 2.3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.1, 3.6], [4.7, 5.8]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 3.6], [4.7, 5.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[8.3, 9.1], [1.2, 3.4]].",
    "output": "import numpy as np\nmatrix = np.array([[8.3, 9.1], [1.2, 3.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[0.5, 1.3, 2.1], [3.4, 4.6, 5.8], [6.9, 7.7, 8.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.3, 2.1], [3.4, 4.6, 5.8], [6.9, 7.7, 8.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[9.1, 8.2, 7.3], [6.4, 5.5, 4.6], [3.7, 2.8, 1.9]].",
    "output": "import numpy as np\nmatrix = np.array([[9.1, 8.2, 7.3], [6.4, 5.5, 4.6], [3.7, 2.8, 1.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1.2, 0.5, 3.1], [4.8, 6.9, 2.3], [7.1, 8.4, 9.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 0.5, 3.1], [4.8, 6.9, 2.3], [7.1, 8.4, 9.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.4, 3.5, 1.6], [5.7, 6.8, 4.9], [7.0, 8.1, 9.2]].",
    "output": "import numpy as np\nmatrix = np.array([[2.4, 3.5, 1.6], [5.7, 6.8, 4.9], [7.0, 8.1, 9.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[3.3, 4.4, 5.5], [6.6, 7.7, 8.8], [9.9, 1.1, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 4.4, 5.5], [6.6, 7.7, 8.8], [9.9, 1.1, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4.2, 3.1, 2.0], [1.9, 5.8, 6.7], [7.6, 8.5, 9.4]].",
    "output": "import numpy as np\nmatrix = np.array([[4.2, 3.1, 2.0], [1.9, 5.8, 6.7], [7.6, 8.5, 9.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[5.5, 6.6, 7.7], [8.8, 9.9, 1.1], [2.2, 3.3, 4.4]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 6.6, 7.7], [8.8, 9.9, 1.1], [2.2, 3.3, 4.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[6.6, 5.4, 3.3], [2.2, 1.1, 0.9], [8.8, 7.7, 6.5]].",
    "output": "import numpy as np\nmatrix = np.array([[6.6, 5.4, 3.3], [2.2, 1.1, 0.9], [8.8, 7.7, 6.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[7.8, 6.6, 5.4], [4.3, 3.2, 2.1], [1.0, 9.9, 8.8]].",
    "output": "import numpy as np\nmatrix = np.array([[7.8, 6.6, 5.4], [4.3, 3.2, 2.1], [1.0, 9.9, 8.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[9.9, 8.8], [7.7, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[9.9, 8.8], [7.7, 6.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1.1, 0.9], [2.8, 3.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 0.9], [2.8, 3.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[4.4, 3.3], [2.2, 1.1]].",
    "output": "import numpy as np\nmatrix = np.array([[4.4, 3.3], [2.2, 1.1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[7.1, 8.2], [9.3, 0.4]].",
    "output": "import numpy as np\nmatrix = np.array([[7.1, 8.2], [9.3, 0.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the 3x3 matrix [[2, 4, 6], [1, 3, 5], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 3, 5], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 0, 2], [0, 1, 0], [3, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2], [0, 1, 0], [3, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[5, 2, 1], [0, 3, 7], [6, 8, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2, 1], [0, 3, 7], [6, 8, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[9, 4, 3], [2, 8, 1], [7, 0, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 4, 3], [2, 8, 1], [7, 0, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[3, 1, 2], [0, 4, 5], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1, 2], [0, 4, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[3, -2, 5], [1, 0, -1], [4, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[3, -2, 5], [1, 0, -1], [4, 2, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the 4x4 matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 1, 2, 3], [4, 5, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 1, 2, 3], [4, 5, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2, 4, 1], [3, 1, 5], [6, 2, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 1], [3, 1, 5], [6, 2, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[0, 1, 2], [3, 4, 5], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[7, 8, 9], [1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 8, 9], [1, 2, 3], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[10, 20, 30], [40, 50, 60], [70, 80, 90]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [13, 14, 15, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of a 4x4 matrix [[2, 0, 1, 3], [4, 1, 0, 2], [3, 2, 1, 1], [5, 3, 2, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 1, 3], [4, 1, 0, 2], [3, 2, 1, 1], [5, 3, 2, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[6, 2, 3, 4], [1, 5, 0, 7], [9, 8, 6, 3], [2, 1, 4, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 2, 3, 4], [1, 5, 0, 7], [9, 8, 6, 3], [2, 1, 4, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 2, 3], [3, 2, 1], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [3, 2, 1], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[2, 4, 6, 8], [1, 3, 5, 7], [9, 11, 13, 15], [0, 2, 4, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6, 8], [1, 3, 5, 7], [9, 11, 13, 15], [0, 2, 4, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate determinant of [[1, 2, 3], [4, 5, 6], [0, 1, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [0, 1, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[9, 6, 3], [2, 5, 8], [7, 1, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 6, 3], [2, 5, 8], [7, 1, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[4, 1, 0, 3], [2, 2, 3, 1], [5, 6, 7, 8], [0, 9, 1, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 1, 0, 3], [2, 2, 3, 1], [5, 6, 7, 8], [0, 9, 1, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate determinant of [[10, 11, 12], [13, 14, 15], [16, 17, 18]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[3, 5, 1, 2], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 5, 1, 2], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[0, 2, 3, 1], [4, 0, 6, 2], [7, 8, 0, 5], [9, 1, 2, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2, 3, 1], [4, 0, 6, 2], [7, 8, 0, 5], [9, 1, 2, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 2, 3, 4], [4, 3, 2, 1], [1, 0, 1, 0], [0, 1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [4, 3, 2, 1], [1, 0, 1, 0], [0, 1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[5, 0, 1, 3], [2, 6, 0, 1], [4, 2, 7, 0], [3, 1, 5, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0, 1, 3], [2, 6, 0, 1], [4, 2, 7, 0], [3, 1, 5, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[9, 8, 7, 6], [5, 4, 3, 2], [1, 2, 3, 4], [0, 1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 8, 7, 6], [5, 4, 3, 2], [1, 2, 3, 4], [0, 1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21], [22, 23, 24, 25]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21], [22, 23, 24, 25]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[6, 1, 8, 3], [7, 5, 9, 2], [4, 3, 2, 1], [5, 4, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1, 8, 3], [7, 5, 9, 2], [4, 3, 2, 1], [5, 4, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[8, 4, 2, 6], [3, 1, 5, 7], [9, 0, 8, 4], [2, 3, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[8, 4, 2, 6], [3, 1, 5, 7], [9, 0, 8, 4], [2, 3, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[0, 2, 3, 1], [1, 0, 2, 3], [3, 1, 0, 2], [2, 3, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2, 3, 1], [1, 0, 2, 3], [3, 1, 0, 2], [2, 3, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[4, 2, 1, 5], [3, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 2, 1, 5], [3, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, 2, 1, 0], [0, 1, 0, 1], [3, 0, 1, 2], [4, 5, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1, 0], [0, 1, 0, 1], [3, 0, 1, 2], [4, 5, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[3, 6, 9, 2], [1, 2, 3, 4], [0, 5, 7, 6], [8, 4, 2, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 6, 9, 2], [1, 2, 3, 4], [0, 5, 7, 6], [8, 4, 2, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1, 1, 1, 1], [2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1, 1], [2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[3, 0, 2, -1], [1, 2, 0, -2], [4, 0, 6, -3], [5, 0, 2, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 0, 2, -1], [1, 2, 0, -2], [4, 0, 6, -3], [5, 0, 2, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[7, 2, 1, 0], [0, 3, -1, 2], [4, 0, 5, 6], [9, 8, 3, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 2, 1, 0], [0, 3, -1, 2], [4, 0, 5, 6], [9, 8, 3, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[1, 3, 5, 7], [2, 4, 6, 8], [1, 0, 1, 0], [0, 1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5, 7], [2, 4, 6, 8], [1, 0, 1, 0], [0, 1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[2, 4, 6, 8], [1, 3, 5, 7], [0, 2, 4, 6], [1, 1, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6, 8], [1, 3, 5, 7], [0, 2, 4, 6], [1, 1, 1, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12], [0, 0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2, 0, 1, 3], [1, 0, 2, 1], [4, 1, 3, 0], [5, 6, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 1, 3], [1, 0, 2, 1], [4, 1, 3, 0], [5, 6, 2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[8, 6, 4, 2], [7, 5, 3, 1], [6, 4, 2, 0], [5, 3, 1, -1]].",
    "output": "import numpy as np\nmatrix = np.array([[8, 6, 4, 2], [7, 5, 3, 1], [6, 4, 2, 0], [5, 3, 1, -1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, -1, 2, -2], [-3, 3, -4, 4], [5, -5, 6, -6], [-7, 7, -8, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[1, -1, 2, -2], [-3, 3, -4, 4], [5, -5, 6, -6], [-7, 7, -8, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[3, 1, 4, 1], [5, 9, 2, 6], [5, 3, 5, 8], [9, 7, 9, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 1, 4, 1], [5, 9, 2, 6], [5, 3, 5, 8], [9, 7, 9, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of the identity matrix of order 4.",
    "output": "import numpy as np\nmatrix = np.identity(4)\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[4, 3, 2, 1], [0, 1, 2, 3], [1, 0, 1, 0], [0, 1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 3, 2, 1], [0, 1, 2, 3], [1, 0, 1, 0], [0, 1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[5, 2, 0, 1], [1, 4, 3, 0], [0, 1, 5, 2], [2, 0, 1, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2, 0, 1], [1, 4, 3, 0], [0, 1, 5, 2], [2, 0, 1, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [0, 1, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5, 7], [2, 4, 6, 8], [9, 10, 11, 12], [0, 1, 2, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[1, 2, 3, 4], [0, 1, 4, 7], [0, 0, 1, 3], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [0, 1, 4, 7], [0, 0, 1, 3], [0, 0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 0, 2, -1], [3, 0, 0, 5], [2, 1, 4, -3], [1, 0, 5, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2, -1], [3, 0, 0, 5], [2, 1, 4, -3], [1, 0, 5, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[2, -3, 1, 5], [4, 0, -2, 3], [-1, 2, 3, 1], [0, 1, 4, -2]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -3, 1, 5], [4, 0, -2, 3], [-1, 2, 3, 1], [0, 1, 4, -2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[6, 1, 1, 3], [4, -2, 5, 1], [2, 8, 7, 6], [3, 1, 9, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1, 1, 3], [4, -2, 5, 1], [2, 8, 7, 6], [3, 1, 9, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[5, 0, 0, 0], [0, 4, 0, 0], [0, 0, 3, 0], [0, 0, 0, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 0, 0, 0], [0, 4, 0, 0], [0, 0, 3, 0], [0, 0, 0, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[7, 5, 3, 1], [6, 4, 2, 0], [5, 3, 1, -1], [4, 2, 0, -2]].",
    "output": "import numpy as np\nmatrix = np.array([[7, 5, 3, 1], [6, 4, 2, 0], [5, 3, 1, -1], [4, 2, 0, -2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1, 2, 1, 0], [3, 6, 3, 0], [0, 1, 0, 1], [2, 4, 2, 2]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1, 0], [3, 6, 3, 0], [0, 1, 0, 1], [2, 4, 2, 2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1], [0, 1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1], [0, 1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[10, 0, 0, 0], [0, 20, 0, 0], [0, 0, 30, 0], [0, 0, 0, 40]].",
    "output": "import numpy as np\nmatrix = np.array([[10, 0, 0, 0], [0, 20, 0, 0], [0, 0, 30, 0], [0, 0, 0, 40]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[1, 2, 3, 0], [0, 1, 4, 0], [0, 0, 1, 0], [0, 0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3, 0], [0, 1, 4, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[2, 1, 0, -1], [0, 3, 2, 1], [1, 0, 4, 2], [3, 2, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 1, 0, -1], [0, 3, 2, 1], [1, 0, 4, 2], [3, 2, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[4, 1, 0, 0], [3, 4, 1, 0], [2, 3, 4, 1], [1, 2, 3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 1, 0, 0], [3, 4, 1, 0], [2, 3, 4, 1], [1, 2, 3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[2, 5, 7], [6, 3, 4], [5, -2, -3]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 5, 7], [6, 3, 4], [5, -2, -3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, 0, 2], [-1, 3, 1], [3, 2, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2], [-1, 3, 1], [3, 2, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[4, 1, 2], [0, 3, 1], [7, 2, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 1, 2], [0, 3, 1], [7, 2, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[5.5, 3.2, 1.1], [2.0, 4.0, 3.3], [1.1, 0.5, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[5.5, 3.2, 1.1], [2.0, 4.0, 3.3], [1.1, 0.5, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[0, 1, 2], [3, 4, 5], [6, 7, 8]]?",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[2, 0, 1], [1, 3, 2], [1, 0, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 1], [1, 3, 2], [1, 0, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[3.3, 2.2, 1.1], [1.0, 1.0, 1.0], [0.0, 0.5, 0.5]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.2, 1.1], [1.0, 1.0, 1.0], [0.0, 0.5, 0.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2, 3, 4], [4, 3, 2], [1, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 4], [4, 3, 2], [1, 2, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[1, 4, 6], [0, 1, 0], [3, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 6], [0, 1, 0], [3, 2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[5, 1, 0], [0, 3, 2], [4, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 1, 0], [0, 3, 2], [4, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[10, -5, 3], [0, 4, 2], [7, 1, -1]].",
    "output": "import numpy as np\nmatrix = np.array([[10, -5, 3], [0, 4, 2], [7, 1, -1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[3.5, 0, 2.1], [1.1, 4.4, 0.5], [2.2, 1.3, 3.3]]?",
    "output": "import numpy as np\nmatrix = np.array([[3.5, 0, 2.1], [1.1, 4.4, 0.5], [2.2, 1.3, 3.3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[0, 2, -1], [3, -4, 5], [6, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2, -1], [3, -4, 5], [6, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[1, 2, 1], [0, 1, 0], [2, 4, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [0, 1, 0], [2, 4, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[1.1, 0.0, 1.1], [0.0, 1.1, 1.1], [1.1, 1.1, 0.0]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 0.0, 1.1], [0.0, 1.1, 1.1], [1.1, 1.1, 0.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[2, 1, 3], [1, 0, 2], [3, 4, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 1, 3], [1, 0, 2], [3, 4, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[1, 1, 1], [1, 2, 3], [1, 4, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1], [1, 2, 3], [1, 4, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of matrix [[2, 2, 3], [1, 1, 1], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 2, 3], [1, 1, 1], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[0, 1, 0], [2, 3, 4], [5, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 0], [2, 3, 4], [5, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[4, 5, 6], [7, 8, 9], [1, 2, 3]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 5, 6], [7, 8, 9], [1, 2, 3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[1, 3, 2], [4, 0, 1], [6, 5, 7]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 2], [4, 0, 1], [6, 5, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[9, 8, 7], [6, 5, 4], [3, 2, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[3.3, 2.1, 1.0], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.1, 1.0], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[2.5, 3.1, 1.2], [4.3, 1.1, 2.0], [0.5, 6.2, 3.3]].",
    "output": "import numpy as np\nmatrix = np.array([[2.5, 3.1, 1.2], [4.3, 1.1, 2.0], [0.5, 6.2, 3.3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[3, 2, 1], [6, 5, 4], [9, 8, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2, 1], [6, 5, 4], [9, 8, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[4.1, 5.2, 6.3], [7.4, 8.5, 9.6], [1.7, 2.8, 3.9]].",
    "output": "import numpy as np\nmatrix = np.array([[4.1, 5.2, 6.3], [7.4, 8.5, 9.6], [1.7, 2.8, 3.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2.1, 4.2, 3.3], [1.4, 5.5, 6.6], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 4.2, 3.3], [1.4, 5.5, 6.6], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[10, 11, 12], [13, 14, 15], [16, 17, 18]]?",
    "output": "import numpy as np\nmatrix = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[5, 4, 3], [2, 1, 0], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 4, 3], [2, 1, 0], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[0.9, 1.2, 2.3], [3.4, 4.5, 5.6], [6.7, 7.8, 8.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.9, 1.2, 2.3], [3.4, 4.5, 5.6], [6.7, 7.8, 8.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[1, 2, 0], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 0], [0, 1, 3], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[3.3, 1.1, 2.2], [4.4, 6.6, 5.5], [7.7, 8.8, 9.9]]?",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 1.1, 2.2], [4.4, 6.6, 5.5], [7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[2, 4, 6], [1, 3, 5], [0, 2, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 4, 6], [1, 3, 5], [0, 2, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of matrix [[6.6, 5.5, 4.4], [3.3, 2.2, 1.1], [0.0, 1.1, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[6.6, 5.5, 4.4], [3.3, 2.2, 1.1], [0.0, 1.1, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1.2, 3.4, 5.6], [7.8, 9.0, 1.2], [3.4, 5.6, 7.8]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 3.4, 5.6], [7.8, 9.0, 1.2], [3.4, 5.6, 7.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[0.5, 1.5, 2.5], [3.5, 4.5, 5.5], [6.5, 7.5, 8.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.5, 2.5], [3.5, 4.5, 5.5], [6.5, 7.5, 8.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[3, 3, 3], [2, 2, 2], [1, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 3, 3], [2, 2, 2], [1, 1, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[2.0, 3.0, 4.0], [1.0, 2.0, 3.0], [0.0, 1.0, 2.0]].",
    "output": "import numpy as np\nmatrix = np.array([[2.0, 3.0, 4.0], [1.0, 2.0, 3.0], [0.0, 1.0, 2.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[5, 2, 1], [0, 3, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2, 1], [0, 3, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[4.5, 3.5, 2.5], [1.5, 0.5, -0.5], [6.5, 7.5, 8.5]]?",
    "output": "import numpy as np\nmatrix = np.array([[4.5, 3.5, 2.5], [1.5, 0.5, -0.5], [6.5, 7.5, 8.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[2.2, 1.1, 0.0], [3.3, 2.2, 1.1], [4.4, 3.3, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[2.2, 1.1, 0.0], [3.3, 2.2, 1.1], [4.4, 3.3, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of matrix [[9, 0, 1], [2, 3, 4], [5, 6, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[9, 0, 1], [2, 3, 4], [5, 6, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Evaluate the determinant of [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of matrix [[3.14, 1.59, 2.65], [5.35, 8.97, 9.32], [3.84, 6.26, 4.33]].",
    "output": "import numpy as np\nmatrix = np.array([[3.14, 1.59, 2.65], [5.35, 8.97, 9.32], [3.84, 6.26, 4.33]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the 4x4 matrix [[1.1, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8], [9.9, 1.0, 2.1, 3.2], [4.3, 5.4, 6.5, 7.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.1, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8], [9.9, 1.0, 2.1, 3.2], [4.3, 5.4, 6.5, 7.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the 4x4 matrix [[0.5, 1.2, 3.4, 4.1], [2.3, 0.8, 6.5, 7.1], [5.9, 2.2, 3.3, 0.4], [9.1, 8.2, 7.3, 6.4]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.2, 3.4, 4.1], [2.3, 0.8, 6.5, 7.1], [5.9, 2.2, 3.3, 0.4], [9.1, 8.2, 7.3, 6.4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[7.1, 3.3, 0.9, 4.7], [1.8, 2.6, 5.3, 6.1], [0.2, 9.4, 8.3, 7.5], [3.3, 4.4, 5.5, 6.6]].",
    "output": "import numpy as np\nmatrix = np.array([[7.1, 3.3, 0.9, 4.7], [1.8, 2.6, 5.3, 6.1], [0.2, 9.4, 8.3, 7.5], [3.3, 4.4, 5.5, 6.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[4.1, 5.2, 6.3, 7.4], [3.5, 2.6, 1.7, 0.8], [9.0, 8.1, 7.2, 6.3], [5.4, 4.5, 3.6, 2.7]].",
    "output": "import numpy as np\nmatrix = np.array([[4.1, 5.2, 6.3, 7.4], [3.5, 2.6, 1.7, 0.8], [9.0, 8.1, 7.2, 6.3], [5.4, 4.5, 3.6, 2.7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of the matrix [[1.5, 2.6, 3.7, 4.8], [4.9, 5.1, 6.2, 7.3], [7.4, 8.5, 9.6, 1.7], [2.8, 3.9, 4.0, 5.1]]?",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.6, 3.7, 4.8], [4.9, 5.1, 6.2, 7.3], [7.4, 8.5, 9.6, 1.7], [2.8, 3.9, 4.0, 5.1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the 4x4 matrix [[3.1, 4.2, 5.3, 6.4], [1.5, 2.6, 3.7, 4.8], [5.9, 6.0, 7.1, 8.2], [2.3, 3.4, 4.5, 5.6]].",
    "output": "import numpy as np\nmatrix = np.array([[3.1, 4.2, 5.3, 6.4], [1.5, 2.6, 3.7, 4.8], [5.9, 6.0, 7.1, 8.2], [2.3, 3.4, 4.5, 5.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[2.4, 3.5, 4.6, 5.7], [6.8, 7.9, 8.0, 1.1], [2.2, 3.3, 4.4, 5.5], [6.6, 7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nmatrix = np.array([[2.4, 3.5, 4.6, 5.7], [6.8, 7.9, 8.0, 1.1], [2.2, 3.3, 4.4, 5.5], [6.6, 7.7, 8.8, 9.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[9.9, 8.8, 7.7, 6.6], [5.5, 4.4, 3.3, 2.2], [1.1, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8]].",
    "output": "import numpy as np\nmatrix = np.array([[9.9, 8.8, 7.7, 6.6], [5.5, 4.4, 3.3, 2.2], [1.1, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[0.1, 1.2, 2.3, 3.4], [4.5, 5.6, 6.7, 7.8], [8.9, 9.0, 0.1, 1.2], [2.3, 3.4, 4.5, 5.6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.1, 1.2, 2.3, 3.4], [4.5, 5.6, 6.7, 7.8], [8.9, 9.0, 0.1, 1.2], [2.3, 3.4, 4.5, 5.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of matrix [[3.3, 2.2, 1.1, 0.9], [4.5, 5.6, 6.7, 7.8], [8.9, 9.0, 1.1, 2.2], [3.3, 4.4, 5.5, 6.6]]?",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.2, 1.1, 0.9], [4.5, 5.6, 6.7, 7.8], [8.9, 9.0, 1.1, 2.2], [3.3, 4.4, 5.5, 6.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[6.2, 4.8, 3.9, 1.2], [2.4, 6.5, 7.1, 3.3], [1.8, 2.2, 9.0, 0.5], [7.7, 8.1, 3.3, 2.9]].",
    "output": "import numpy as np\nmatrix = np.array([[6.2, 4.8, 3.9, 1.2], [2.4, 6.5, 7.1, 3.3], [1.8, 2.2, 9.0, 0.5], [7.7, 8.1, 3.3, 2.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of the matrix [[2.1, 3.3, 5.5, 7.7], [1.0, 4.4, 6.6, 8.8], [9.9, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8]].",
    "output": "import numpy as np\nmatrix = np.array([[2.1, 3.3, 5.5, 7.7], [1.0, 4.4, 6.6, 8.8], [9.9, 2.2, 3.3, 4.4], [5.5, 6.6, 7.7, 8.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of matrix [[4.4, 3.3, 2.2, 1.1], [5.6, 6.7, 7.8, 8.9], [1.2, 3.4, 5.6, 7.8], [9.0, 8.1, 7.2, 6.3]].",
    "output": "import numpy as np\nmatrix = np.array([[4.4, 3.3, 2.2, 1.1], [5.6, 6.7, 7.8, 8.9], [1.2, 3.4, 5.6, 7.8], [9.0, 8.1, 7.2, 6.3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1.5, 3.7, 4.2, 6.1], [0.5, 2.6, 5.9, 7.3], [8.8, 6.4, 3.1, 9.2], [2.3, 4.4, 6.5, 8.6]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 3.7, 4.2, 6.1], [0.5, 2.6, 5.9, 7.3], [8.8, 6.4, 3.1, 9.2], [2.3, 4.4, 6.5, 8.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[7.4, 5.1, 3.3, 2.8], [1.6, 0.9, 4.4, 6.7], [8.2, 9.3, 7.5, 1.4], [3.6, 2.1, 4.8, 5.5]]?",
    "output": "import numpy as np\nmatrix = np.array([[7.4, 5.1, 3.3, 2.8], [1.6, 0.9, 4.4, 6.7], [8.2, 9.3, 7.5, 1.4], [3.6, 2.1, 4.8, 5.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[2, 0, 1], [3, 0, 0], [5, 1, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 0, 1], [3, 0, 0], [5, 1, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of the matrix [[1, 0, 2], [-1, 3, 1], [3, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2], [-1, 3, 1], [3, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[0, 2, 1], [3, 1, 0], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 2, 1], [3, 1, 0], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[3, 2, -1], [2, -2, 4], [-1, 0.5, -1]].",
    "output": "import numpy as np\nmatrix = np.array([[3, 2, -1], [2, -2, 4], [-1, 1, -1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[4, 3, 2], [1, 1, 1], [7, 6, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[4, 3, 2], [1, 1, 1], [7, 6, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[5, 6, 7], [1, 2, 3], [8, 9, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 6, 7], [1, 2, 3], [8, 9, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[2, 5, 7], [6, 3, 4], [5, -2, -3]]?",
    "output": "import numpy as np\nmatrix = np.array([[2, 5, 7], [6, 3, 4], [5, -2, -3]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1, 3, 5], [2, 4, 7], [1, 1, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 3, 5], [2, 4, 7], [1, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[0, 1, 2], [3, 4, 5], [6, 7, 8]].",
    "output": "import numpy as np\nmatrix = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[2, -3, 1], [2, 0, -1], [1, 4, 5]].",
    "output": "import numpy as np\nmatrix = np.array([[2, -3, 1], [2, 0, -1], [1, 4, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[1, 2, 3], [2, 3, 4], [3, 4, 5]]?",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[6, 1, 1], [4, -2, 5], [2, 8, 7]].",
    "output": "import numpy as np\nmatrix = np.array([[6, 1, 1], [4, -2, 5], [2, 8, 7]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[2, 3, 1], [4, 1, 5], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 1], [4, 1, 5], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[9, 8, 7], [6, 5, 4], [3, 2, 1]]?",
    "output": "import numpy as np\nmatrix = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 4, 5], [6, 7, 8], [9, 10, 11]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 4, 5], [6, 7, 8], [9, 10, 11]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[2, 1, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nmatrix = np.array([[2, 1, 3], [4, 5, 6], [7, 8, 9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1, 2, 1], [0, 1, 0], [2, 3, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 2, 1], [0, 1, 0], [2, 3, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1, 1, 1], [0, 1, 0], [1, 0, 1]].",
    "output": "import numpy as np\nmatrix = np.array([[1, 1, 1], [0, 1, 0], [1, 0, 1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[2, 3, 4], [1, 0, 0], [0, 1, 0]]?",
    "output": "import numpy as np\nmatrix = np.array([[2, 3, 4], [1, 0, 0], [0, 1, 0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[5, 2, 1], [0, 3, 0], [1, 0, 4]].",
    "output": "import numpy as np\nmatrix = np.array([[5, 2, 1], [0, 3, 0], [1, 0, 4]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of the matrix [[1.2, 2.5, 3.1, 4.0], [5.6, 6.3, 7.2, 8.4], [9.1, 10.7, 11.5, 12.6], [13.3, 14.8, 15.9, 16.0]].",
    "output": "import numpy as np\nmatrix = np.array([[1.2, 2.5, 3.1, 4.0], [5.6, 6.3, 7.2, 8.4], [9.1, 10.7, 11.5, 12.6], [13.3, 14.8, 15.9, 16.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[2.3, 4.5, 1.1, 6.7], [7.2, 3.3, 8.4, 9.1], [10.0, 11.3, 2.6, 12.8], [13.5, 14.6, 15.7, 1.0]].",
    "output": "import numpy as np\nmatrix = np.array([[2.3, 4.5, 1.1, 6.7], [7.2, 3.3, 8.4, 9.1], [10.0, 11.3, 2.6, 12.8], [13.5, 14.6, 15.7, 1.0]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[0.5, 1.1, 2.2, 3.3], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.1, 11.2], [12.3, 13.4, 14.5, 15.6]].",
    "output": "import numpy as np\nmatrix = np.array([[0.5, 1.1, 2.2, 3.3], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.1, 11.2], [12.3, 13.4, 14.5, 15.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[3.3, 2.2, 1.1, 0.0], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.0, 11.1], [12.2, 13.3, 14.4, 15.5]]?",
    "output": "import numpy as np\nmatrix = np.array([[3.3, 2.2, 1.1, 0.0], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.0, 11.1], [12.2, 13.3, 14.4, 15.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[2.2, 4.4, 6.6, 8.8], [1.1, 3.3, 5.5, 7.7], [9.9, 8.8, 7.7, 6.6], [5.5, 4.4, 3.3, 2.2]].",
    "output": "import numpy as np\nmatrix = np.array([[2.2, 4.4, 6.6, 8.8], [1.1, 3.3, 5.5, 7.7], [9.9, 8.8, 7.7, 6.6], [5.5, 4.4, 3.3, 2.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[7.5, 6.3, 5.1, 4.9], [3.7, 2.5, 1.3, 0.1], [8.6, 9.4, 10.2, 11.0], [12.8, 13.6, 14.4, 15.2]].",
    "output": "import numpy as np\nmatrix = np.array([[7.5, 6.3, 5.1, 4.9], [3.7, 2.5, 1.3, 0.1], [8.6, 9.4, 10.2, 11.0], [12.8, 13.6, 14.4, 15.2]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[1.5, 2.6, 3.7, 4.8], [5.9, 6.0, 7.1, 8.2], [9.3, 10.4, 11.5, 12.6], [13.7, 14.8, 15.9, 16.1]].",
    "output": "import numpy as np\nmatrix = np.array([[1.5, 2.6, 3.7, 4.8], [5.9, 6.0, 7.1, 8.2], [9.3, 10.4, 11.5, 12.6], [13.7, 14.8, 15.9, 16.1]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[0.0, 1.1, 2.2, 3.3], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.0, 11.1], [12.2, 13.3, 14.4, 15.5]].",
    "output": "import numpy as np\nmatrix = np.array([[0.0, 1.1, 2.2, 3.3], [4.4, 5.5, 6.6, 7.7], [8.8, 9.9, 10.0, 11.1], [12.2, 13.3, 14.4, 15.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Compute the determinant of [[9.0, 8.1, 7.2, 6.3], [5.4, 4.5, 3.6, 2.7], [1.8, 0.9, 0.0, -0.9], [-1.8, -2.7, -3.6, -4.5]].",
    "output": "import numpy as np\nmatrix = np.array([[9.0, 8.1, 7.2, 6.3], [5.4, 4.5, 3.6, 2.7], [1.8, 0.9, 0.0, -0.9], [-1.8, -2.7, -3.6, -4.5]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Calculate the determinant of [[0.4, 1.5, 2.6, 3.7], [4.8, 5.9, 6.0, 7.1], [8.2, 9.3, 10.4, 11.5], [12.6, 13.7, 14.8, 15.9]].",
    "output": "import numpy as np\nmatrix = np.array([[0.4, 1.5, 2.6, 3.7], [4.8, 5.9, 6.0, 7.1], [8.2, 9.3, 10.4, 11.5], [12.6, 13.7, 14.8, 15.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Determine the determinant of [[5.1, 6.2, 7.3, 8.4], [9.5, 10.6, 11.7, 12.8], [13.9, 14.0, 15.1, 16.2], [17.3, 18.4, 19.5, 20.6]].",
    "output": "import numpy as np\nmatrix = np.array([[5.1, 6.2, 7.3, 8.4], [9.5, 10.6, 11.7, 12.8], [13.9, 14.0, 15.1, 16.2], [17.3, 18.4, 19.5, 20.6]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "What is the determinant of [[0.3, 1.6, 2.9, 4.2], [5.5, 6.8, 8.1, 9.4], [10.7, 12.0, 13.3, 14.6], [15.9, 17.2, 18.5, 19.8]]?",
    "output": "import numpy as np\nmatrix = np.array([[0.3, 1.6, 2.9, 4.2], [5.5, 6.8, 8.1, 9.4], [10.7, 12.0, 13.3, 14.6], [15.9, 17.2, 18.5, 19.8]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the determinant of [[1.4, 2.5, 3.6, 4.7], [5.8, 6.9, 7.0, 8.1], [9.2, 10.3, 11.4, 12.5], [13.6, 14.7, 15.8, 16.9]].",
    "output": "import numpy as np\nmatrix = np.array([[1.4, 2.5, 3.6, 4.7], [5.8, 6.9, 7.0, 8.1], [9.2, 10.3, 11.4, 12.5], [13.6, 14.7, 15.8, 16.9]])\ndet = np.linalg.det(matrix)\nprint(f'The determinant is {det}')"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 0], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, 2], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 2], [1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[1, 2], [2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[3, -2], [4, -1]].",
    "output": "import numpy as np\nA = np.array([[3, -2], [4, -1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[1, 0, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [0, 2, 0], [0, 0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[5, 4, 2], [4, 5, 2], [2, 2, 2]].",
    "output": "import numpy as np\nA = np.array([[5, 4, 2], [4, 5, 2], [2, 2, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[0, 1, 0], [0, 0, 1], [1, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[6, 2, 1], [2, 3, 1], [1, 1, 1]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 3, 1], [1, 1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[4, 1, 2], [1, 3, 0], [2, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2], [1, 3, 0], [2, 0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[1, 2, 3], [2, 1, 2], [3, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 1, 2], [3, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[7, 5, 1], [5, 7, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[7, 5, 1], [5, 7, 1], [1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[2, -2, 0], [-2, 2, -2], [0, -2, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -2, 0], [-2, 2, -2], [0, -2, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the identity matrix I = [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.eye(3)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a diagonal matrix A = [[5, 0, 0], [0, 3, 0], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[5, 0, 0], [0, 3, 0], [0, 0, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[8, 1, 6], [3, 5, 7], [4, 9, 2]].",
    "output": "import numpy as np\nA = np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[0, 2, -1], [2, 3, 1], [-1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[0, 2, -1], [2, 3, 1], [-1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[1, 3, 1], [3, 1, 3], [1, 3, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 1], [3, 1, 3], [1, 3, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, -2, 1], [-2, 4, -2], [1, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 4, -2], [1, -2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[10, -5], [-5, 10]].",
    "output": "import numpy as np\nA = np.array([[10, -5], [-5, 10]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[1, 4, 3], [4, 1, 2], [3, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 4, 3], [4, 1, 2], [3, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a symmetric matrix A = [[6, 2, -1], [2, 3, 1], [-1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[6, 2, -1], [2, 3, 1], [-1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[2, 2, 1], [1, 3, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 1], [1, 3, 1], [1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[5, -2, 2], [-2, 5, -2], [2, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -2, 2], [-2, 5, -2], [2, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, 1, 2], [2, 0, 1], [1, 2, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2], [2, 0, 1], [1, 2, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[3, 1], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[1, -1], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -1], [1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[0, 2], [2, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2], [2, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[5, 2], [2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 2], [2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[7, -2], [-2, 7]].",
    "output": "import numpy as np\nA = np.array([[7, -2], [-2, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, 0, 1], [0, 4, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[4, 0, 1], [0, 4, 1], [1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[3, -1, 0], [-1, 3, -1], [0, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 0], [-1, 3, -1], [0, -1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[2, 1, 1], [1, 2, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [1, 2, 1], [1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[9, 3, 1], [3, 7, 2], [1, 2, 4]].",
    "output": "import numpy as np\nA = np.array([[9, 3, 1], [3, 7, 2], [1, 2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[6, -3, 2], [-3, 6, -1], [2, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[6, -3, 2], [-3, 6, -1], [2, -1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[2, 2, 1], [2, 3, 2], [1, 2, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 1], [2, 3, 2], [1, 2, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[4, 1, 1], [1, 4, 1], [1, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 1], [1, 4, 1], [1, 1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[5, 2, 2], [2, 3, 1], [2, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 2], [2, 3, 1], [2, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[1, 2, 3], [2, 1, 2], [3, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 1, 2], [3, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[4, -2, 1], [-2, 4, -2], [1, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 4, -2], [1, -2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[5, -2, 2], [-2, 5, -2], [2, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -2, 2], [-2, 5, -2], [2, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[1, 0, 0], [0, 2, 3], [0, 3, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [0, 2, 3], [0, 3, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[3, 1, -1], [1, 3, 1], [-1, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, -1], [1, 3, 1], [-1, 1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, -1, 0], [-1, 4, -1], [0, -1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -1, 0], [-1, 4, -1], [0, -1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, 2, 2], [2, 3, 2], [2, 2, 4]].",
    "output": "import numpy as np\nA = np.array([[0, 2, 2], [2, 3, 2], [2, 2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[1, 2, 1], [2, 1, 2], [1, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 1], [2, 1, 2], [1, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 0, 0], [0, 3, 4], [0, 4, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [0, 3, 4], [0, 4, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[5, 2, 0], [2, 3, 1], [0, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 0], [2, 3, 1], [0, 1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, 2, 2], [2, 3, 1], [2, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 2, 2], [2, 3, 1], [2, 1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 1, 1], [1, 2, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [1, 2, 1], [1, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[3, -2, 1], [-2, 3, -2], [1, -2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -2, 1], [-2, 3, -2], [1, -2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[5, 3, 1], [3, 6, 2], [1, 2, 4]].",
    "output": "import numpy as np\nA = np.array([[5, 3, 1], [3, 6, 2], [1, 2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, 1, -1], [1, 0, 1], [-1, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, -1], [1, 0, 1], [-1, 1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[10, -5, 2], [-5, 6, -2], [2, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[10, -5, 2], [-5, 6, -2], [2, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the 4x4 matrix A = [[4, 1, 2, -1], [1, 3, 0, 2], [2, 0, 5, 3], [-1, 2, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2, -1], [1, 3, 0, 2], [2, 0, 5, 3], [-1, 2, 3, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the complex matrix A = [[2+3j, -1j], [1j, 2-3j]].",
    "output": "import numpy as np\nA = np.array([[2+3j, -1j], [1j, 2-3j]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the 5x5 matrix A = [[5, -1, 2, 3, 1], [-1, 6, -2, 4, -3], [2, -2, 7, 1, 0], [3, 4, 1, 8, -2], [1, -3, 0, -2, 9]].",
    "output": "import numpy as np\nA = np.array([[5, -1, 2, 3, 1], [-1, 6, -2, 4, -3], [2, -2, 7, 1, 0], [3, 4, 1, 8, -2], [1, -3, 0, -2, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, -1], [-1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1], [-1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[4, 1], [2, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 1], [2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[0, 1], [-1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [-1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the 3x3 matrix A = [[3, 1, 1], [1, 3, 1], [1, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 1], [1, 3, 1], [1, 1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[1, -2, 0], [-2, 1, -2], [0, -2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -2, 0], [-2, 1, -2], [0, -2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 4x4 matrix A = [[1, 2, 3, 4], [2, 1, 2, 3], [3, 2, 1, 2], [4, 3, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [2, 1, 2, 3], [3, 2, 1, 2], [4, 3, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[5, -1, 0], [-1, 5, -1], [0, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -1, 0], [-1, 5, -1], [0, -1, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the identity matrix A = [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.eye(3)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the diagonal matrix A = [[2, 0, 0], [0, 5, 0], [0, 0, 7]].",
    "output": "import numpy as np\nA = np.diag([2, 5, 7])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the symmetric matrix A = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the complex matrix A = [[0, 1j], [-1j, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1j], [-1j, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 random integer matrix.",
    "output": "import numpy as np\nnp.random.seed(0)\nA = np.random.randint(-5, 5, (5, 5))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 lower triangular matrix A = [[4, 0, 0], [-1, 3, 0], [2, -2, 2]].",
    "output": "import numpy as np\nA = np.array([[4, 0, 0], [-1, 3, 0], [2, -2, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[3, -2, 4], [-2, 6, 2], [4, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -2, 4], [-2, 6, 2], [4, 2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[2, 0, 1], [0, 3, 0], [1, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 1], [0, 3, 0], [1, 0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the singular matrix A = [[1, 2, 3], [2, 4, 6], [3, 6, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the matrix A = [[0, 1, 1], [1, 0, 1], [1, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the matrix A = [[5, 0, 2], [0, 5, -2], [2, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 0, 2], [0, 5, -2], [2, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a random 4x4 symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(1)\nA = np.random.randint(-5, 5, (4, 4))\nA = (A + A.T) / 2  # Ensure symmetry\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the skew-symmetric matrix A = [[0, -2, 3], [2, 0, -1], [-3, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -2, 3], [2, 0, -1], [-3, 1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the skew-symmetric matrix A = [[0, -2, 3], [2, 0, -1], [-3, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -2, 3], [2, 0, -1], [-3, 1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 random symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(2)\nA = np.random.randint(-5, 5, (5, 5))\nA = (A + A.T) / 2  # Ensure symmetry\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 4x4 Jordan block matrix A = [[5, 1, 0, 0], [0, 5, 1, 0], [0, 0, 5, 1], [0, 0, 0, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 1, 0, 0], [0, 5, 1, 0], [0, 0, 5, 1], [0, 0, 0, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the circulant matrix A = [[0, 1, 2], [2, 0, 1], [1, 2, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([0, 1, 2])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the 3x3 Toeplitz matrix A = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nA = toeplitz([2, -1, 0])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a randomly generated 6x6 matrix.",
    "output": "import numpy as np\nnp.random.seed(3)\nA = np.random.randint(-10, 10, (6, 6))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the Pascal matrix A of order 4.",
    "output": "import numpy as np\nfrom scipy.linalg import pascal\nA = pascal(4)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 nilpotent matrix A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 diagonal matrix with repeating eigenvalues A = [[3, 0, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 4, 0], [0, 0, 0, 0, 4]].",
    "output": "import numpy as np\nA = np.array([[3, 0, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 4, 0], [0, 0, 0, 0, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a random 7x7 symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(4)\nA = np.random.randint(-10, 10, (7, 7))\nA = (A + A.T) / 2  # Ensure symmetry\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a magic square matrix of order 4.",
    "output": "import numpy as np\nA = np.array([[16, 3, 2, 13],\n              [5, 10, 11, 8],\n              [9, 6, 7, 12],\n              [4, 15, 14, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Magic Square Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the circulant matrix A = [[1, 2, 3], [3, 1, 2], [2, 3, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([1, 2, 3])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the Markov transition matrix A = [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]].",
    "output": "import numpy as np\nA = np.array([[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the lower triangular matrix A = [[2, 0, 0], [1, 3, 0], [4, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [1, 3, 0], [4, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the random 8x8 matrix.",
    "output": "import numpy as np\nnp.random.seed(5)\nA = np.random.randint(-20, 20, (8, 8))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a Pascal matrix of order 5.",
    "output": "import numpy as np\nfrom scipy.linalg import pascal\nA = pascal(5)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the symmetric matrix A = [[4, -2, 1], [-2, 4, -2], [1, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 4, -2], [1, -2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 symmetric matrix A = [[4, 1, 2, 3, 5], [1, 3, -1, 2, 4], [2, -1, 5, 1, 0], [3, 2, 1, 4, -2], [5, 4, 0, -2, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2, 3, 5], [1, 3, -1, 2, 4], [2, -1, 5, 1, 0], [3, 2, 1, 4, -2], [5, 4, 0, -2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a nearly singular 4x4 matrix A = [[1e-5, 1, 2, 3], [1, 2e-5, 3, 4], [2, 3, 3e-5, 5], [3, 4, 5, 4e-5]].",
    "output": "import numpy as np\nA = np.array([[1e-5, 1, 2, 3], [1, 2e-5, 3, 4], [2, 3, 3e-5, 5], [3, 4, 5, 4e-5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 6x6 random integer matrix.",
    "output": "import numpy as np\nnp.random.seed(6)\nA = np.random.randint(-50, 50, (6, 6))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the complex matrix A = [[2+3j, -1+2j], [4-2j, 1+4j]].",
    "output": "import numpy as np\nA = np.array([[2+3j, -1+2j], [4-2j, 1+4j]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a perturbed identity matrix A = [[1, 0.01, 0.02], [0.01, 1, 0.03], [0.02, 0.03, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 0.01, 0.02], [0.01, 1, 0.03], [0.02, 0.03, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 random symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(7)\nA = np.random.randint(-30, 30, (5, 5))\nA = (A + A.T) / 2  # Symmetric\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a nearly singular matrix A = [[1, 2, 3, 4], [2, 4.0001, 6, 8], [3, 6, 9.0001, 12], [4, 8, 12, 16.0001]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [2, 4.0001, 6, 8], [3, 6, 9.0001, 12], [4, 8, 12, 16.0001]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the 6x6 Jordan block matrix J = [[3, 1, 0, 0, 0, 0], [0, 3, 1, 0, 0, 0], [0, 0, 3, 1, 0, 0], [0, 0, 0, 3, 1, 0], [0, 0, 0, 0, 3, 1], [0, 0, 0, 0, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 0, 0, 0, 0], [0, 3, 1, 0, 0, 0], [0, 0, 3, 1, 0, 0], [0, 0, 0, 3, 1, 0], [0, 0, 0, 0, 3, 1], [0, 0, 0, 0, 0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a Hankel matrix A = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import hankel\nA = hankel([1, 2, 3, 4], [4, 5, 6, 7])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 7x7 random matrix with integer values between -100 and 100.",
    "output": "import numpy as np\nnp.random.seed(8)\nA = np.random.randint(-100, 100, (7, 7))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a large 8x8 symmetric matrix with random values.",
    "output": "import numpy as np\nnp.random.seed(9)\nA = np.random.randint(-50, 50, (8, 8))\nA = (A + A.T) / 2  # Symmetric\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of the 5x5 Toeplitz matrix A = [[2, -1, 0, 0, 0], [-1, 2, -1, 0, 0], [0, -1, 2, -1, 0], [0, 0, -1, 2, -1], [0, 0, 0, -1, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nA = toeplitz([2, -1, 0, 0, 0])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the circulant matrix A = [[4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1], [1, 2, 3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([4, 1, 2, 3])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 4x4 Hermitian matrix A = [[3, 2-1j, 0, 1j], [2+1j, 5, -3j, 0], [0, 3j, 4, -2j], [-1j, 0, 2j, 6]].",
    "output": "import numpy as np\nA = np.array([[3, 2-1j, 0, 1j], [2+1j, 5, -3j, 0], [0, 3j, 4, -2j], [-1j, 0, 2j, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a perturbed diagonal matrix A = [[10, 0.01, 0.02], [0.01, 20, 0.03], [0.02, 0.03, 30]].",
    "output": "import numpy as np\nA = np.array([[10, 0.01, 0.02], [0.01, 20, 0.03], [0.02, 0.03, 30]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a randomly generated 9x9 integer matrix.",
    "output": "import numpy as np\nnp.random.seed(10)\nA = np.random.randint(-25, 25, (9, 9))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 4x4 matrix where all elements are 1.",
    "output": "import numpy as np\nA = np.ones((4,4))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a large 10x10 random symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(11)\nA = np.random.randint(-100, 100, (10, 10))\nA = (A + A.T) / 2  # Symmetric\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a random 12x12 integer matrix.",
    "output": "import numpy as np\nnp.random.seed(12)\nA = np.random.randint(-50, 50, (12, 12))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a randomly generated 11x11 integer matrix.",
    "output": "import numpy as np\nnp.random.seed(13)\nA = np.random.randint(-30, 30, (11, 11))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a special block matrix A = [[2, 0, 0, 1], [0, 2, 1, 0], [0, 1, 2, 0], [1, 0, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0, 1], [0, 2, 1, 0], [0, 1, 2, 0], [1, 0, 0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a rank-deficient 5x5 matrix A = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a Vandermonde matrix with base [1, 2, 3, 4].",
    "output": "import numpy as np\nfrom numpy.linalg import eig\nA = np.vander([1, 2, 3, 4])\neigenvalues, eigenvectors = eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a matrix with small perturbations: A = [[1, 1e-6], [1e-6, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1e-6], [1e-6, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a skew-symmetric matrix A = [[0, -2, -4], [2, 0, -6], [4, 6, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -2, -4], [2, 0, -6], [4, 6, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 6x6 matrix A where A[i][j] = i + j.",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: i + j, (6, 6), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of the Pascal matrix of order 5.",
    "output": "import numpy as np\nfrom scipy.linalg import pascal\nA = pascal(5)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a 6x6 diagonal matrix with values [1, 2, 3, 4, 5, 6] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([1, 2, 3, 4, 5, 6])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 lower triangular matrix where A[i][j] = i - j if i >= j, else 0.",
    "output": "import numpy as np\nA = np.tril(np.fromfunction(lambda i, j: i - j, (5, 5), dtype=int))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 matrix with all elements set to 5.",
    "output": "import numpy as np\nA = np.full((5, 5), 5)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the Hilbert matrix of order 6.",
    "output": "import numpy as np\nfrom scipy.linalg import hilbert\nA = hilbert(6)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 7x7 random matrix where values are between -10 and 10.",
    "output": "import numpy as np\nnp.random.seed(14)\nA = np.random.randint(-10, 10, (7, 7))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of a 4x4 orthogonal matrix A = [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 5x5 skew-symmetric matrix A = [[0, -3, -4, -2, -1], [3, 0, -5, -6, -7], [4, 5, 0, -8, -9], [2, 6, 8, 0, -10], [1, 7, 9, 10, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -3, -4, -2, -1], [3, 0, -5, -6, -7], [4, 5, 0, -8, -9], [2, 6, 8, 0, -10], [1, 7, 9, 10, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the companion matrix A = [[0, 0, 0, -1], [1, 0, 0, -6], [0, 1, 0, 11], [0, 0, 1, -6]].",
    "output": "import numpy as np\nA = np.array([[0, 0, 0, -1], [1, 0, 0, -6], [0, 1, 0, 11], [0, 0, 1, -6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 6x6 circulant matrix where the first row is [1, 2, 3, 4, 5, 6].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([1, 2, 3, 4, 5, 6])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 8x8 symmetric Toeplitz matrix where the first row is [4, -1, 0, 0, 0, 0, 0, -1].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nA = toeplitz([4, -1, 0, 0, 0, 0, 0, -1])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 stochastic matrix where each row sums to 1.",
    "output": "import numpy as np\nA = np.array([[0.2, 0.3, 0.1, 0.2, 0.2], [0.1, 0.3, 0.3, 0.2, 0.1], [0.3, 0.1, 0.2, 0.2, 0.2], [0.2, 0.2, 0.3, 0.1, 0.2], [0.2, 0.1, 0.2, 0.3, 0.2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a block diagonal matrix with two 3x3 identity matrices on the diagonal.",
    "output": "import numpy as np\nfrom scipy.linalg import block_diag\nA = block_diag(np.eye(3), np.eye(3))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 9x9 random symmetric matrix with values between -20 and 20.",
    "output": "import numpy as np\nnp.random.seed(15)\nA = np.random.randint(-20, 20, (9, 9))\nA = (A + A.T) / 2  # Make symmetric\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a random 10x10 sparse matrix with mostly zero values.",
    "output": "import numpy as np\nfrom scipy.sparse import random\nA = random(10, 10, density=0.2, format='csr').toarray()\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 matrix where A[i][j] = min(i, j).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: np.minimum(i+1, j+1), (6, 6), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a matrix with a checkerboard pattern of 1s and 0s (6x6).",
    "output": "import numpy as np\nA = np.indices((6,6)).sum(axis=0) % 2\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 7x7 matrix where A[i][j] = cos(i + j).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: np.cos(i + j), (7, 7), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a tridiagonal matrix A where A[i][i] = 2, A[i][i-1] = A[i][i+1] = -1.",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nA = toeplitz([2, -1, 0, 0, 0, 0, 0])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of an 8x8 matrix A where A[i][j] = (-1)^(i+j) * (i + j).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: (-1)**(i+j) * (i + j), (8, 8), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 6x6 matrix with A[i][j] = gcd(i+1, j+1).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: np.gcd(i.astype(int)+1, j.astype(int)+1), (6, 6), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('GCD Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 7x7 matrix where A[i][j] = 1 / (i + j + 1).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: 1 / (i + j + 1), (7, 7), dtype=float)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the adjacency matrix of a complete graph with 6 vertices.",
    "output": "import numpy as np\nA = np.ones((6,6)) - np.eye(6)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 Hadamard matrix.",
    "output": "import numpy as np\nfrom scipy.linalg import hadamard\nA = hadamard(4)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Hadamard Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a matrix with Fibonacci numbers as elements.",
    "output": "import numpy as np\n# Generate the first 20 Fibonacci numbers\nfib = [0, 1]\nfor _ in range(18):\n    fib.append(fib[-1] + fib[-2])\nfib = np.array(fib)\n# Construct a 5x5 matrix where A[i][j] = fib[i + j]\nA = np.fromfunction(lambda i, j: fib[(i + j).astype(int)], (5, 5), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Fibonacci-based Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 9x9 matrix where A[i][j] = (i+1) * (j+1).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: (i+1) * (j+1), (9, 9), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 6x6 magic square matrix.",
    "output": "import numpy as np\nfrom scipy.linalg import pascal\nA = pascal(6, kind='symmetric')\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 7x7 random skew-symmetric matrix.",
    "output": "import numpy as np\nnp.random.seed(17)\nA = np.random.randint(-10, 10, (7, 7))\nA = A - A.T\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a Vandermonde matrix with base [1, 3, 5, 7, 9, 11].",
    "output": "import numpy as np\nA = np.vander([1, 3, 5, 7, 9, 11])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 10x10 random orthogonal matrix.",
    "output": "import numpy as np\nfrom scipy.stats import ortho_group\nA = ortho_group.rvs(10)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 5x5 identity matrix multiplied by a random scalar.",
    "output": "import numpy as np\nnp.random.seed(18)\ns = np.random.randint(1, 10)\nA = s * np.eye(5)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a matrix where A[i][j] = sin(i+j).",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: np.sin(i + j), (6, 6), dtype=float)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the adjacency matrix of a cycle graph with 7 vertices.",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([0, 1, 0, 0, 0, 0, 1])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a random 8x8 lower triangular matrix.",
    "output": "import numpy as np\nnp.random.seed(19)\nA = np.tril(np.random.randint(-10, 10, (8, 8)))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 9x9 upper triangular matrix where diagonal elements are [1,2,3,...,9].",
    "output": "import numpy as np\nA = np.triu(np.ones((9,9))) * np.arange(1, 10)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of an 8x8 random circulant matrix where the first row is randomly generated.",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nnp.random.seed(21)\nrow = np.random.randint(-5, 5, 8)\nA = circulant(row)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 7x7 matrix A where A[i][j] = i^2 - j^2.",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: i**2 - j**2, (7, 7), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 9x9 Toeplitz matrix where the first row is [2, -1, 0, 0, 0, 0, 0, 0, -1].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nA = toeplitz([2, -1, 0, 0, 0, 0, 0, 0, -1])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 6x6 symmetric matrix where A[i][j] = |i - j|.",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: abs(i - j), (6, 6), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of an 8x8 anti-diagonal matrix where values are [1,2,3,...,8] on the anti-diagonal.",
    "output": "import numpy as np\nA = np.fliplr(np.diag(np.arange(1, 9)))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 5x5 symmetric matrix where A[i][j] = 1 if |i - j| \u00e2\u2030\u00a4 1, else 0.",
    "output": "import numpy as np\nA = np.fromfunction(lambda i, j: np.where(np.abs(i - j) <= 1, 1, 0), (5, 5), dtype=int)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Symmetric Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 2x2 identity matrix.",
    "output": "import numpy as np\nA = np.eye(2)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the diagonal matrix [[3, 0], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 2x2 zero matrix.",
    "output": "import numpy as np\nA = np.zeros((2, 2))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 2x2 matrix [[1, 2], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix with values [2, 4, 6] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([2, 4, 6])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 identity matrix.",
    "output": "import numpy as np\nA = np.eye(3)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix where all elements are 1.",
    "output": "import numpy as np\nA = np.ones((2, 2))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 2x2 symmetric matrix [[4, 1], [1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1], [1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix with all zero values except for one nonzero diagonal element (e.g., [[0, 0], [0, 7]]).",
    "output": "import numpy as np\nA = np.array([[0, 0], [0, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a triangular matrix [[2, 1], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[2, 0], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix.",
    "output": "import numpy as np\nA = np.eye(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix [[1, 0, 0], [0, 5, 0], [0, 0, 9]].",
    "output": "import numpy as np\nA = np.diag([1, 5, 9])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 2x2 matrix [[0, 1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix [[2, 1, 0], [0, 4, 2], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [0, 4, 2], [0, 0, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 lower triangular matrix [[3, 0], [5, 7]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [5, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[1, -1], [-1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -1], [-1, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 zero matrix.",
    "output": "import numpy as np\nA = np.zeros((3, 3))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix where all elements are the same (e.g., [[2, 2], [2, 2]]).",
    "output": "import numpy as np\nA = np.array([[2, 2], [2, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a symmetric 3x3 matrix [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[4, 0], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[4, 0], [0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by 7.",
    "output": "import numpy as np\nA = 7 * np.eye(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a diagonal 4x4 matrix with values [1, 2, 3, 4] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([1, 2, 3, 4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 2x2 matrix [[3, 1], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix [[3, 2, 1], [0, 5, 4], [0, 0, 7]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1], [0, 5, 4], [0, 0, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 lower triangular matrix [[5, 0], [3, 6]].",
    "output": "import numpy as np\nA = np.array([[5, 0], [3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[0, -1], [-1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [-1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 zero matrix.",
    "output": "import numpy as np\nA = np.zeros((4, 4))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix where all elements are 3 (e.g., [[3, 3], [3, 3]]).",
    "output": "import numpy as np\nA = np.array([[3, 3], [3, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a symmetric 3x3 matrix [[5, 2, 0], [2, 5, 2], [0, 2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 0], [2, 5, 2], [0, 2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[6, 0], [0, 8]].",
    "output": "import numpy as np\nA = np.array([[6, 0], [0, 8]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by 4.",
    "output": "import numpy as np\nA = 4 * np.eye(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a diagonal 3x3 matrix with values [7, 2, 5] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([7, 2, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 2x2 matrix [[2, 1], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix [[1, 3, 0], [0, 4, 5], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 0], [0, 4, 5], [0, 0, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 lower triangular matrix [[9, 0], [4, 5]].",
    "output": "import numpy as np\nA = np.array([[9, 0], [4, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix [[0, 2], [2, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2], [2, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix where all elements are 4 (e.g., [[4, 4], [4, 4]]).",
    "output": "import numpy as np\nA = np.array([[4, 4], [4, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a symmetric 3x3 matrix [[3, 1, 0], [1, 3, 1], [0, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 0], [1, 3, 1], [0, 1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 matrix [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 matrix [[0, 1, 0], [-1, 0, 1], [0, -1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [-1, 0, 1], [0, -1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 4x4 diagonal matrix with values [4, 3, 2, 1] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([4, 3, 2, 1])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 symmetric matrix [[5, 1, 2], [1, 4, 3], [2, 3, 6]].",
    "output": "import numpy as np\nA = np.array([[5, 1, 2], [1, 4, 3], [2, 3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 triangular matrix [[2, 3, 1], [0, 5, 4], [0, 0, 7]].",
    "output": "import numpy as np\nA = np.array([[2, 3, 1], [0, 5, 4], [0, 0, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 identity matrix multiplied by 9.",
    "output": "import numpy as np\nA = 9 * np.eye(4)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 circulant matrix [[0, 1, 1], [1, 0, 1], [1, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix with random integers between 1 and 10.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.random.randint(1, 11, (3, 3))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix with both positive and negative values [[4, -2, 1], [-2, 5, -3], [1, -3, 6]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 5, -3], [1, -3, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 matrix [[3, -1, 0], [-1, 3, -1], [0, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 0], [-1, 3, -1], [0, -1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 symmetric matrix [[6, 2, 1], [2, 5, 3], [1, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 5, 3], [1, 3, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 triangular matrix [[4, 3, 2], [0, 7, 5], [0, 0, 9]].",
    "output": "import numpy as np\nA = np.array([[4, 3, 2], [0, 7, 5], [0, 0, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 diagonal matrix with values [2, -3, 5, 7] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([2, -3, 5, 7])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix where all elements are 1 (e.g., [[1, 1, 1], [1, 1, 1], [1, 1, 1]]).",
    "output": "import numpy as np\nA = np.ones((3, 3))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix with negative values [[-2, -1, 0], [-1, -2, -1], [0, -1, -2]].",
    "output": "import numpy as np\nA = np.array([[-2, -1, 0], [-1, -2, -1], [0, -1, -2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix [[2, -1, 1], [-1, 3, -1], [1, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 1], [-1, 3, -1], [1, -1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 upper triangular matrix with random values between 1 and 10.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.triu(np.random.randint(1, 11, (4, 4)))\neigenvalues, _ = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 circulant matrix [[1, 2, 3], [3, 1, 2], [2, 3, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [3, 1, 2], [2, 3, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 matrix [[4, -2, 1], [-2, 4, -2], [1, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 4, -2], [1, -2, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix [[1, 3, 2], [2, 1, 3], [3, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 2], [2, 1, 3], [3, 2, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 symmetric matrix [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 upper triangular matrix [[5, 3, 2], [0, 4, 1], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[5, 3, 2], [0, 4, 1], [0, 0, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 diagonal matrix with values [-1, -2, 3, 5] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-1, -2, 3, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 circulant matrix [[2, 1, 0], [0, 2, 1], [1, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [0, 2, 1], [1, 0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix with both positive and negative values [[3, -1, 1], [-1, 3, -1], [1, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 1], [-1, 3, -1], [1, -1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix [[1, 4, 2], [4, 1, 2], [2, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[1, 4, 2], [4, 1, 2], [2, 2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 lower triangular matrix [[6, 0, 0], [2, 5, 0], [1, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[6, 0, 0], [2, 5, 0], [1, 3, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix with random integers between -5 and 5.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.random.randint(-5, 6, (3, 3))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 matrix [[5, -1, 0], [-1, 5, -1], [0, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -1, 0], [-1, 5, -1], [0, -1, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix [[3, 2, 1], [2, 3, 2], [1, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1], [2, 3, 2], [1, 2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 symmetric matrix [[4, -2, 1], [-2, 4, -2], [1, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [-2, 4, -2], [1, -2, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 triangular matrix [[6, 2, 1], [0, 5, 3], [0, 0, 7]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [0, 5, 3], [0, 0, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 diagonal matrix with values [-3, 2, 8, 5] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-3, 2, 8, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 circulant matrix [[3, 1, 2], [2, 3, 1], [1, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 2], [2, 3, 1], [1, 2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix [[2, -3, 1], [-3, 2, -3], [1, -3, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -3, 1], [-3, 2, -3], [1, -3, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix [[1, 5, 3], [5, 1, 3], [3, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 5, 3], [5, 1, 3], [3, 3, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 lower triangular matrix [[7, 0, 0], [3, 6, 0], [1, 4, 5]].",
    "output": "import numpy as np\nA = np.array([[7, 0, 0], [3, 6, 0], [1, 4, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix with random integers between -10 and 10.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.random.randint(-10, 11, (3, 3))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 3x3 matrix [[6, -2, 1], [-2, 6, -2], [1, -2, 6]].",
    "output": "import numpy as np\nA = np.array([[6, -2, 1], [-2, 6, -2], [1, -2, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix [[4, 3, 2], [3, 4, 3], [2, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 3, 2], [3, 4, 3], [2, 3, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 symmetric matrix [[3, -1, 2], [-1, 3, -1], [2, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 2], [-1, 3, -1], [2, -1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 upper triangular matrix [[8, 1, 2], [0, 5, 3], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[8, 1, 2], [0, 5, 3], [0, 0, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 diagonal matrix with values [4, -2, 7, 1] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([4, -2, 7, 1])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 circulant matrix [[5, 2, 3], [3, 5, 2], [2, 3, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 3], [3, 5, 2], [2, 3, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix [[1, -4, 2], [-4, 1, -4], [2, -4, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -4, 2], [-4, 1, -4], [2, -4, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix [[2, 6, 3], [6, 2, 3], [3, 3, 5]].",
    "output": "import numpy as np\nA = np.array([[2, 6, 3], [6, 2, 3], [3, 3, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 lower triangular matrix [[9, 0, 0], [4, 7, 0], [2, 6, 3]].",
    "output": "import numpy as np\nA = np.array([[9, 0, 0], [4, 7, 0], [2, 6, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix with random integers between -7 and 7.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.random.randint(-7, 8, (3, 3))\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 4x4 matrix [[4, 2, -1, 1], [2, 5, 2, -2], [-1, 2, 6, 3], [1, -2, 3, 7]].",
    "output": "import numpy as np\nA = np.array([[4, 2, -1, 1], [2, 5, 2, -2], [-1, 2, 6, 3], [1, -2, 3, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 4x4 matrix [[0, 1, 2, 3], [1, 0, -1, 2], [2, -1, 0, 1], [3, 2, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2, 3], [1, 0, -1, 2], [2, -1, 0, 1], [3, 2, 1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 matrix [[3, 2, 1, 0, -1], [2, 3, 2, 1, 0], [1, 2, 3, 2, 1], [0, 1, 2, 3, 2], [-1, 0, 1, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1, 0, -1], [2, 3, 2, 1, 0], [1, 2, 3, 2, 1], [0, 1, 2, 3, 2], [-1, 0, 1, 2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 skew-symmetric matrix [[0, -2, 3, 4], [2, 0, -1, 2], [-3, 1, 0, 5], [-4, -2, -5, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -2, 3, 4], [2, 0, -1, 2], [-3, 1, 0, 5], [-4, -2, -5, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 4x4 circulant matrix [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 matrix with random integers between -10 and 10.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.random.randint(-10, 11, (5, 5))\neigenvalues, _ = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 4x4 tridiagonal matrix [[6, -2, 0, 0], [-2, 6, -2, 0], [0, -2, 6, -2], [0, 0, -2, 6]].",
    "output": "import numpy as np\nA = np.array([[6, -2, 0, 0], [-2, 6, -2, 0], [0, -2, 6, -2], [0, 0, -2, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 symmetric matrix with values between -5 and 5.",
    "output": "import numpy as np\nnp.random.seed(24)\nA = np.random.randint(-5, 6, (5, 5))\nA = (A + A.T) / 2  # Making it symmetric\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 block matrix [[A, B], [B, A]] where A = [[1, 2], [2, 1]] and B = [[3, 4], [4, 3]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1]])\nB = np.array([[3, 4], [4, 3]])\nblock_matrix = np.block([[A, B], [B, A]])\neigenvalues, _ = np.linalg.eig(block_matrix)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix generated using a Toeplitz structure with first row [2, -1, 0, -1].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [2, -1, 0, -1]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 4x4 matrix [[10, -4, 1, 3], [-4, 9, -3, 2], [1, -3, 7, -2], [3, 2, -2, 6]].",
    "output": "import numpy as np\nA = np.array([[10, -4, 1, 3], [-4, 9, -3, 2], [1, -3, 7, -2], [3, 2, -2, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 matrix [[3, 5, -2, 4, 1], [5, 2, 3, -1, 4], [-2, 3, 6, 2, -3], [4, -1, 2, 5, 3], [1, 4, -3, 3, 7]].",
    "output": "import numpy as np\nA = np.array([[3, 5, -2, 4, 1], [5, 2, 3, -1, 4], [-2, 3, 6, 2, -3], [4, -1, 2, 5, 3], [1, 4, -3, 3, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 tridiagonal matrix [[8, -3, 0, 0], [-3, 7, -2, 0], [0, -2, 6, -1], [0, 0, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[8, -3, 0, 0], [-3, 7, -2, 0], [0, -2, 6, -1], [0, 0, -1, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 symmetric matrix generated with random values between -7 and 7.",
    "output": "import numpy as np\nnp.random.seed(50)\nA = np.random.randint(-7, 8, (5, 5))\nA = (A + A.T) / 2  # Ensuring symmetry\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Matrix:\\n', A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 block matrix [[A, B], [B, A]] where A = [[2, 3], [3, 2]] and B = [[1, 4], [4, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [3, 2]])\nB = np.array([[1, 4], [4, 1]])\nblock_matrix = np.block([[A, B], [B, A]])\neigenvalues, _ = np.linalg.eig(block_matrix)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 Toeplitz matrix with first row [4, -1, 0, -1, 2].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [4, -1, 0, -1, 2]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 5x5 matrix where the elements are the sum of their row and column indices.",
    "output": "import numpy as np\nA = np.array([[i + j for j in range(1, 6)] for i in range(1, 6)])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 symmetric matrix with elements A[i][j] = min(i, j) + 1.",
    "output": "import numpy as np\nA = np.array([[min(i, j) + 1 for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 4x4 Vandermonde matrix with values [1, 2, 3, 4].",
    "output": "import numpy as np\nA = np.vander([1, 2, 3, 4])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 Hessenberg matrix [[5, 3, 0, 2], [1, 6, 4, 0], [0, 2, 7, 5], [0, 0, 3, 8]].",
    "output": "import numpy as np\nA = np.array([[5, 3, 0, 2], [1, 6, 4, 0], [0, 2, 7, 5], [0, 0, 3, 8]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 matrix [[10, -3, 2, -1, 4], [-3, 9, -4, 2, -2], [2, -4, 8, -3, 3], [-1, 2, -3, 7, -4], [4, -2, 3, -4, 6]].",
    "output": "import numpy as np\nA = np.array([[10, -3, 2, -1, 4], [-3, 9, -4, 2, -2], [2, -4, 8, -3, 3], [-1, 2, -3, 7, -4], [4, -2, 3, -4, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 random symmetric matrix generated with values between -10 and 10.",
    "output": "import numpy as np\nnp.random.seed(99)\nA = np.random.randint(-10, 11, (6, 6))\nA = (A + A.T) / 2  # Making it symmetric\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 block matrix [[A, B], [B, A]] where A = [[4, -2], [-2, 4]] and B = [[2, 3], [3, 2]].",
    "output": "import numpy as np\nA = np.array([[4, -2], [-2, 4]])\nB = np.array([[2, 3], [3, 2]])\nblock_matrix = np.block([[A, B], [B, A]])\neigenvalues, _ = np.linalg.eig(block_matrix)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 circulant matrix [[5, -2, 1, 3, -1], [-1, 5, -2, 1, 3], [3, -1, 5, -2, 1], [1, 3, -1, 5, -2], [-2, 1, 3, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -2, 1, 3, -1], [-1, 5, -2, 1, 3], [3, -1, 5, -2, 1], [1, 3, -1, 5, -2], [-2, 1, 3, -1, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 tridiagonal matrix [[7, -2, 0, 0, 0], [-2, 6, -2, 0, 0], [0, -2, 5, -2, 0], [0, 0, -2, 4, -2], [0, 0, 0, -2, 3]].",
    "output": "import numpy as np\nA = np.array([[7, -2, 0, 0, 0], [-2, 6, -2, 0, 0], [0, -2, 5, -2, 0], [0, 0, -2, 4, -2], [0, 0, 0, -2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 matrix where A[i][j] = min(i, j) + 1.",
    "output": "import numpy as np\nA = np.array([[min(i, j) + 1 for j in range(6)] for i in range(6)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 5x5 Vandermonde matrix with values [1, 2, 3, 4, 5].",
    "output": "import numpy as np\nA = np.vander([1, 2, 3, 4, 5])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 Toeplitz matrix with first row [3, -1, 0, 1, 2].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [3, -1, 0, 1, 2]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 Hessenberg matrix [[7, 2, 0, -1, 3], [3, 6, -2, 0, 1], [0, 4, 5, 1, -3], [0, 0, 2, 4, -1], [0, 0, 0, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[7, 2, 0, -1, 3], [3, 6, -2, 0, 1], [0, 4, 5, 1, -3], [0, 0, 2, 4, -1], [0, 0, 0, 1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 symmetric matrix where A[i][j] = max(i, j).",
    "output": "import numpy as np\nA = np.array([[max(i, j) for j in range(6)] for i in range(6)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 6x6 matrix [[9, -2, 3, -4, 5, -6], [-2, 8, -3, 4, -5, 6], [3, -3, 7, -4, 5, -6], [-4, 4, -4, 6, -5, 6], [5, -5, 5, -5, 5, -5], [-6, 6, -6, 6, -6, 6]].",
    "output": "import numpy as np\nA = np.array([[9, -2, 3, -4, 5, -6], [-2, 8, -3, 4, -5, 6], [3, -3, 7, -4, 5, -6], [-4, 4, -4, 6, -5, 6], [5, -5, 5, -5, 5, -5], [-6, 6, -6, 6, -6, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 7x7 random symmetric matrix with values between -20 and 20.",
    "output": "import numpy as np\nnp.random.seed(77)\nA = np.random.randint(-20, 21, (7, 7))\nA = (A + A.T) / 2  # Ensuring symmetry\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 block matrix [[A, B], [B, A]] where A = [[5, -3, 1], [-3, 6, -2], [1, -2, 7]] and B = [[2, 4, -1], [4, 2, 3], [-1, 3, 2]].",
    "output": "import numpy as np\nA = np.array([[5, -3, 1], [-3, 6, -2], [1, -2, 7]])\nB = np.array([[2, 4, -1], [4, 2, 3], [-1, 3, 2]])\nblock_matrix = np.block([[A, B], [B, A]])\neigenvalues, _ = np.linalg.eig(block_matrix)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 circulant matrix with first row [6, -2, 1, -1, 3, 0].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nfirst_row = [6, -2, 1, -1, 3, 0]\nA = circulant(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 tridiagonal matrix with diagonal 7 and off-diagonal -2.",
    "output": "import numpy as np\nA = np.diag([7]*6) + np.diag([-2]*5, 1) + np.diag([-2]*5, -1)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 7x7 matrix where A[i][j] = min(i, j) + 2.",
    "output": "import numpy as np\nA = np.array([[min(i, j) + 2 for j in range(7)] for i in range(7)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 6x6 Vandermonde matrix with values [1, 2, 3, 4, 5, 6].",
    "output": "import numpy as np\nA = np.vander([1, 2, 3, 4, 5, 6])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 Toeplitz matrix with first row [4, -1, 0, 2, -2, 1].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [4, -1, 0, 2, -2, 1]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 Hessenberg matrix [[8, 2, 0, -1, 4, 3], [2, 7, -3, 0, 2, 1], [0, -3, 6, 2, -4, 5], [0, 0, 3, 5, -1, 4], [0, 0, 0, 2, 4, -3], [0, 0, 0, 0, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[8, 2, 0, -1, 4, 3], [2, 7, -3, 0, 2, 1], [0, -3, 6, 2, -4, 5], [0, 0, 3, 5, -1, 4], [0, 0, 0, 2, 4, -3], [0, 0, 0, 0, 1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 7x7 symmetric matrix where A[i][j] = max(i, j) + 1.",
    "output": "import numpy as np\nA = np.array([[max(i, j) + 1 for j in range(7)] for i in range(7)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where each row is a cyclic permutation of [4, -1, 2, -3].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nfirst_row = [4, -1, 2, -3]\nA = circulant(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a matrix where each element A[i][j] = i^2 - j^2 for a 5x5 matrix.",
    "output": "import numpy as np\nA = np.array([[i**2 - j**2 for j in range(5)] for i in range(5)])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:\\n', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the matrix [[cos(\u03b8), sin(\u03b8)], [-sin(\u03b8), cos(\u03b8)]] for \u03b8 = \u03c0/4.",
    "output": "import numpy as np\ntheta = np.pi / 4\nA = np.array([[np.cos(theta), np.sin(theta)], [-np.sin(theta), np.cos(theta)]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 Pascal matrix.",
    "output": "import numpy as np\nfrom scipy.linalg import pascal\nA = pascal(6)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a matrix A such that A^2 = I, where A = [[0, 1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 matrix with all ones except the diagonal is zero.",
    "output": "import numpy as np\nA = np.ones((5, 5))\nnp.fill_diagonal(A, 0)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix where A[i][j] = 1 if |i - j| \u2264 1, otherwise 0.",
    "output": "import numpy as np\nA = np.array([[1 if abs(i-j) <= 1 else 0 for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 magic square matrix.",
    "output": "import numpy as np\n# Define a 4x4 magic square matrix manually\nA = np.array([[16, 3, 2, 13],\n              [5, 10, 11, 8],\n              [9, 6, 7, 12],\n              [4, 15, 14, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Magic Square Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 stochastic matrix where each row sums to 1 and entries are random.",
    "output": "import numpy as np\nnp.random.seed(10)\nA = np.random.rand(3, 3)\nA /= A.sum(axis=1, keepdims=True)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 symmetric Toeplitz matrix with first row [3, -1, 2, -2].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [3, -1, 2, -2]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = (-1)^(i+j) * (i + j + 1).",
    "output": "import numpy as np\nA = np.array([[(-1)**(i+j) * (i + j + 1) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 matrix where A[i][j] = i + j if i+j is even, otherwise -1.",
    "output": "import numpy as np\nA = np.array([[i + j if (i + j) % 2 == 0 else -1 for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a circulant matrix where the first row is the first 6 Fibonacci numbers.",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nfib = [0, 1]\nfor _ in range(4): fib.append(fib[-1] + fib[-2])\nA = circulant(fib)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 rotation matrix with \u03b8 = \u03c0/3.",
    "output": "import numpy as np\ntheta = np.pi / 3\nA = np.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix where A[i][j] = |i - j|.",
    "output": "import numpy as np\nA = np.array([[abs(i - j) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 random matrix where diagonal entries are zero and all other entries are 1.",
    "output": "import numpy as np\nA = np.ones((5, 5))\nnp.fill_diagonal(A, 0)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a doubly stochastic 3x3 matrix where each row sums to 1 and all entries are 1/3.",
    "output": "import numpy as np\nA = np.ones((3, 3)) / 3\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 symmetric Hankel matrix with first column [1, 2, 3, 4, 5].",
    "output": "import numpy as np\nfrom scipy.linalg import hankel\nA = hankel([1, 2, 3, 4, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 checkerboard matrix where A[i][j] = (-1)^(i+j).",
    "output": "import numpy as np\nA = np.array([[(-1)**(i+j) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix where A[i][j] = i^j.",
    "output": "import numpy as np\nA = np.array([[i**j for j in range(3)] for i in range(3)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = i * j mod 5.",
    "output": "import numpy as np\nA = np.array([[ (i * j) % 5 for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 circulant matrix where the first row is [2, -1, 0, 1, -2].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nfirst_row = [2, -1, 0, 1, -2]\nA = circulant(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 lower triangular matrix with diagonal [3, -2, 5, 1] and random lower elements.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.tril(np.random.randint(-10, 10, (4, 4)))\nnp.fill_diagonal(A, [3, -2, 5, 1])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 symmetric matrix where A[i][j] = max(i, j) + min(i, j).",
    "output": "import numpy as np\nA = np.array([[max(i, j) + min(i, j) for j in range(6)] for i in range(6)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 permutation matrix that swaps row 1 and 2 but leaves row 3 unchanged.",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 magic square matrix.",
    "output": "import numpy as np\n# Define a 5x5 magic square manually\nA = np.array([[17, 24,  1,  8, 15],\n              [23,  5,  7, 14, 16],\n              [ 4,  6, 13, 20, 22],\n              [10, 12, 19, 21,  3],\n              [11, 18, 25,  2,  9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Magic Square Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 random orthogonal matrix (Q from QR decomposition of a random matrix).",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nnp.random.seed(42)\nA = np.random.rand(4, 4)\nQ, _ = qr(A)\neigenvalues, _ = np.linalg.eig(Q)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 checkerboard matrix where A[i][j] = (-1)^(i+j) * (i + j + 1).",
    "output": "import numpy as np\nA = np.array([[(-1)**(i+j) * (i + j + 1) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix where A[i][j] = 2^(i+j).",
    "output": "import numpy as np\nA = np.array([[2**(i+j) for j in range(3)] for i in range(3)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 upper triangular matrix with ones on the diagonal and increasing entries above it.",
    "output": "import numpy as np\nA = np.triu(np.arange(1, 17).reshape(4, 4))\nnp.fill_diagonal(A, 1)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 Vandermonde matrix with first column [1, 2, 3, 4].",
    "output": "import numpy as np\nx = [1, 2, 3, 4]\nA = np.vander(x, increasing=True)\neigenvalues, _ = np.linalg.eig(A)\nprint('Vandermonde Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 Toeplitz matrix where the first row is [3, 1, -1, 2, 0].",
    "output": "import numpy as np\nfrom scipy.linalg import toeplitz\nfirst_row = [3, 1, -1, 2, 0]\nA = toeplitz(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = (i + 1) * (j + 1) if i \u2260 j, else 0.",
    "output": "import numpy as np\nA = np.array([[0 if i == j else (i+1)*(j+1) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 Hadamard matrix.",
    "output": "import numpy as np\nfrom scipy.linalg import hadamard\nA = hadamard(4)[:3,:3]\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 matrix where A[i][j] = gcd(i+1, j+1).",
    "output": "import numpy as np\nfrom math import gcd\nA = np.array([[gcd(i+1, j+1) for j in range(6)] for i in range(6)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 Hilbert matrix.",
    "output": "import numpy as np\nfrom scipy.linalg import hilbert\nA = hilbert(5)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 nilpotent matrix where A^3 = 0 but A \u2260 0.",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 Laplacian matrix of a cycle graph.",
    "output": "import numpy as np\nA = np.array([[2, -1, 0, -1], [-1, 2, -1, 0], [0, -1, 2, -1], [-1, 0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix where A[i][j] = i^2 - j^2 + (-1)^(i+j).",
    "output": "import numpy as np\nA = np.array([[i**2 - j**2 + (-1)**(i+j) for j in range(3)] for i in range(3)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 symmetric matrix where A[i][j] = min(i, j) + max(i, j).",
    "output": "import numpy as np\nA = np.array([[min(i, j) + max(i, j) for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = (-1)^(i+j) * (i + j + 2) mod 7.",
    "output": "import numpy as np\nA = np.array([[(-1)**(i+j) * (i + j + 2) % 7 for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 circulant matrix where the first row follows the pattern [1, -2, 3, -4, 5].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nfirst_row = [1, -2, 3, -4, 5]\nA = circulant(first_row)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 upper triangular matrix with diagonal entries [5, -3, 2, 4] and nonzero random upper values.",
    "output": "import numpy as np\nnp.random.seed(42)\nA = np.triu(np.random.randint(-10, 10, (4, 4)))\nnp.fill_diagonal(A, [5, -3, 2, 4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 magic square matrix where entries are squared.",
    "output": "import numpy as np\n# Define a 3x3 magic square manually\nmagic_square = np.array([[8, 1, 6],\n                         [3, 5, 7],\n                         [4, 9, 2]])\n# Square each element of the matrix\nA = np.square(magic_square)\neigenvalues, _ = np.linalg.eig(A)\nprint('Squared Magic Square Matrix A:\\n', A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 6x6 matrix where A[i][j] = gcd(i+2, j+2).",
    "output": "import numpy as np\nfrom math import gcd\nA = np.array([[gcd(i+2, j+2) for j in range(6)] for i in range(6)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 matrix where A[i][j] = 1/(i + j + 1).",
    "output": "import numpy as np\nA = np.array([[1/(i + j + 1) for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 skew-symmetric matrix where A[i][j] = i - j.",
    "output": "import numpy as np\nA = np.array([[i - j for j in range(4)] for i in range(4)])\nA = A - A.T\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 doubly stochastic matrix where all entries are 1/3.",
    "output": "import numpy as np\nA = np.ones((3, 3)) / 3\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = (i + 1)^j.",
    "output": "import numpy as np\nA = np.array([[(i + 1)**j for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 symmetric matrix where A[i][j] = min(i+1, j+1) + max(i+1, j+1).",
    "output": "import numpy as np\nA = np.array([[min(i+1, j+1) + max(i+1, j+1) for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix where A[i][j] = (-1)^(i+j) * (i^2 + j^2) mod 5.",
    "output": "import numpy as np\nA = np.array([[(-1)**(i+j) * (i**2 + j**2) % 5 for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 6x6 circulant matrix where the first row is the first 6 prime numbers.",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nprimes = [2, 3, 5, 7, 11, 13]\nA = circulant(primes)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 matrix where A[i][j] = i^j if i \u2265 j, otherwise 0.",
    "output": "import numpy as np\nA = np.array([[i**j if i >= j else 0 for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 Laplacian matrix for a star graph with 4 edges.",
    "output": "import numpy as np\nA = np.array([[ 3, -1, -1, -1], [-1, 1, 0, 0], [-1, 0, 1, 0], [-1, 0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 block diagonal matrix with blocks [[1, 2], [2, 1]] and [[3, 4], [4, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import block_diag\nA = block_diag([[1,2],[2,1]], [[3,4],[4,3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 orthogonal matrix constructed from a random QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nnp.random.seed(42)\nA = np.random.rand(3, 3)\nQ, _ = qr(A)\neigenvalues, _ = np.linalg.eig(Q)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 Hankel matrix where the first column is [1, 3, 5, 7, 9].",
    "output": "import numpy as np\nfrom scipy.linalg import hankel\nA = hankel([1, 3, 5, 7, 9])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix where A[i][j] = i! + j!.",
    "output": "import numpy as np\nfrom math import factorial\nA = np.array([[factorial(i) + factorial(j) for j in range(4)] for i in range(4)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix where A[i][j] = (-1)^i * (i+j+1).",
    "output": "import numpy as np\nA = np.array([[(-1)**i * (i+j+1) for j in range(3)] for i in range(3)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 matrix where A[i][j] = 1/(i + j + 2).",
    "output": "import numpy as np\nA = np.array([[1/(i + j + 2) for j in range(5)] for i in range(5)])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 2x2 identity matrix.",
    "output": "import numpy as np\nA = np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 diagonal matrix with values [3, 5] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([3, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[2, 0], [0, -2]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, -2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 scalar multiple of the identity matrix (5I).",
    "output": "import numpy as np\nA = 5 * np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix with diagonal entries [1, 2, 3].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 2, 4], [0, 0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[0, 1], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[1, 2], [2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 rotation matrix for 90 degrees.",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix with values [4, -1, 7] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([4, -1, 7])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix.",
    "output": "import numpy as np\nA = np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[6, 0], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[6, 0], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 scalar multiple of the identity matrix (4I).",
    "output": "import numpy as np\nA = 4 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[1, -1], [-1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -1], [-1, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[2, 0, 0], [0, 3, 0], [0, 0, 5]].",
    "output": "import numpy as np\nA = np.diag([2, 3, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 rotation matrix for 180 degrees.",
    "output": "import numpy as np\nA = np.array([[-1, 0], [0, -1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [2, 4, 6].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [3, 4, 0], [1, 5, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 symmetric matrix A = [[2, 1, 1], [1, 2, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [1, 2, 1], [1, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[0, 2], [2, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2], [2, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[3, 0, 0], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nA = np.identity(3) * 3\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 diagonal matrix A = [[7, 0], [0, -4]].",
    "output": "import numpy as np\nA = np.diag([7, -4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[4, 0], [0, 9]].",
    "output": "import numpy as np\nA = np.array([[4, 0], [0, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [5, 7, 8] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([5, 7, 8])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 identity matrix multiplied by 6.",
    "output": "import numpy as np\nA = 6 * np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 upper triangular matrix with diagonal entries [1, 3, 5].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 3, 4], [0, 0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 zero matrix.",
    "output": "import numpy as np\nA = np.zeros((2, 2))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [2, -3, 4].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [1, -3, 0], [-2, 5, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 symmetric matrix A = [[3, 2, 2], [2, 3, 2], [2, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 2], [2, 3, 2], [2, 2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[2, 1], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[3, 0], [0, -3]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [0, -3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by -2.",
    "output": "import numpy as np\nA = -2 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 rotation matrix for 45 degrees.",
    "output": "import numpy as np\nA = np.array([[np.cos(np.pi/4), -np.sin(np.pi/4)], [np.sin(np.pi/4), np.cos(np.pi/4)]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [-1, 4, 2] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-1, 4, 2])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[1, 2], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix with values [10, -5, 0] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([10, -5, 0])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[7, 0], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[7, 0], [0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [9, 3, -2] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([9, 3, -2])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 zero matrix.",
    "output": "import numpy as np\nA = np.zeros((2,2))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by 7.",
    "output": "import numpy as np\nA = 7 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[5, 0], [0, -5]].",
    "output": "import numpy as np\nA = np.array([[5, 0], [0, -5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [1, 2, 3].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [4, 2, 0], [7, 5, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 identity matrix multiplied by -3.",
    "output": "import numpy as np\nA = -3 * np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 rotation matrix for 30 degrees.",
    "output": "import numpy as np\nA = np.array([[np.cos(np.pi/6), -np.sin(np.pi/6)], [np.sin(np.pi/6), np.cos(np.pi/6)]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix with diagonal entries [2, -1, 4].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [0, -1, 2], [0, 0, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[3, 1], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix with values [-3, 6, 2] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-3, 6, 2])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 identity matrix multiplied by 5.",
    "output": "import numpy as np\nA = 5 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[2, -1], [-1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1], [-1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[4, 2], [2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 2], [2, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[8, 0], [0, -3]].",
    "output": "import numpy as np\nA = np.array([[8, 0], [0, -3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [10, 5, -4] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([10, 5, -4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[0, 0], [0, 0]].",
    "output": "import numpy as np\nA = np.zeros((2,2))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by 2.",
    "output": "import numpy as np\nA = 2 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 rotation matrix for 60 degrees.",
    "output": "import numpy as np\nA = np.array([[np.cos(np.pi/3), -np.sin(np.pi/3)], [np.sin(np.pi/3), np.cos(np.pi/3)]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 upper triangular matrix with diagonal entries [4, 2, 7].",
    "output": "import numpy as np\nA = np.array([[4, 1, 3], [0, 2, 5], [0, 0, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 symmetric matrix A = [[6, 2], [2, 6]].",
    "output": "import numpy as np\nA = np.array([[6, 2], [2, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[3, -2], [-2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -2], [-2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 diagonal matrix with values [-2, 7, 4] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-2, 7, 4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[1, 3], [3, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 3], [3, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [5, 6, -1].",
    "output": "import numpy as np\nA = np.array([[5, 0, 0], [1, 6, 0], [-2, 3, -1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 identity matrix multiplied by -5.",
    "output": "import numpy as np\nA = -5 * np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[2, 0], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[1, 2, 3], [0, 1, 4], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 1, 4], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[3, 1], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[4, 1], [1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1], [1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [8, -2, 5] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([8, -2, 5])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 identity matrix multiplied by 3.",
    "output": "import numpy as np\nA = 3 * np.identity(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 upper triangular matrix A = [[5, 3], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[5, 3], [0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [1, 4, 6].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [2, 4, 0], [3, 5, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 rotation matrix for 90 degrees.",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix with values [-3, 2, 7] on the diagonal.",
    "output": "import numpy as np\nA = np.diag([-3, 2, 7])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 identity matrix multiplied by -4.",
    "output": "import numpy as np\nA = -4 * np.identity(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[6, 2], [2, 6]].",
    "output": "import numpy as np\nA = np.array([[6, 2], [2, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix with diagonal entries [4, -1, 3].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2], [0, -1, 5], [0, 0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[2, -2], [-2, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -2], [-2, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 lower triangular matrix with diagonal entries [-1, 5, 3].",
    "output": "import numpy as np\nA = np.array([[-1, 0, 0], [2, 5, 0], [-3, 4, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 matrix A = [[1, 4], [4, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 4], [4, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[5, -2], [-2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -2], [-2, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[1, 2, 3], [2, 4, 5], [3, 5, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 upper triangular matrix A = [[3, 2, 1], [0, 2, -4], [0, 0, -5]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1], [0, 2, -4], [0, 0, -5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[7, 3], [3, 7]].",
    "output": "import numpy as np\nA = np.array([[7, 3], [3, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 symmetric matrix A = [[4, 1, 1], [1, 4, 1], [1, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 1], [1, 4, 1], [1, 1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[6, 2], [2, 8]].",
    "output": "import numpy as np\nA = np.array([[6, 2], [2, 8]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[0, 1, 2], [1, 0, 3], [2, 3, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2], [1, 0, 3], [2, 3, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 diagonal matrix A = [[3, 0, 0], [0, 5, 0], [0, 0, -2]].",
    "output": "import numpy as np\nA = np.diag([3, 5, -2])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[1, -2], [-2, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -2], [-2, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[5, 4], [4, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 4], [4, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 symmetric matrix A = [[6, 2, 1], [2, 3, 4], [1, 4, 5]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 3, 4], [1, 4, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[3, -1], [-1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1], [-1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[9, 4], [4, 9]].",
    "output": "import numpy as np\nA = np.array([[9, 4], [4, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[2, 1, 0], [1, 3, 1], [0, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 3, 1], [0, 1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[7, 2], [2, 7]].",
    "output": "import numpy as np\nA = np.array([[7, 2], [2, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 upper triangular matrix A = [[5, 1, -2], [0, 3, 4], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[5, 1, -2], [0, 3, 4], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[4, -1], [-1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -1], [-1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 symmetric matrix A = [[6, 1, 2], [1, 5, 3], [2, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[6, 1, 2], [1, 5, 3], [2, 3, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[5, 3], [3, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 3], [3, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[3, 2, 1], [2, 3, 2], [1, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1], [2, 3, 2], [1, 2, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 rotation matrix for 30 degrees.",
    "output": "import numpy as np\nA = np.array([[np.cos(np.pi/6), -np.sin(np.pi/6)], [np.sin(np.pi/6), np.cos(np.pi/6)]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 diagonal matrix A = [[7, 0, 0], [0, -3, 0], [0, 0, 2]].",
    "output": "import numpy as np\nA = np.diag([7, -3, 2])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[2, -3], [-3, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -3], [-3, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[4, -2, 0], [-2, 4, -2], [0, -2, 4]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 0], [-2, 4, -2], [0, -2, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[6, 5], [5, 6]].",
    "output": "import numpy as np\nA = np.array([[6, 5], [5, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 symmetric matrix A = [[5, 2, 3], [2, 6, 4], [3, 4, 7]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 3], [2, 6, 4], [3, 4, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[7, -2], [-2, 7]].",
    "output": "import numpy as np\nA = np.array([[7, -2], [-2, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[8, 3], [3, 8]].",
    "output": "import numpy as np\nA = np.array([[8, 3], [3, 8]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[10, 1], [1, 10]].",
    "output": "import numpy as np\nA = np.array([[10, 1], [1, 10]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[6, 2, 1], [2, 6, 3], [1, 3, 6]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 6, 3], [1, 3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[4, 5], [5, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 5], [5, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 symmetric matrix A = [[3, -1, 1], [-1, 3, -1], [1, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 1], [-1, 3, -1], [1, -1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[9, 2], [2, 9]].",
    "output": "import numpy as np\nA = np.array([[9, 2], [2, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[5, -2, 0], [-2, 5, -2], [0, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -2, 0], [-2, 5, -2], [0, -2, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 diagonal matrix A = [[8, 0, 0], [0, -4, 0], [0, 0, 3]].",
    "output": "import numpy as np\nA = np.diag([8, -4, 3])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[3, -4], [-4, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -4], [-4, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 matrix A = [[7, -3, 0], [-3, 7, -3], [0, -3, 7]].",
    "output": "import numpy as np\nA = np.array([[7, -3, 0], [-3, 7, -3], [0, -3, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 2x2 matrix A = [[5, 6], [6, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 6], [6, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 symmetric matrix A = [[4, 1, 2], [1, 5, 3], [2, 3, 6]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2], [1, 5, 3], [2, 3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 matrix A = [[6, -3], [-3, 6]].",
    "output": "import numpy as np\nA = np.array([[6, -3], [-3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[4, 1, -2], [1, 6, 0], [-2, 0, 5]].",
    "output": "import numpy as np\nA = np.array([[4, 1, -2], [1, 6, 0], [-2, 0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 4x4 matrix A = [[2, -1, 0, 0], [-1, 3, -1, 0], [0, -1, 4, -1], [0, 0, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0, 0], [-1, 3, -1, 0], [0, -1, 4, -1], [0, 0, -1, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[0, -1, 2], [1, 0, -1], [-2, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1, 2], [1, 0, -1], [-2, 1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 circulant matrix A = [[0, 1, 0, -1], [-1, 0, 1, 0], [0, -1, 0, 1], [1, 0, -1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0, -1], [-1, 0, 1, 0], [0, -1, 0, 1], [1, 0, -1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix A = [[7, -2, 3], [-2, 8, -1], [3, -1, 6]].",
    "output": "import numpy as np\nA = np.array([[7, -2, 3], [-2, 8, -1], [3, -1, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix A = [[5, 2, 1, -1], [2, 6, 2, 0], [1, 2, 7, 1], [-1, 0, 1, 8]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 1, -1], [2, 6, 2, 0], [1, 2, 7, 1], [-1, 0, 1, 8]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[4, 2, 2], [2, 5, 1], [2, 1, 6]].",
    "output": "import numpy as np\nA = np.array([[4, 2, 2], [2, 5, 1], [2, 1, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 block matrix A = [[4, 0, 1, -1], [0, 3, -1, 2], [1, -1, 2, 0], [-1, 2, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[4, 0, 1, -1], [0, 3, -1, 2], [1, -1, 2, 0], [-1, 2, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 Toeplitz matrix A = [[5, -1, 0], [-1, 5, -1], [0, -1, 5]].",
    "output": "import numpy as np\nA = np.array([[5, -1, 0], [-1, 5, -1], [0, -1, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix A = [[10, 3, -2, 1], [3, 9, 1, -3], [-2, 1, 8, 2], [1, -3, 2, 7]].",
    "output": "import numpy as np\nA = np.array([[10, 3, -2, 1], [3, 9, 1, -3], [-2, 1, 8, 2], [1, -3, 2, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix A = [[4, 1, 2, 3], [1, 5, -2, -1], [2, -2, 6, 0], [3, -1, 0, 7]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 2, 3], [1, 5, -2, -1], [2, -2, 6, 0], [3, -1, 0, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix A = [[9, -1, 3], [-1, 8, 1], [3, 1, 7]].",
    "output": "import numpy as np\nA = np.array([[9, -1, 3], [-1, 8, 1], [3, 1, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 upper triangular matrix A = [[6, 2, 1, 3], [0, 7, -1, 2], [0, 0, 8, 1], [0, 0, 0, 9]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1, 3], [0, 7, -1, 2], [0, 0, 8, 1], [0, 0, 0, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 symmetric matrix A = [[5, 2, -1, 3, 0], [2, 6, 1, 0, -2], [-1, 1, 7, 2, 1], [3, 0, 2, 8, -1], [0, -2, 1, -1, 9]].",
    "output": "import numpy as np\nA = np.array([[5, 2, -1, 3, 0], [2, 6, 1, 0, -2], [-1, 1, 7, 2, 1], [3, 0, 2, 8, -1], [0, -2, 1, -1, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix A = [[2, -1, 4], [-1, 3, -2], [4, -2, 5]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 4], [-1, 3, -2], [4, -2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix A = [[3, 2, -1, 0], [2, 6, 1, -1], [-1, 1, 5, 2], [0, -1, 2, 4]].",
    "output": "import numpy as np\nA = np.array([[3, 2, -1, 0], [2, 6, 1, -1], [-1, 1, 5, 2], [0, -1, 2, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 matrix A = [[10, 3, 1, 0, -1], [3, 9, 2, -1, 0], [1, 2, 8, 1, 2], [0, -1, 1, 7, -3], [-1, 0, 2, -3, 6]].",
    "output": "import numpy as np\nA = np.array([[10, 3, 1, 0, -1], [3, 9, 2, -1, 0], [1, 2, 8, 1, 2], [0, -1, 1, 7, -3], [-1, 0, 2, -3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 symmetric matrix A = [[5, -2, 4], [-2, 6, -1], [4, -1, 7]].",
    "output": "import numpy as np\nA = np.array([[5, -2, 4], [-2, 6, -1], [4, -1, 7]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix A = [[7, -1, 2, 3], [-1, 8, 0, -2], [2, 0, 9, 1], [3, -2, 1, 10]].",
    "output": "import numpy as np\nA = np.array([[7, -1, 2, 3], [-1, 8, 0, -2], [2, 0, 9, 1], [3, -2, 1, 10]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 block matrix A = [[6, 2, 0, 1, -1], [2, 7, 1, 0, 2], [0, 1, 8, 2, 3], [1, 0, 2, 9, -2], [-1, 2, 3, -2, 10]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 0, 1, -1], [2, 7, 1, 0, 2], [0, 1, 8, 2, 3], [1, 0, 2, 9, -2], [-1, 2, 3, -2, 10]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 matrix A = [[8, 2, -1, 3], [2, 7, 1, -2], [-1, 1, 6, 2], [3, -2, 2, 5]].",
    "output": "import numpy as np\nA = np.array([[8, 2, -1, 3], [2, 7, 1, -2], [-1, 1, 6, 2], [3, -2, 2, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 5x5 matrix A = [[9, 1, -2, 0, 3], [1, 8, 0, -1, 2], [-2, 0, 7, 1, -3], [0, -1, 1, 6, 2], [3, 2, -3, 2, 5]].",
    "output": "import numpy as np\nA = np.array([[9, 1, -2, 0, 3], [1, 8, 0, -1, 2], [-2, 0, 7, 1, -3], [0, -1, 1, 6, 2], [3, 2, -3, 2, 5]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 Toeplitz matrix A = [[6, -2, 1, 0], [-2, 6, -2, 1], [1, -2, 6, -2], [0, 1, -2, 6]].",
    "output": "import numpy as np\nA = np.array([[6, -2, 1, 0], [-2, 6, -2, 1], [1, -2, 6, -2], [0, 1, -2, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 diagonal-dominant matrix A = [[10, 1, -2, 0, 3], [1, 9, 0, -1, 2], [-2, 0, 8, 1, -3], [0, -1, 1, 7, 2], [3, 2, -3, 2, 6]].",
    "output": "import numpy as np\nA = np.array([[10, 1, -2, 0, 3], [1, 9, 0, -1, 2], [-2, 0, 8, 1, -3], [0, -1, 1, 7, 2], [3, 2, -3, 2, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a 3x3 matrix A = [[12, -3, 5], [-3, 11, -2], [5, -2, 9]].",
    "output": "import numpy as np\nA = np.array([[12, -3, 5], [-3, 11, -2], [5, -2, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a singular 3x3 matrix A = [[2, 4, 6], [1, 3, 5], [0, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[2, 4, 6], [1, 3, 5], [0, 0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix with repeated eigenvalues A = [[3, 1, 0, 0], [0, 3, 1, 0], [0, 0, 3, 1], [0, 0, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 0, 0], [0, 3, 1, 0], [0, 0, 3, 1], [0, 0, 0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a defective 3x3 matrix A = [[6, 2, 1], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [0, 6, 1], [0, 0, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a skew-symmetric 4x4 matrix A = [[0, -3, 2, 4], [3, 0, -1, 5], [-2, 1, 0, -6], [-4, -5, 6, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -3, 2, 4], [3, 0, -1, 5], [-2, 1, 0, -6], [-4, -5, 6, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of an upper triangular matrix with repeated diagonal entries A = [[5, 1, 0, 0], [0, 5, 1, 0], [0, 0, 5, 1], [0, 0, 0, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 1, 0, 0], [0, 5, 1, 0], [0, 0, 5, 1], [0, 0, 0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix with a zero determinant A = [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a circulant 3x3 matrix A = [[0, 1, -1], [-1, 0, 1], [1, -1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, -1], [-1, 0, 1], [1, -1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix with a high condition number A = [[1000, 1, 2, 3], [1, 999, 4, 5], [2, 4, 998, 6], [3, 5, 6, 997]].",
    "output": "import numpy as np\nA = np.array([[1000, 1, 2, 3], [1, 999, 4, 5], [2, 4, 998, 6], [3, 5, 6, 997]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a Jordan block matrix A = [[4, 1, 0, 0], [0, 4, 1, 0], [0, 0, 4, 1], [0, 0, 0, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 0, 0], [0, 4, 1, 0], [0, 0, 4, 1], [0, 0, 0, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a matrix where all row sums are equal A = [[3, 2, 1], [1, 3, 2], [2, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 1], [1, 3, 2], [2, 1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a matrix with fractional entries A = [[0.5, 1.2, -0.8], [-1.2, 0.7, 2.5], [0.8, -2.5, 1.3]].",
    "output": "import numpy as np\nA = np.array([[0.5, 1.2, -0.8], [-1.2, 0.7, 2.5], [0.8, -2.5, 1.3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a nearly singular matrix A = [[1, 1, 1], [1, 1.00001, 1], [1, 1, 1.00002]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [1, 1.00001, 1], [1, 1, 1.00002]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a nilpotent 3x3 matrix A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a Pascal 3x3 matrix A = [[1, 1, 1], [1, 2, 3], [1, 3, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [1, 2, 3], [1, 3, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a Vandermonde matrix A = [[1, 2, 4], [1, 3, 9], [1, 4, 16]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 4], [1, 3, 9], [1, 4, 16]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a circulant 4x4 matrix A = [[0, 1, 2, 3], [3, 0, 1, 2], [2, 3, 0, 1], [1, 2, 3, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2, 3], [3, 0, 1, 2], [2, 3, 0, 1], [1, 2, 3, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of an almost diagonal matrix A = [[10, 1e-10, 0], [0, 5, 1e-10], [0, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[10, 1e-10, 0], [0, 5, 1e-10], [0, 0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a doubly stochastic 3x3 matrix A = [[0.4, 0.3, 0.3], [0.3, 0.4, 0.3], [0.3, 0.3, 0.4]].",
    "output": "import numpy as np\nA = np.array([[0.4, 0.3, 0.3], [0.3, 0.4, 0.3], [0.3, 0.3, 0.4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a matrix with alternating row signs A = [[1, -1, 1], [-1, 2, -1], [1, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[1, -1, 1], [-1, 2, -1], [1, -1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a Fibonacci-like 3x3 matrix A = [[1, 1, 0], [1, 0, 1], [0, 1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [1, 0, 1], [0, 1, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a highly sparse 4x4 matrix A = [[0, 0, 3, 0], [0, 4, 0, 0], [3, 0, 0, 2], [0, 0, 2, 5]].",
    "output": "import numpy as np\nA = np.array([[0, 0, 3, 0], [0, 4, 0, 0], [3, 0, 0, 2], [0, 0, 2, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a circulant 5x5 matrix A = [[0, 1, 2, 3, 4], [4, 0, 1, 2, 3], [3, 4, 0, 1, 2], [2, 3, 4, 0, 1], [1, 2, 3, 4, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2, 3, 4], [4, 0, 1, 2, 3], [3, 4, 0, 1, 2], [2, 3, 4, 0, 1], [1, 2, 3, 4, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a Hessenberg 4x4 matrix A = [[4, 3, 2, 1], [1, 4, 3, 2], [0, 1, 4, 3], [0, 0, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 3, 2, 1], [1, 4, 3, 2], [0, 1, 4, 3], [0, 0, 1, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a doubly stochastic 4x4 matrix A = [[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]].",
    "output": "import numpy as np\nA = np.array([[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a circulant 3x3 matrix with complex entries A = [[0, i, -i], [-i, 0, i], [i, -i, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1j, -1j], [-1j, 0, 1j], [1j, -1j, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a tridiagonal matrix A = [[2, -1, 0, 0], [-1, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0, 0], [-1, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a skew-Hermitian matrix A = [[0, i, -2i], [-i, 0, 3i], [2i, -3i, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1j, -2j], [-1j, 0, 3j], [2j, -3j, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a Hadamard 4x4 matrix A = [[1, 1, 1, 1], [1, -1, 1, -1], [1, 1, -1, -1], [1, -1, -1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1, 1], [1, -1, 1, -1], [1, 1, -1, -1], [1, -1, -1, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a matrix that has alternating row sums A = [[1, -1, 2], [-2, 2, -3], [3, -3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, -1, 2], [-2, 2, -3], [3, -3, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a matrix where every row is a permutation of the first row A = [[2, 1, 3, 4], [1, 3, 4, 2], [3, 4, 2, 1], [4, 2, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 3, 4], [1, 3, 4, 2], [3, 4, 2, 1], [4, 2, 1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a block diagonal matrix A = [[2, 1, 0, 0], [1, 2, 0, 0], [0, 0, 3, -1], [0, 0, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0, 0], [1, 2, 0, 0], [0, 0, 3, -1], [0, 0, -1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 5x5 Toeplitz matrix A = [[2, -1, 0, 0, 0], [-1, 2, -1, 0, 0], [0, -1, 2, -1, 0], [0, 0, -1, 2, -1], [0, 0, 0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0, 0, 0], [-1, 2, -1, 0, 0], [0, -1, 2, -1, 0], [0, 0, -1, 2, -1], [0, 0, 0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 permutation matrix A = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a Hilbert 4x4 matrix A = [[1, 1/2, 1/3, 1/4], [1/2, 1/3, 1/4, 1/5], [1/3, 1/4, 1/5, 1/6], [1/4, 1/5, 1/6, 1/7]].",
    "output": "import numpy as np\nfrom scipy.linalg import hilbert\nA = hilbert(4)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of a companion matrix A = [[0, 0, 0, -1], [1, 0, 0, 3], [0, 1, 0, -3], [0, 0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[0, 0, 0, -1], [1, 0, 0, 3], [0, 1, 0, -3], [0, 0, 1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a circulant matrix with Fibonacci numbers A = [[1, 1, 2, 3], [3, 1, 1, 2], [2, 3, 1, 1], [1, 2, 3, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 2, 3], [3, 1, 1, 2], [2, 3, 1, 1], [1, 2, 3, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a symmetric 5x5 matrix with alternating sign entries A = [[1, -1, 1, -1, 1], [-1, 2, -2, 2, -2], [1, -2, 3, -3, 3], [-1, 2, -3, 4, -4], [1, -2, 3, -4, 5]].",
    "output": "import numpy as np\nA = np.array([[1, -1, 1, -1, 1], [-1, 2, -2, 2, -2], [1, -2, 3, -3, 3], [-1, 2, -3, 4, -4], [1, -2, 3, -4, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a sparse diagonal-plus-rank-one matrix A = [[3, 0, 0, 1], [0, 3, 0, 1], [0, 0, 3, 1], [1, 1, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 0, 0, 1], [0, 3, 0, 1], [0, 0, 3, 1], [1, 1, 1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 Markov transition matrix A = [[0.7, 0.2, 0.1], [0.1, 0.6, 0.3], [0.2, 0.2, 0.6]].",
    "output": "import numpy as np\nA = np.array([[0.7, 0.2, 0.1], [0.1, 0.6, 0.3], [0.2, 0.2, 0.6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a matrix formed by an outer product A = [[1, 2], [2, 4]].",
    "output": "import numpy as np\nA = np.outer([1, 2], [1, 2])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 diagonal matrix A = [[3, 0], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 identity matrix A = [[1, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.eye(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 zero matrix A = [[0, 0], [0, 0]].",
    "output": "import numpy as np\nA = np.zeros((2,2))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 2x2 scalar matrix A = [[4, 0], [0, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 0], [0, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 2x2 upper triangular matrix A = [[2, 1], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 diagonal matrix A = [[1, 0, 0], [0, 4, 0], [0, 0, 7]].",
    "output": "import numpy as np\nA = np.diag([1, 4, 7])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 identity matrix A = [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.eye(3)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 zero matrix A = [[0, 0, 0], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nA = np.zeros((3,3))\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix A = [[2, 1, 0], [0, 3, 2], [0, 0, 5]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [0, 3, 2], [0, 0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 3x3 lower triangular matrix A = [[2, 0, 0], [1, 3, 0], [4, 5, 7]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [1, 3, 0], [4, 5, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[4, -2], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[4, -2], [1, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[3, 1], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues of the matrix A = [[5, -4], [2, -3]].",
    "output": "import numpy as np\nA = np.array([[5, -4], [2, -3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[6, -2], [2, 3]].",
    "output": "import numpy as np\nA = np.array([[6, -2], [2, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 3x3 matrix A = [[2, 1, 1], [1, 2, 1], [1, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [1, 2, 1], [1, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 upper triangular matrix A = [[3, -1, 2], [0, 4, -1], [0, 0, 5]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 2], [0, 4, -1], [0, 0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvalues of A = [[1, 2, 3], [0, 1, 4], [0, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 1, 4], [0, 0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a symmetric 3x3 matrix A = [[4, 1, 1], [1, 4, 1], [1, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 1], [1, 4, 1], [1, 1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a symmetric 3x3 matrix A = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 matrix A = [[0, 1, 0], [-1, 0, 1], [0, -1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [-1, 0, 1], [0, -1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the 4x4 matrix A = [[2, -1, 0, 0], [-1, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, -1, 0, 0], [-1, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 circulant matrix A = [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import circulant\nA = circulant([1, 2, 3, 4])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the 5x5 matrix A = [[5, 2, 0, 0, 1], [2, 4, 2, 0, 0], [0, 2, 3, 2, 0], [0, 0, 2, 2, 2], [1, 0, 0, 2, 1]].",
    "output": "import numpy as np\nA = np.array([[5, 2, 0, 0, 1], [2, 4, 2, 0, 0], [0, 2, 3, 2, 0], [0, 0, 2, 2, 2], [1, 0, 0, 2, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the 4x4 matrix A = [[3, -1, 0, 0], [-1, 3, -1, 0], [0, -1, 3, -1], [0, 0, -1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, -1, 0, 0], [-1, 3, -1, 0], [0, -1, 3, -1], [0, 0, -1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 5x5 symmetric pentadiagonal matrix A = [[4, 1, 0, 0, 0], [1, 4, 1, 0, 0], [0, 1, 4, 1, 0], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 0, 0, 0], [1, 4, 1, 0, 0], [0, 1, 4, 1, 0], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvalues of a 6x6 block diagonal matrix with blocks [[1, 2], [2, 1]] and [[3, 4], [4, 3]] and [[5, 6], [6, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import block_diag\nA = block_diag([[1, 2], [2, 1]], [[3, 4], [4, 3]], [[5, 6], [6, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a skew-symmetric 4x4 matrix A = [[0, 2, -3, 1], [-2, 0, 4, -2], [3, -4, 0, 5], [-1, 2, -5, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2, -3, 1], [-2, 0, 4, -2], [3, -4, 0, 5], [-1, 2, -5, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the companion matrix A = [[0, 0, 0, -5], [1, 0, 0, 4], [0, 1, 0, -3], [0, 0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[0, 0, 0, -5], [1, 0, 0, 4], [0, 1, 0, -3], [0, 0, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a rank-one modification of an identity matrix A = I + uv^T, where u = [1, 2, 3], v = [4, 5, 6].",
    "output": "import numpy as np\nu = np.array([1, 2, 3]).reshape(-1, 1)\nv = np.array([4, 5, 6]).reshape(1, -1)\nA = np.eye(3) + np.dot(u, v)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[7, 2], [2, 5]].",
    "output": "import numpy as np\nA = np.array([[7, 2], [2, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[3, -1], [4, 2]].",
    "output": "import numpy as np\nA = np.array([[3, -1], [4, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues of A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 4x4 identity matrix A = I_4.",
    "output": "import numpy as np\nA = np.eye(4)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of the upper triangular matrix A = [[1, 2, 3], [0, 4, 5], [0, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 4, 5], [0, 0, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a 3x3 skew-symmetric matrix A = [[0, -1, 2], [1, 0, -3], [-2, 3, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1, 2], [1, 0, -3], [-2, 3, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of A = [[0, 1, -1], [-1, 0, 1], [1, -1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1, -1], [-1, 0, 1], [1, -1, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a 4x4 matrix with repeated eigenvalues: A = [[3, 1, 0, 0], [0, 3, 2, 0], [0, 0, 3, 1], [0, 0, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1, 0, 0], [0, 3, 2, 0], [0, 0, 3, 1], [0, 0, 0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a block diagonal matrix with blocks [[2, 1], [1, 2]] and [[5, 0], [0, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import block_diag\nA = block_diag([[2, 1], [1, 2]], [[5, 0], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a symmetric tridiagonal matrix A = [[4, 1, 0, 0], [1, 4, 1, 0], [0, 1, 4, 1], [0, 0, 1, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 1, 0, 0], [1, 4, 1, 0], [0, 1, 4, 1], [0, 0, 1, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[2, 0], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[1, 0], [0, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the 2x2 identity matrix.",
    "output": "import numpy as np\nA = np.eye(2)\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of A = [[5, 0], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 0], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvectors of the matrix A = [[6, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[6, 0], [0, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of a diagonal matrix A = [[7, 0], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[7, 0], [0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvectors of the matrix A = [[9, 0], [0, 9]].",
    "output": "import numpy as np\nA = np.array([[9, 0], [0, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[0, 0], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 0], [0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvalues of the matrix A = [[3, 0], [0, -3]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [0, -3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues of a matrix A = [[10, 0], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[10, 0], [0, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 1], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the matrix A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvectors of A = [[4, 2], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 2], [1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the 3x3 matrix A = [[6, 2, 1], [2, 3, 1], [1, 1, 1]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 3, 1], [1, 1, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvectors of a 3x3 matrix A = [[2, 0, 0], [0, 3, 4], [0, 4, 9]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [0, 3, 4], [0, 4, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute eigenvalues of A = [[1, 2, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 0], [0, 3, 0], [0, 0, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find eigenvalues and eigenvectors of symmetric matrix A = [[4, 1], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[4, 1], [1, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute eigenvalues of A = [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine eigenvectors for A = [[0, 2], [2, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2], [2, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find eigenvalues of a 3x3 matrix A = [[1, 2, 1], [6, -1, 0], [-1, -2, -1]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 1], [6, -1, 0], [-1, -2, -1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[1, 2, 3], [0, 4, 5], [1, 0, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [0, 4, 5], [1, 0, 6]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvalues and eigenvectors of matrix A = [[10, -2, 3], [4, 7, -1], [2, 5, 9]].",
    "output": "import numpy as np\nA = np.array([[10, -2, 3], [4, 7, -1], [2, 5, 9]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues for the 4x4 matrix A = [[6, 2, 1, 0], [2, 3, 1, 0], [1, 1, 1, 0], [0, 0, 0, 7]].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1, 0], [2, 3, 1, 0], [1, 1, 1, 0], [0, 0, 0, 7]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of a matrix with complex entries: A = [[0, -1], [1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, -1], [1, 0]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues and eigenvectors of the matrix A = [[2, 2, 1], [1, 3, 1], [1, 2, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 1], [1, 3, 1], [1, 2, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues of the matrix A = [[4, -2, 1], [0, 3, -1], [0, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[4, -2, 1], [0, 3, -1], [0, 0, 2]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[0, 1, 0], [0, 0, 1], [-1, -1, -1]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [-1, -1, -1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvalues and eigenvectors of a 3x3 matrix A = [[3, 0, 1], [0, 2, 0], [1, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 0, 1], [0, 2, 0], [1, 0, 3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Determine the eigenvalues of a nearly singular matrix A = [[1, 2, 3], [4, 5, 6], [7.001, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6], [7.001, 8, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[1, 1, 0], [0, 1, 1], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [0, 1, 1], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[1, 2], [2, 1]] and comment on their multiplicity.",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvectors of the nilpotent matrix A = [[0, 1], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of the Jordan block matrix A = [[5, 1], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 1], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvectors of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]]. What do you notice?",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Check if matrix A = [[2, -2], [1, 3]] has complex eigenvalues.",
    "output": "import numpy as np\nA = np.array([[2, -2], [1, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find eigenvalues of a matrix with repeated eigenvalues: A = [[3, 1], [0, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find eigenvalues and eigenvectors of the matrix A = [[2, 0, 0], [0, 2, 0], [0, 0, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [0, 2, 0], [0, 0, 2]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Compute the eigenvalues of a rank-deficient matrix A = [[1, 2, 3], [2, 4, 6], [3, 6, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 4, 6], [3, 6, 9]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Calculate eigenvectors of A = [[4, -5], [2, -3]]. Are the eigenvectors linearly independent?",
    "output": "import numpy as np\nA = np.array([[4, -5], [2, -3]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the complex Hermitian matrix A = [[1+0j, 2-1j], [2+1j, 3+0j]].",
    "output": "import numpy as np\nA = np.array([[1+0j, 2-1j], [2+1j, 3+0j]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[3, 0], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [0, 5]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvectors of matrix A = [[2, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [0, 1]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of the matrix A = [[4, 0], [0, 4]].",
    "output": "import numpy as np\nA = np.array([[4, 0], [0, 4]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute the eigenvectors of a matrix A = [[1, 0], [0, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 6]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find eigenvalues of the matrix A = [[2, 0, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [0, 2, 0], [0, 0, 3]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Determine the eigenvalues of the matrix A = [[0, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[0, 0], [0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Compute eigenvectors of the identity matrix A = [[1, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.eye(2)\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Find the eigenvalues of matrix A = [[5, 0, 0], [0, 2, 0], [0, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[5, 0, 0], [0, 2, 0], [0, 0, 1]])\neigenvalues, _ = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)"
  },
  {
    "input": "Find eigenvalues and eigenvectors of matrix A = [[1, 0], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[1, 0], [0, 0]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [[1, 1], [1, -1]].",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, -1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis using Gram-Schmidt: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find an orthonormal basis for the vectors [[2, 3], [2, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 2], [3, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal basis of [[1, 0, 1], [1, 1, 0], [0, 1, 1]] using the Gram-Schmidt process.",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [0, 1, 1], [1, 0, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt on the set of vectors [[3, 1], [2, 2]].",
    "output": "import numpy as np\nA = np.array([[3, 2], [1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Compute an orthonormal basis using Gram-Schmidt for vectors [[4, 0], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[4, 1], [0, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Orthonormalize the matrix [[1, 2], [3, 4]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix: \\n{Q}')"
  },
  {
    "input": "Use the Gram-Schmidt process on the matrix [[0, 1], [2, 3]].",
    "output": "import numpy as np\nA = np.array([[0, 2], [1, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to vectors [[2, -1], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [-1, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Find orthonormal basis for [[1, 2, 2], [0, 1, 1], [1, 0, 1]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1, 0, 1], [2, 1, 0], [2, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply the Gram-Schmidt procedure on [[5, 1], [2, 4]].",
    "output": "import numpy as np\nA = np.array([[5, 2], [1, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal vectors from [[1, 1, 0], [1, 0, 1], [0, 1, 1]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [1, 0, 1], [0, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[1, 4], [3, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 3], [4, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on [[1, 1, 1], [1, 2, 3], [1, 3, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [1, 2, 3], [1, 3, 6]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on the column vectors of [[2, 2], [2, -2]].",
    "output": "import numpy as np\nA = np.array([[2, 2], [2, -2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Compute the orthonormal basis using Gram-Schmidt on [[1, 0], [1, 1], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [0, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on [[2, 0, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [0, 3, 0], [0, 0, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal basis for the matrix [[2, 4], [6, 8]].",
    "output": "import numpy as np\nA = np.array([[2, 6], [4, 8]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Orthonormalize the vectors [[0, 0, 1], [1, 0, 0], [0, 1, 0]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt orthogonalization on [[1, 1], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1], [1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find orthonormal basis for [[3, 3], [4, 4]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[3, 4], [3, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to vectors [[2, 1], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[2, 0], [1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find the orthonormal basis of [[5, 0], [0, 5]].",
    "output": "import numpy as np\nA = np.array([[5, 0], [0, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt process on matrix [[1, 1], [0, 1], [0, 0]].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [1, 1, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal basis of [[1, 2], [2, 5]] using Gram-Schmidt process.",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find an orthonormal basis for the vectors [[1, 3], [2, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [3, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to [[4, 5], [2, 1]].",
    "output": "import numpy as np\nA = np.array([[4, 2], [5, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Find an orthonormal basis of the matrix [[1, 1], [2, 4], [3, 9]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [1, 4, 9]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Orthonormalize the vectors [[0, 2], [2, 0]] using Gram-Schmidt process.",
    "output": "import numpy as np\nA = np.array([[0, 2], [2, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized set: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on [[3, 1], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[3, 0], [1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on the matrix [[2, 3, 1], [1, 0, 1], [4, 2, 0]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 4], [3, 0, 2], [1, 1, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nA = np.array([[1, 0, 5], [2, 1, 6], [3, 4, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[1, 0], [1, 2], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [0, 2, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt on the vectors [[0, 0, 1], [0, 1, 0], [1, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to find an orthonormal basis for [[2, 1], [3, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to get orthonormal basis for [[1, -1], [-1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, -1], [-1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal vectors from [[2, 1], [2, -1], [1, 1]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[2, 2, 1], [1, -1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[3, 1, 2], [0, 2, 1], [1, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[3, 0, 1], [1, 2, 0], [2, 1, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt on the matrix [[2, 2, 2], [2, 2, 2], [2, 2, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix: \\n{Q}')"
  },
  {
    "input": "Find an orthonormal basis using Gram-Schmidt for [[1, 2, 3], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on the vectors [[2, 4], [4, 8]].",
    "output": "import numpy as np\nA = np.array([[2, 4], [4, 8]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on [[1, 2], [3, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 3], [2, 6]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on [[2, 0, 0], [2, 0, 0], [2, 0, 0]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 2], [0, 0, 0], [0, 0, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on [[1, 0], [1, 0], [0, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [0, 0, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to orthonormalize [[3, 4], [4, -3]].",
    "output": "import numpy as np\nA = np.array([[3, 4], [4, -3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized set: \\n{Q}')"
  },
  {
    "input": "Orthonormalize the matrix [[7, 0], [0, 7]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[7, 0], [0, 7]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on [[0, 1, 0], [1, 0, 1]].",
    "output": "import numpy as np\nA = np.array([[0, 1], [1, 0], [0, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal basis for [[2, 1, 0], [1, 2, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 0], [1, 2, 1], [0, 1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for vectors [[5, 6], [7, 8]].",
    "output": "import numpy as np\nA = np.array([[5, 7], [6, 8]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt process to the matrix [[1, 2], [3, 5], [5, 8]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 5], [2, 5, 8]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Orthonormalize the matrix [[4, 2], [1, 3], [0, 5]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[4, 1, 0], [2, 3, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix:\\n{Q}')"
  },
  {
    "input": "Find an orthonormal basis using Gram-Schmidt for [[1, 0, 1], [2, 2, 2]].",
    "output": "import numpy as np\nA = np.array([[1, 2], [0, 2], [1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[2, 1, 0], [1, 2, 1], [3, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 3], [1, 2, 1], [0, 1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized basis:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[1, 3, 2], [4, 5, 6], [7, 8, 9]].",
    "output": "import numpy as np\nA = np.array([[1, 4, 7], [3, 5, 8], [2, 6, 9]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on the vectors [[5, 5], [1, -2], [2, 3]].",
    "output": "import numpy as np\nA = np.array([[5, 1, 2], [5, -2, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized set:\\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt on the matrix [[1, 1], [0, 2], [1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 0, 1], [1, 2, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Find an orthonormal basis for the set [[2, 2, 1], [1, 1, 3]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[2, 1], [2, 1], [1, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Orthonormalize the matrix [[3, 4, 1], [1, 1, 0], [2, 2, 2]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[3, 1, 2], [4, 1, 2], [1, 0, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to the matrix [[0, 1, 2], [2, 3, 4], [4, 5, 6]].",
    "output": "import numpy as np\nA = np.array([[0, 2, 4], [1, 3, 5], [2, 4, 6]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal vectors from [[6, 1], [3, 2], [0, 2]].",
    "output": "import numpy as np\nA = np.array([[6, 3, 0], [1, 2, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal vectors:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[2, 2], [2, -2], [0, 4]].",
    "output": "import numpy as np\nA = np.array([[2, 2, 0], [2, -2, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized basis:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt process on the vectors [[1, 0, 0], [1, 1, 0], [1, 1, 1]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [0, 1, 1], [0, 0, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized set:\\n{Q}')"
  },
  {
    "input": "Find orthonormal vectors using Gram-Schmidt for matrix [[2, 0, 0], [1, 2, 0], [1, 1, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1, 1], [0, 2, 1], [0, 0, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[3, 1, 4], [2, 5, 1], [0, 1, 2]].",
    "output": "import numpy as np\nA = np.array([[3, 2, 0], [1, 5, 1], [4, 1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized set:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[2, 3], [4, 6], [1, 2]].",
    "output": "import numpy as np\nA = np.array([[2, 4, 1], [3, 6, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Find orthonormal vectors from matrix [[0, 2, 1], [2, 3, 4], [3, 1, 0]].",
    "output": "import numpy as np\nA = np.array([[0, 2, 3], [2, 3, 1], [1, 4, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized basis:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[7, 1, 2], [0, 3, 5]].",
    "output": "import numpy as np\nA = np.array([[7, 0], [1, 3], [2, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt process on the matrix [[1, 2], [3, 6], [5, 10]].",
    "output": "import numpy as np\nA = np.array([[1, 3, 5], [2, 6, 10]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal matrix:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt on [[1, 1, 1], [1, 2, 3], [2, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[1, 1, 2], [1, 2, 3], [1, 3, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix:\\n{Q}')"
  },
  {
    "input": "Orthonormalize the vectors [[4, 1], [5, 1], [6, 2]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[4, 5, 6], [1, 1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to [[0, 1, 0], [1, 0, 1], [0, 1, 1]].",
    "output": "import numpy as np\nA = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal set:\\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[3, 2, 1], [2, 3, 4]].",
    "output": "import numpy as np\nA = np.array([[3, 2], [2, 3], [1, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormalized matrix:\\n{Q}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for [[2, 4, 6], [1, 2, 3]].",
    "output": "import numpy as np\nA = np.array([[2, 1], [4, 2], [6, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis:\\n{Q}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [2, 1, 0] and [1, 0, 1].",
    "output": "import numpy as np\nv1 = np.array([2, 1, 0], dtype=float)\nv2 = np.array([1, 0, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the vectors [4, 0] and [1, 2].",
    "output": "import numpy as np\nv1 = np.array([4, 0], dtype=float)\nv2 = np.array([1, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on the set of vectors [1, 2, 2], [2, 4, 1], and [3, 6, 0].",
    "output": "import numpy as np\nA = np.array([[1, 2, 2], [2, 4, 1], [3, 6, 0]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Orthonormalize [3, 1] and [2, 2] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([3, 1], dtype=float)\nv2 = np.array([2, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to vectors [1, 0, 0], [1, 1, 0], and [1, 1, 1].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [1, 1, 0], [1, 1, 1]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for [1, 3, 1], [2, 6, 2].",
    "output": "import numpy as np\nv1 = np.array([1, 3, 1], dtype=float)\nv2 = np.array([2, 6, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to find an orthonormal basis for vectors [1, 2, 1], [0, 1, 0], [1, 0, 1].",
    "output": "import numpy as np\nA = np.array([[1, 2, 1], [0, 1, 0], [1, 0, 1]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Apply Gram-Schmidt on vectors [5, 0], [1, 1].",
    "output": "import numpy as np\nv1 = np.array([5, 0], dtype=float)\nv2 = np.array([1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization for the set {[1, 0], [1, 1]}.",
    "output": "import numpy as np\nv1 = np.array([1, 0], dtype=float)\nv2 = np.array([1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for vectors [1, 1, 0], [1, 1, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0], dtype=float)\nv2 = np.array([1, 1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize the 3D vectors [0, 1, 2], [2, 0, 1], [1, 1, 1].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2], [2, 0, 1], [1, 1, 1]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the vectors [1, 2, 0], [0, 1, 2].",
    "output": "import numpy as np\nv1 = np.array([1, 2, 0], dtype=float)\nv2 = np.array([0, 1, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal vectors using Gram-Schmidt for [3, 1, 0], [2, 2, 2].",
    "output": "import numpy as np\nv1 = np.array([3, 1, 0], dtype=float)\nv2 = np.array([2, 2, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt process on vectors [1, 2, 2], [2, 1, 2], [2, 2, 1].",
    "output": "import numpy as np\nA = np.array([[1, 2, 2], [2, 1, 2], [2, 2, 1]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the set of vectors [4, 2], [1, 3].",
    "output": "import numpy as np\nv1 = np.array([4, 2], dtype=float)\nv2 = np.array([1, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize the vectors [6, 2, 1], [2, 4, 6], and [1, 3, 5].",
    "output": "import numpy as np\nA = np.array([[6, 2, 1], [2, 4, 6], [1, 3, 5]], dtype=float).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: {Q.T}')"
  },
  {
    "input": "Apply Gram-Schmidt to vectors [1, 1], [1, -1].",
    "output": "import numpy as np\nv1 = np.array([1, 1], dtype=float)\nv2 = np.array([1, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt for orthonormalizing [1, 1, 1], [2, 3, 4].",
    "output": "import numpy as np\nv1 = np.array([1, 1, 1], dtype=float)\nv2 = np.array([2, 3, 4], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on the vectors [1, 0], [0, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 0], dtype=float)\nv2 = np.array([0, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nu2 = v2 / np.linalg.norm(v2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for vectors [3, 0, 4], [4, 3, 0].",
    "output": "import numpy as np\nv1 = np.array([3, 0, 4], dtype=float)\nv2 = np.array([4, 3, 0], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to get orthonormal basis for [5, 5], [1, -1].",
    "output": "import numpy as np\nv1 = np.array([5, 5], dtype=float)\nv2 = np.array([1, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 /= np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [1, 1, 0] and [1, 0, 1].",
    "output": "import numpy as np\nA = np.array([[1, 1, 0], [1, 0, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the set of vectors [2, 0, 0], [1, 1, 0], and [1, 1, 1].",
    "output": "import numpy as np\nA = np.array([[2, 0, 0], [1, 1, 0], [1, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find the orthonormal basis using Gram-Schmidt for the matrix [[3, 1], [2, 2], [1, 3]].",
    "output": "import numpy as np\nA = np.array([[3, 1], [2, 2], [1, 3]])\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt process on vectors [4, 2], [2, 3].",
    "output": "import numpy as np\nA = np.array([[4, 2], [2, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to orthonormalize the vectors [1, 2, 2] and [2, 1, 2].",
    "output": "import numpy as np\nA = np.array([[1, 2, 2], [2, 1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "What is the result of applying Gram-Schmidt to [[0, 1], [1, 1], [2, 3]]?",
    "output": "import numpy as np\nA = np.array([[0, 1], [1, 1], [2, 3]])\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on the vectors [1, 0, 0], [1, 1, 0], [1, 1, 1].",
    "output": "import numpy as np\nA = np.array([[1, 0, 0], [1, 1, 0], [1, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use the Gram-Schmidt process for vectors [2, 1, -1] and [1, -1, 2].",
    "output": "import numpy as np\nA = np.array([[2, 1, -1], [1, -1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find an orthonormal basis for vectors [3, 3, 0] and [3, -3, 0] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[3, 3, 0], [3, -3, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to [2, 2, 1], [1, 3, 1], [1, 2, 3].",
    "output": "import numpy as np\nA = np.array([[2, 2, 1], [1, 3, 1], [1, 2, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt process on [3, 0, 0], [3, 3, 0], [3, 3, 3].",
    "output": "import numpy as np\nA = np.array([[3, 0, 0], [3, 3, 0], [3, 3, 3]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize vectors [1, 2], [2, 4].",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 4]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt to vectors [1, 1, 1], [1, 0, -1], [0, 1, 1].",
    "output": "import numpy as np\nA = np.array([[1, 1, 1], [1, 0, -1], [0, 1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on the vectors [1, 2, 3], [2, 3, 4], [3, 4, 5].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for [0, 1, 2], [2, 0, 1], [1, 2, 0].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2], [2, 0, 1], [1, 2, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Orthonormalize the matrix [[1, 2], [2, 1], [3, 4]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 1], [3, 4]])\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt for vectors [1, 2, 3], [4, 5, 6].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [4, 5, 6]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt process to [1, 0], [1, 1].",
    "output": "import numpy as np\nA = np.array([[1, 0], [1, 1]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal basis for [1, 2], [2, 3], [3, 5].",
    "output": "import numpy as np\nA = np.array([[1, 2], [2, 3], [3, 5]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt process to orthonormalize [[2, 3], [4, 5], [6, 7]].",
    "output": "import numpy as np\nA = np.array([[2, 3], [4, 5], [6, 7]])\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply Gram-Schmidt on matrix [[1, 2, 3], [2, 3, 4], [3, 4, 6]].",
    "output": "import numpy as np\nA = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 6]])\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Perform Gram-Schmidt on vectors [1, -1, 0], [1, 1, 0].",
    "output": "import numpy as np\nA = np.array([[1, -1, 0], [1, 1, 0]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Find orthonormal vectors for [2, 1], [1, 2] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[2, 1], [1, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [0, 1, 2], [1, 0, 2].",
    "output": "import numpy as np\nA = np.array([[0, 1, 2], [1, 0, 2]]).T\nQ, _ = np.linalg.qr(A)\nprint(f'Orthonormal basis: \\n{Q}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [1, 2, 2] and [2, 1, 3].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nv1 = np.array([1, 2, 2])\nv2 = np.array([2, 1, 3])\nu1 = v1\nu2 = v2 - np.dot(v2, u1)/np.dot(u1, u1) * u1\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthogonalize the set of vectors [3, 1] and [2, 2].",
    "output": "import numpy as np\nv1 = np.array([3, 1])\nv2 = np.array([2, 2])\nu1 = v1\nu2 = v2 - np.dot(v2, u1)/np.dot(u1, u1) * u1\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Perform the Gram-Schmidt process on the set [[1, 0, 1], [1, 1, 0], [0, 1, 1]].",
    "output": "import numpy as np\nv = [np.array([1, 0, 1]), np.array([1, 1, 0]), np.array([0, 1, 1])]\nu = []\nfor i in range(len(v)):\n    ui = v[i]\n    for j in range(i):\n        ui -= np.dot(v[i], u[j])/np.dot(u[j], u[j]) * u[j]\n    u.append(ui)\nfor idx, vec in enumerate(u):\n    print(f'u{idx+1}: {vec}')"
  },
  {
    "input": "Apply Gram-Schmidt to the vectors [6, 0, 0], [0, 6, 0], [0, 0, 6].",
    "output": "import numpy as np\nv = [np.array([6, 0, 0]), np.array([0, 6, 0]), np.array([0, 0, 6])]\nu = [vi / np.linalg.norm(vi) for vi in v]\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Perform Gram-Schmidt on vectors [3, 1], [6, 2].",
    "output": "import numpy as np\nv1 = np.array([3, 1])\nv2 = np.array([6, 2])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to vectors [1.1, 2.2] and [3.3, 4.4].",
    "output": "import numpy as np\nv1 = np.array([1.1, 2.2])\nv2 = np.array([3.3, 4.4])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the vectors [1.5, 2.5] and [3.0, 1.5].",
    "output": "import numpy as np\nv1 = np.array([1.5, 2.5])\nv2 = np.array([3.0, 1.5])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthogonal vectors from [2.4, 3.6, 1.2] and [4.8, 1.8, 2.1] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([2.4, 3.6, 1.2])\nv2 = np.array([4.8, 1.8, 2.1])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply the Gram-Schmidt process to [0.5, 1.5, 2.5] and [2.5, 1.5, 0.5].",
    "output": "import numpy as np\nv1 = np.array([0.5, 1.5, 2.5])\nv2 = np.array([2.5, 1.5, 0.5])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to convert vectors [1.2, 0.8] and [0.6, 2.4] into an orthogonal set.",
    "output": "import numpy as np\nv1 = np.array([1.2, 0.8])\nv2 = np.array([0.6, 2.4])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal set: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt orthogonalization on [1.5, 0.5, 1.0] and [1.0, 1.0, 0.5].",
    "output": "import numpy as np\nv1 = np.array([1.5, 0.5, 1.0])\nv2 = np.array([1.0, 1.0, 0.5])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize vectors [0.5, 0.5] and [1.5, 2.5] using Gram-Schmidt process.",
    "output": "import numpy as np\nv1 = np.array([0.5, 0.5])\nv2 = np.array([1.5, 2.5])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to get orthogonal basis from [1.1, 2.2, 3.3] and [3.3, 2.2, 1.1].",
    "output": "import numpy as np\nv1 = np.array([1.1, 2.2, 3.3])\nv2 = np.array([3.3, 2.2, 1.1])\nu1 = v1\nproj = np.dot(v2,u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to get orthonormal vectors from [0.2, 0.6] and [0.6, 0.8].",
    "output": "import numpy as np\nv1 = np.array([0.2, 0.6])\nv2 = np.array([0.6, 0.8])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal set using Gram-Schmidt for vectors [2.2, 1.1, 0.3] and [1.1, 0.3, 2.2].",
    "output": "import numpy as np\nv1 = np.array([2.2, 1.1, 0.3])\nv2 = np.array([1.1, 0.3, 2.2])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [1.3, 0.9, 2.2] and [0.7, 2.5, 1.1].",
    "output": "import numpy as np\nv1 = np.array([1.3, 0.9, 2.2])\nv2 = np.array([0.7, 2.5, 1.1])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal basis for [2.5, 1.8] and [1.1, 0.4] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([2.5, 1.8])\nv2 = np.array([1.1, 0.4])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [0.9, 1.4, 3.1] and [2.2, 1.1, 0.3].",
    "output": "import numpy as np\nv1 = np.array([0.9, 1.4, 3.1])\nv2 = np.array([2.2, 1.1, 0.3])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthogonalize vectors [1.6, 0.7] and [0.4, 2.3].",
    "output": "import numpy as np\nv1 = np.array([1.6, 0.7])\nv2 = np.array([0.4, 2.3])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonalized vectors: {u1}, {u2}')"
  },
  {
    "input": "Compute orthonormal basis using Gram-Schmidt on vectors [2.2, 3.4] and [1.3, 0.8].",
    "output": "import numpy as np\nv1 = np.array([2.2, 3.4])\nv2 = np.array([1.3, 0.8])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt process to [0.6, 0.4, 0.9] and [1.1, 1.2, 2.3].",
    "output": "import numpy as np\nv1 = np.array([0.6, 0.4, 0.9])\nv2 = np.array([1.1, 1.2, 2.3])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [2.1, 3.3] and [1.7, 0.5] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([2.1, 3.3])\nv2 = np.array([1.7, 0.5])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthogonalize the set [0.5, 1.8, 2.6] and [3.3, 2.1, 1.2].",
    "output": "import numpy as np\nv1 = np.array([0.5, 1.8, 2.6])\nv2 = np.array([3.3, 2.1, 1.2])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal vectors from [1.0, 2.2] and [2.8, 1.7] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([1.0, 2.2])\nv2 = np.array([2.8, 1.7])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt on vectors [0.3, 0.7, 1.5] and [1.1, 2.2, 3.3].",
    "output": "import numpy as np\nv1 = np.array([0.3, 0.7, 1.5])\nv2 = np.array([1.1, 2.2, 3.3])\nu1 = v1\nproj = np.dot(v2,u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [3.2, 2.1] and [0.9, 0.4] using Gram-Schmidt process.",
    "output": "import numpy as np\nv1 = np.array([3.2, 2.1])\nv2 = np.array([0.9, 0.4])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [1.3, 2.6, 3.9] and [0.5, 1.0, 1.5].",
    "output": "import numpy as np\nv1 = np.array([1.3, 2.6, 3.9])\nv2 = np.array([0.5, 1.0, 1.5])\nu1 = v1\nproj = np.dot(v2,u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt on [0.4, 0.8] and [1.6, 0.3] to find an orthonormal set.",
    "output": "import numpy as np\nv1 = np.array([0.4, 0.8])\nv2 = np.array([1.6, 0.3])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal set: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [0.6, 0.2, 1.7] and [1.5, 2.5, 0.9] using Gram-Schmidt method.",
    "output": "import numpy as np\nv1 = np.array([0.6, 0.2, 1.7])\nv2 = np.array([1.5, 2.5, 0.9])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2,u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [2.0, 3.0] and [1.2, 0.4].",
    "output": "import numpy as np\nv1 = np.array([2.0, 3.0])\nv2 = np.array([1.2, 0.4])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1,u1)*u1\nu2 = v2 - proj\nprint(f'Orthogonal vectors: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on the vectors [[2.5, 3.5], [4.5, 5.5]].",
    "output": "import numpy as np\nA = np.array([[2.5, 3.5], [4.5, 5.5]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply the Gram-Schmidt process to the matrix [[1.6, 0.4], [2.8, 3.3]].",
    "output": "import numpy as np\nA = np.array([[1.6, 0.4], [2.8, 3.3]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthogonal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Find the orthogonal basis for the vectors [[0.2, 0.3, 0.5], [0.6, 0.7, 0.9]].",
    "output": "import numpy as np\nA = np.array([[0.2, 0.3, 0.5], [0.6, 0.7, 0.9]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt on matrix [[4.2, 5.3], [6.4, 7.5]].",
    "output": "import numpy as np\nA = np.array([[4.2, 5.3], [6.4, 7.5]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt process on [[1.9, 2.8], [3.7, 4.6]].",
    "output": "import numpy as np\nA = np.array([[1.9, 2.8], [3.7, 4.6]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize the matrix [[0.5, 0.6, 0.7], [0.8, 0.9, 1.0]].",
    "output": "import numpy as np\nA = np.array([[0.5, 0.6, 0.7], [0.8, 0.9, 1.0]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt on [[3.3, 1.4], [2.2, 4.1]].",
    "output": "import numpy as np\nA = np.array([[3.3, 1.4], [2.2, 4.1]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Compute the orthogonal basis for [[0.7, 0.2], [0.4, 0.6]].",
    "output": "import numpy as np\nA = np.array([[0.7, 0.2], [0.4, 0.6]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Find the Gram-Schmidt orthonormal basis of [[5.5, 1.1], [2.2, 3.3]].",
    "output": "import numpy as np\nA = np.array([[5.5, 1.1], [2.2, 3.3]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal basis of [[0.11, 0.22], [0.33, 0.44]].",
    "output": "import numpy as np\nA = np.array([[0.11, 0.22], [0.33, 0.44]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize matrix [[6.6, 7.7], [8.8, 9.9]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[6.6, 7.7], [8.8, 9.9]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[2.5, 0.3], [0.9, 1.7]].",
    "output": "import numpy as np\nA = np.array([[2.5, 0.3], [0.9, 1.7]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Find orthonormal basis for [[1.8, 2.4], [3.5, 4.1]] using Gram-Schmidt process.",
    "output": "import numpy as np\nA = np.array([[1.8, 2.4], [3.5, 4.1]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on matrix [[0.9, 1.8], [2.7, 3.6]].",
    "output": "import numpy as np\nA = np.array([[0.9, 1.8], [2.7, 3.6]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt process to orthonormalize [[3.3, 2.2], [1.1, 0.9]].",
    "output": "import numpy as np\nA = np.array([[3.3, 2.2], [1.1, 0.9]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[0.45, 0.78], [0.56, 0.89]].",
    "output": "import numpy as np\nA = np.array([[0.45, 0.78], [0.56, 0.89]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Compute orthonormal vectors using Gram-Schmidt for [[2.9, 1.1], [0.5, 3.3]].",
    "output": "import numpy as np\nA = np.array([[2.9, 1.1], [0.5, 3.3]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Find the orthonormal basis using Gram-Schmidt for matrix [[0.33, 0.66], [0.99, 1.32]].",
    "output": "import numpy as np\nA = np.array([[0.33, 0.66], [0.99, 1.32]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt on [[1.1, 0.1], [0.3, 2.7]].",
    "output": "import numpy as np\nA = np.array([[1.1, 0.1], [0.3, 2.7]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[0.02, 0.04], [0.06, 0.08]].",
    "output": "import numpy as np\nA = np.array([[0.02, 0.04], [0.06, 0.08]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt process to matrix [[4.9, 1.2], [3.8, 0.7]].",
    "output": "import numpy as np\nA = np.array([[4.9, 1.2], [3.8, 0.7]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthogonal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Compute Gram-Schmidt orthonormal vectors for [[0.17, 0.29], [0.41, 0.53]].",
    "output": "import numpy as np\nA = np.array([[0.17, 0.29], [0.41, 0.53]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize the matrix [[3.33, 4.44], [5.55, 6.66]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[3.33, 4.44], [5.55, 6.66]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Find orthogonal vectors for matrix [[1.12, 2.24], [3.36, 4.48]] using Gram-Schmidt.",
    "output": "import numpy as np\nA = np.array([[1.12, 2.24], [3.36, 4.48]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt orthonormalization on the vectors [[0.31, 0.42], [0.53, 0.64]].",
    "output": "import numpy as np\nA = np.array([[0.31, 0.42], [0.53, 0.64]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Find the orthonormal basis for matrix [[1.15, 2.25], [3.35, 4.45]].",
    "output": "import numpy as np\nA = np.array([[1.15, 2.25], [3.35, 4.45]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt on matrix [[2.9, 1.7], [3.6, 2.5]].",
    "output": "import numpy as np\nA = np.array([[2.9, 1.7], [3.6, 2.5]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt process on [[4.1, 3.3], [2.2, 1.4]].",
    "output": "import numpy as np\nA = np.array([[4.1, 3.3], [2.2, 1.4]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize the matrix [[0.45, 0.55], [0.65, 0.75]].",
    "output": "import numpy as np\nA = np.array([[0.45, 0.55], [0.65, 0.75]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt to [[1.2, 3.4], [5.6, 7.8]].",
    "output": "import numpy as np\nA = np.array([[1.2, 3.4], [5.6, 7.8]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt on the vectors [[2.3, 4.5], [6.7, 8.9]].",
    "output": "import numpy as np\nA = np.array([[2.3, 4.5], [6.7, 8.9]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize matrix [[0.91, 0.81], [0.71, 0.61]].",
    "output": "import numpy as np\nA = np.array([[0.91, 0.81], [0.71, 0.61]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt on [[1.11, 1.22], [1.33, 1.44]].",
    "output": "import numpy as np\nA = np.array([[1.11, 1.22], [1.33, 1.44]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Compute the orthonormal basis of [[2.02, 2.12], [2.22, 2.32]].",
    "output": "import numpy as np\nA = np.array([[2.02, 2.12], [2.22, 2.32]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt on matrix [[3.14, 2.71], [1.61, 0.57]].",
    "output": "import numpy as np\nA = np.array([[3.14, 2.71], [1.61, 0.57]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize [[0.33, 0.66], [0.99, 1.32]].",
    "output": "import numpy as np\nA = np.array([[0.33, 0.66], [0.99, 1.32]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[1.7, 3.1], [2.4, 4.6]].",
    "output": "import numpy as np\nA = np.array([[1.7, 3.1], [2.4, 4.6]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt process on matrix [[5.5, 6.6], [7.7, 8.8]].",
    "output": "import numpy as np\nA = np.array([[5.5, 6.6], [7.7, 8.8]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt on [[9.1, 0.1], [1.2, 2.3]].",
    "output": "import numpy as np\nA = np.array([[9.1, 0.1], [1.2, 2.3]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal vectors:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt for orthonormalizing [[0.07, 0.14], [0.21, 0.28]].",
    "output": "import numpy as np\nA = np.array([[0.07, 0.14], [0.21, 0.28]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Find orthonormal basis for matrix [[6.66, 5.55], [4.44, 3.33]].",
    "output": "import numpy as np\nA = np.array([[6.66, 5.55], [4.44, 3.33]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt on matrix [[7.2, 3.1], [4.3, 2.2]].",
    "output": "import numpy as np\nA = np.array([[7.2, 3.1], [4.3, 2.2]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Apply Gram-Schmidt to matrix [[0.98, 1.76], [2.54, 3.32]].",
    "output": "import numpy as np\nA = np.array([[0.98, 1.76], [2.54, 3.32]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Compute orthogonal vectors using Gram-Schmidt for [[3.25, 1.5], [4.5, 2.75]].",
    "output": "import numpy as np\nA = np.array([[3.25, 1.5], [4.5, 2.75]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthogonal basis:')\nprint(Q.T)"
  },
  {
    "input": "Perform Gram-Schmidt on [[0.6, 1.2], [1.8, 2.4]].",
    "output": "import numpy as np\nA = np.array([[0.6, 1.2], [1.8, 2.4]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Orthonormalize the matrix [[3.33, 2.22], [1.11, 0.99]].",
    "output": "import numpy as np\nA = np.array([[3.33, 2.22], [1.11, 0.99]])\nQ, _ = np.linalg.qr(A.T)\nprint('The orthogonal basis is:')\nprint(Q.T)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize matrix [[0.45, 0.78], [0.56, 0.89]].",
    "output": "import numpy as np\nA = np.array([[0.45, 0.78], [0.56, 0.89]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Find orthonormal basis for [[0.81, 0.18], [0.27, 0.63]].",
    "output": "import numpy as np\nA = np.array([[0.81, 0.18], [0.27, 0.63]])\nQ, _ = np.linalg.qr(A.T)\nprint('Orthonormal basis:')\nprint(Q.T)"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [[1.2, 2.4], [3.6, 4.8]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.2, 2.4], [3.6, 4.8]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the matrix [[0.5, 1.0], [1.5, 2.0]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.5, 1.0], [1.5, 2.0]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Find an orthonormal basis for the column vectors [[2.1, 3.3], [4.5, 5.7]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.1, 3.3], [4.5, 5.7]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt on [[1.5, 0.7, 2.3], [2.1, 1.8, 3.9], [0.6, 1.2, 1.4]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.5, 0.7, 2.3], [2.1, 1.8, 3.9], [0.6, 1.2, 1.4]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Orthonormalize the matrix [[2.4, 1.5], [3.1, 4.2]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.4, 1.5], [3.1, 4.2]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use the Gram-Schmidt process to orthonormalize the vectors [[1.1, 2.2], [3.3, 4.4]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.1, 2.2], [3.3, 4.4]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply Gram-Schmidt to the matrix [[1.25, 0.75], [2.5, 1.0]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.25, 0.75], [2.5, 1.0]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Orthonormalize the columns of the matrix [[0.5, 0.3, 0.2], [1.2, 0.7, 0.6], [1.8, 1.5, 1.1]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.5, 0.3, 0.2], [1.2, 0.7, 0.6], [1.8, 1.5, 1.1]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization for [[2.8, 1.2], [4.6, 3.3]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.8, 1.2], [4.6, 3.3]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Find the orthonormal basis using Gram-Schmidt for matrix [[0.75, 1.5, 2.25], [1.25, 2.0, 2.75], [0.5, 1.0, 1.5]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.75, 1.5, 2.25], [1.25, 2.0, 2.75], [0.5, 1.0, 1.5]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt to obtain orthonormal columns from matrix [[1.1, 0.9], [2.3, 1.7]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.1, 0.9], [2.3, 1.7]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply the Gram-Schmidt procedure to [[0.3, 0.6], [0.9, 1.5]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.3, 0.6], [0.9, 1.5]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt on the vectors [[1.3, 1.1], [2.6, 2.2]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.3, 1.1], [2.6, 2.2]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Orthonormalize the matrix [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]] using the Gram-Schmidt process.",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply Gram-Schmidt to orthonormalize the matrix [[2.2, 1.1, 0.5], [0.5, 1.3, 2.1], [1.4, 2.2, 1.6]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.2, 1.1, 0.5], [0.5, 1.3, 2.1], [1.4, 2.2, 1.6]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize the vectors [[1.75, 2.25], [3.1, 4.8]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.75, 2.25], [3.1, 4.8]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on matrix [[1.4, 1.8], [2.7, 3.2]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.4, 1.8], [2.7, 3.2]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Orthonormalize the columns of [[0.25, 0.5], [0.75, 1.0]] using Gram-Schmidt process.",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.25, 0.5], [0.75, 1.0]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply Gram-Schmidt to [[0.6, 0.2], [0.4, 0.8]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.6, 0.2], [0.4, 0.8]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt process to orthonormalize the matrix [[2.6, 1.2], [3.9, 2.4]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.6, 1.2], [3.9, 2.4]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt on the matrix [[0.5, 0.7, 1.2], [1.0, 1.5, 2.0], [1.5, 2.1, 2.8]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.5, 0.7, 1.2], [1.0, 1.5, 2.0], [1.5, 2.1, 2.8]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Orthonormalize matrix [[1.2, 2.4, 3.6], [4.8, 6.0, 7.2], [8.4, 9.6, 10.8]] using Gram-Schmidt.",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.2, 2.4, 3.6], [4.8, 6.0, 7.2], [8.4, 9.6, 10.8]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt process on the matrix [[1.01, 0.99], [0.98, 1.02]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[1.01, 0.99], [0.98, 1.02]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization for matrix [[2.45, 3.6], [1.5, 0.75]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[2.45, 3.6], [1.5, 0.75]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply Gram-Schmidt to the matrix [[0.33, 0.66], [0.99, 1.32]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[0.33, 0.66], [0.99, 1.32]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Find orthonormal basis for [[3.5, 1.5], [2.0, 2.5]] using Gram-Schmidt.",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[3.5, 1.5], [2.0, 2.5]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [[4.4, 2.2], [1.1, 3.3]].",
    "output": "import numpy as np\nfrom numpy.linalg import norm\nA = np.array([[4.4, 2.2], [1.1, 3.3]]).T\nQ = []\nfor a in A.T:\n    u = a.copy()\n    for q in Q:\n        u -= np.dot(q, a) * q\n    q = u / norm(u)\n    Q.append(q)\nQ = np.array(Q).T\nprint('Orthonormal basis:', Q)"
  },
  {
    "input": "Apply the Gram-Schmidt process to the vectors [1.2, 2.4, 3.6] and [0.5, 1.1, 1.7].",
    "output": "import numpy as np\nv1 = np.array([1.2, 2.4, 3.6])\nv2 = np.array([0.5, 1.1, 1.7])\nu1 = v1\nproj = np.dot(v2, u1) / np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Perform Gram-Schmidt orthogonalization on [3.3, 0.8] and [1.1, 4.4].",
    "output": "import numpy as np\nv1 = np.array([3.3, 0.8])\nv2 = np.array([1.1, 4.4])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Use the Gram-Schmidt process for vectors [2.1, 1.5, 0.3] and [4.0, 3.3, 1.1].",
    "output": "import numpy as np\nv1 = np.array([2.1, 1.5, 0.3])\nv2 = np.array([4.0, 3.3, 1.1])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Orthogonalize vectors [1.7, 2.5] and [3.2, 0.6] using the Gram-Schmidt process.",
    "output": "import numpy as np\nv1 = np.array([1.7, 2.5])\nv2 = np.array([3.2, 0.6])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Find orthonormal basis for vectors [0.2, 0.8, 1.6] and [2.3, 1.1, 0.9].",
    "output": "import numpy as np\nv1 = np.array([0.2, 0.8, 1.6])\nv2 = np.array([2.3, 1.1, 0.9])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint('Orthonormal basis:', u1, u2)"
  },
  {
    "input": "Apply Gram-Schmidt process to matrix [[1.1, 2.3], [3.4, 4.5], [5.6, 6.7]].",
    "output": "import numpy as np\nA = np.array([[1.1, 2.3], [3.4, 4.5], [5.6, 6.7]])\nQ, R = np.linalg.qr(A)\nprint('Orthogonal matrix Q:', Q)"
  },
  {
    "input": "Use Gram-Schmidt on [0.4, 1.5, 2.9] and [3.3, 4.2, 5.1].",
    "output": "import numpy as np\nv1 = np.array([0.4, 1.5, 2.9])\nv2 = np.array([3.3, 4.2, 5.1])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Find orthonormal vectors for [2.2, 0.7] and [1.5, 3.6] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([2.2, 0.7])\nv2 = np.array([1.5, 3.6])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint('Orthonormal basis:', u1, u2)"
  },
  {
    "input": "Orthogonalize [1.6, 0.9, 3.3] and [0.5, 2.2, 4.4] using Gram-Schmidt.",
    "output": "import numpy as np\nv1 = np.array([1.6, 0.9, 3.3])\nv2 = np.array([0.5, 2.2, 4.4])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Perform Gram-Schmidt orthonormalization on [0.6, 1.2] and [1.7, 3.8].",
    "output": "import numpy as np\nv1 = np.array([0.6, 1.2])\nv2 = np.array([1.7, 3.8])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint('Orthonormal basis:', u1, u2)"
  },
  {
    "input": "Apply Gram-Schmidt to [4.2, 2.1, 1.0] and [1.1, 0.5, 3.3].",
    "output": "import numpy as np\nv1 = np.array([4.2, 2.1, 1.0])\nv2 = np.array([1.1, 0.5, 3.3])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Orthonormalize vectors [0.9, 1.4] and [2.3, 0.6].",
    "output": "import numpy as np\nv1 = np.array([0.9, 1.4])\nv2 = np.array([2.3, 0.6])\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint('Orthonormal basis:', u1, u2)"
  },
  {
    "input": "Apply Gram-Schmidt to [3.1, 1.5, 2.2] and [2.0, 0.7, 4.1].",
    "output": "import numpy as np\nv1 = np.array([3.1, 1.5, 2.2])\nv2 = np.array([2.0, 0.7, 4.1])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Use Gram-Schmidt on matrix [[0.5, 1.2], [1.1, 2.3], [3.3, 0.9]].",
    "output": "import numpy as np\nA = np.array([[0.5, 1.2], [1.1, 2.3], [3.3, 0.9]])\nQ, R = np.linalg.qr(A)\nprint('Orthogonal matrix Q:', Q)"
  },
  {
    "input": "Perform Gram-Schmidt orthogonalization on [1.3, 1.8, 2.1] and [3.4, 0.9, 1.1].",
    "output": "import numpy as np\nv1 = np.array([1.3, 1.8, 2.1])\nv2 = np.array([3.4, 0.9, 1.1])\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1)*u1\nu2 = v2 - proj\nprint('Orthogonal vectors:', u1, u2)"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [1, 0], [1, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 0], dtype=float)\nv2 = np.array([1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find an orthonormal basis for [2, 2], [1, -1].",
    "output": "import numpy as np\nv1 = np.array([2, 2], dtype=float)\nv2 = np.array([1, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [1, 2, 3], [4, 5, 6], [7, 8, 10].",
    "output": "import numpy as np\nv = [np.array([1, 2, 3], dtype=float), np.array([4, 5, 6], dtype=float), np.array([7, 8, 10], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Apply Gram-Schmidt to [2, 0], [0, 2].",
    "output": "import numpy as np\nv1 = np.array([2, 0], dtype=float)\nv2 = np.array([0, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt on [3, 1], [1, 3].",
    "output": "import numpy as np\nv1 = np.array([3, 1], dtype=float)\nv2 = np.array([1, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [1, 1, 0], [1, 0, 1], [0, 1, 1] using Gram-Schmidt.",
    "output": "import numpy as np\nv = [np.array([1, 1, 0], dtype=float), np.array([1, 0, 1], dtype=float), np.array([0, 1, 1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Find orthogonal basis for [1, 2, 1], [2, 1, -1].",
    "output": "import numpy as np\nv1 = np.array([1, 2, 1], dtype=float)\nv2 = np.array([2, 1, -1], dtype=float)\nu1 = v1\nproj = np.dot(v2, u1)/np.dot(u1, u1) * u1\nu2 = v2 - proj\nprint(f'Orthogonal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [1, 1, 1], [1, 2, 3].",
    "output": "import numpy as np\nv1 = np.array([1, 1, 1], dtype=float)\nv2 = np.array([1, 2, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [1, 2], [2, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 2], dtype=float)\nv2 = np.array([2, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal set for [0, 1, 0], [1, 0, 1].",
    "output": "import numpy as np\nv1 = np.array([0, 1, 0], dtype=float)\nv2 = np.array([1, 0, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1)*u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [2, 1, 3], [1, 0, 1].",
    "output": "import numpy as np\nv1 = np.array([2, 1, 3], dtype=float)\nv2 = np.array([1, 0, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find an orthonormal basis for [1, 1, 0], [0, 1, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 1, 0], dtype=float)\nv2 = np.array([0, 1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [3, 0, 1], [2, 1, 0], [1, 1, 1].",
    "output": "import numpy as np\nv = [np.array([3, 0, 1], dtype=float), np.array([2, 1, 0], dtype=float), np.array([1, 1, 1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Orthonormalize [1, 0, 1], [0, 1, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 0, 1], dtype=float)\nv2 = np.array([0, 1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [2, 1], [3, 4].",
    "output": "import numpy as np\nv1 = np.array([2, 1], dtype=float)\nv2 = np.array([3, 4], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal vectors from [2, 2, 1], [1, -1, 0].",
    "output": "import numpy as np\nv1 = np.array([2, 2, 1], dtype=float)\nv2 = np.array([1, -1, 0], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt on [1, 1, 1], [1, -1, 0], [0, 1, -1].",
    "output": "import numpy as np\nv = [np.array([1, 1, 1], dtype=float), np.array([1, -1, 0], dtype=float), np.array([0, 1, -1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Find orthonormal basis using Gram-Schmidt for [1, 2, 2], [2, 1, -1].",
    "output": "import numpy as np\nv1 = np.array([1, 2, 2], dtype=float)\nv2 = np.array([2, 1, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [1, 0], [2, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 0], dtype=float)\nv2 = np.array([2, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [2, 1, 0], [0, 1, 2].",
    "output": "import numpy as np\nv1 = np.array([2, 1, 0], dtype=float)\nv2 = np.array([0, 1, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt on [1, 3], [3, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 3], dtype=float)\nv2 = np.array([3, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [4, 0, 0], [1, 1, 0], [0, 1, 1].",
    "output": "import numpy as np\nv = [np.array([4, 0, 0], dtype=float), np.array([1, 1, 0], dtype=float), np.array([0, 1, 1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Find orthonormal set for [1, 0, 0], [0, 2, 0], [0, 0, 3].",
    "output": "import numpy as np\nv = [np.array([1, 0, 0], dtype=float), np.array([0, 2, 0], dtype=float), np.array([0, 0, 3], dtype=float)]\nu = [v[i]/np.linalg.norm(v[i]) for i in range(3)]\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [1, -1, 0], [1, 1, 1].",
    "output": "import numpy as np\nv1 = np.array([1, -1, 0], dtype=float)\nv2 = np.array([1, 1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal basis for [0, 1, 0], [1, 1, 1].",
    "output": "import numpy as np\nv1 = np.array([0, 1, 0], dtype=float)\nv2 = np.array([1, 1, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to orthonormalize [1, 2, 2], [2, 4, 4].",
    "output": "import numpy as np\nv1 = np.array([1, 2, 2], dtype=float)\nv2 = np.array([2, 4, 4], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nif np.linalg.norm(u2) != 0:\n    u2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt on [3, 1, 2], [1, 0, 1], [1, 2, 0].",
    "output": "import numpy as np\nv = [np.array([3, 1, 2], dtype=float), np.array([1, 0, 1], dtype=float), np.array([1, 2, 0], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, vec in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {vec}')"
  },
  {
    "input": "Find orthonormal set for [2, 1], [1, 3].",
    "output": "import numpy as np\nv1 = np.array([2, 1], dtype=float)\nv2 = np.array([1, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal set: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [4, 1, 3], [2, 1, 0].",
    "output": "import numpy as np\nv1 = np.array([4, 1, 3], dtype=float)\nv2 = np.array([2, 1, 0], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [0, 3, 4], [1, 2, 3].",
    "output": "import numpy as np\nv1 = np.array([0, 3, 4], dtype=float)\nv2 = np.array([1, 2, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt on [2, 0, 1], [1, 1, 0], [0, 1, 1].",
    "output": "import numpy as np\nv = [np.array([2, 0, 1], dtype=float), np.array([1, 1, 0], dtype=float), np.array([0, 1, 1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Find an orthonormal basis from [3, 3, 1], [1, 2, 3].",
    "output": "import numpy as np\nv1 = np.array([3, 3, 1], dtype=float)\nv2 = np.array([1, 2, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize the set [1, 1], [1, -1].",
    "output": "import numpy as np\nv1 = np.array([1, 1], dtype=float)\nv2 = np.array([1, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [0, 0, 1], [0, 1, 0], [1, 0, 0].",
    "output": "import numpy as np\nv = [np.array([0, 0, 1], dtype=float), np.array([0, 1, 0], dtype=float), np.array([1, 0, 0], dtype=float)]\nu = [v[i]/np.linalg.norm(v[i]) for i in range(3)]\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Use Gram-Schmidt for [1, 2], [2, -1].",
    "output": "import numpy as np\nv1 = np.array([1, 2], dtype=float)\nv2 = np.array([2, -1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [2, 2], [2, -2].",
    "output": "import numpy as np\nv1 = np.array([2, 2], dtype=float)\nv2 = np.array([2, -2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nif np.linalg.norm(u2) != 0:\n    u2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal set: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt to [4, 0, 0], [0, 3, 0], [0, 0, 2].",
    "output": "import numpy as np\nv = [np.array([4, 0, 0], dtype=float), np.array([0, 3, 0], dtype=float), np.array([0, 0, 2], dtype=float)]\nu = [v[i]/np.linalg.norm(v[i]) for i in range(3)]\nfor i, ui in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {ui}')"
  },
  {
    "input": "Use Gram-Schmidt on [2, 3], [5, 7].",
    "output": "import numpy as np\nv1 = np.array([2, 3], dtype=float)\nv2 = np.array([5, 7], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Find orthonormal basis for [1, 2, 3], [4, 5, 6].",
    "output": "import numpy as np\nv1 = np.array([1, 2, 3], dtype=float)\nv2 = np.array([4, 5, 6], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [2, 1, 1], [1, 2, 2].",
    "output": "import numpy as np\nv1 = np.array([2, 1, 1], dtype=float)\nv2 = np.array([1, 2, 2], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal set: {u1}, {u2}')"
  },
  {
    "input": "Orthonormalize [3, 2], [2, 3].",
    "output": "import numpy as np\nv1 = np.array([3, 2], dtype=float)\nv2 = np.array([2, 3], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal basis: {u1}, {u2}')"
  },
  {
    "input": "Apply Gram-Schmidt on [5, 0], [0, 12].",
    "output": "import numpy as np\nv1 = np.array([5, 0], dtype=float)\nv2 = np.array([0, 12], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nu2 = v2 / np.linalg.norm(v2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Use Gram-Schmidt to find orthonormal vectors from [1, 4, 5], [2, 0, 1].",
    "output": "import numpy as np\nv1 = np.array([1, 4, 5], dtype=float)\nv2 = np.array([2, 0, 1], dtype=float)\nu1 = v1 / np.linalg.norm(v1)\nproj = np.dot(v2, u1) * u1\nu2 = v2 - proj\nu2 = u2 / np.linalg.norm(u2)\nprint(f'Orthonormal vectors: {u1}, {u2}')"
  },
  {
    "input": "Perform Gram-Schmidt on [2, 2, 2], [1, 0, 0], [0, 1, 1].",
    "output": "import numpy as np\nv = [np.array([2, 2, 2], dtype=float), np.array([1, 0, 0], dtype=float), np.array([0, 1, 1], dtype=float)]\nu = []\nfor i in range(3):\n    ui = v[i].copy()\n    for j in range(i):\n        ui -= np.dot(v[i], u[j]) / np.dot(u[j], u[j]) * u[j]\n    u.append(ui / np.linalg.norm(ui))\nfor i, vec in enumerate(u):\n    print(f'Orthonormal vector u{i+1}: {vec}')"
  },
  {
    "input": "Find the QR decomposition of the matrix [[1, 2], [3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2, 1], [1, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1], [1, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of the matrix [[4, 3], [6, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 3], [6, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[1, 0], [0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Determine the QR decomposition of [[1, 1], [1, -1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1], [1, -1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "What is the QR decomposition of [[3, 1], [2, 2]]?",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1], [2, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for matrix [[2, 2], [2, -2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 2], [2, -2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of matrix [[5, 2], [2, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 2], [2, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[0, 1], [1, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [1, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for [[6, 8], [3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 8], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[9, 8, 7], [6, 5, 4], [3, 2, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition for [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of the matrix [[2, 3, 4], [1, 0, 1], [3, 2, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 4], [1, 0, 1], [3, 2, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Determine QR decomposition of [[4, 1, 3], [2, 6, 8], [1, 1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 1, 3], [2, 6, 8], [1, 1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[7, 5, 3], [2, 1, 6], [8, 4, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 5, 3], [2, 1, 6], [8, 4, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 2, 1], [3, 4, 1], [5, 6, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 1], [3, 4, 1], [5, 6, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[5, 3], [1, 7], [4, 2]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 3], [1, 7], [4, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[1, 4], [2, 5], [3, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 4], [2, 5], [3, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of matrix [[6, 5], [3, 2], [0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 5], [3, 2], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[7, 8], [9, 10], [11, 12]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 8], [9, 10], [11, 12]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[3, 1, 4], [1, 5, 9], [2, 6, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[2, 7], [1, 8], [2, 8]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 7], [1, 8], [2, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[0, 2, 4], [1, 3, 5], [2, 4, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 2, 4], [1, 3, 5], [2, 4, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[3, 4], [4, -3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 4], [4, -3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[0, 1], [2, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [2, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of the matrix [[8, 6], [6, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 6], [6, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[5, 0], [0, 12]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 0], [0, 12]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Determine the QR decomposition of [[6, 0], [8, 15]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 0], [8, 15]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "What is the QR decomposition of [[1, 1, 1], [1, 2, 3], [1, 3, 6]]?",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1, 1], [1, 2, 3], [1, 3, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for matrix [[2, 4], [1, 3], [0, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 4], [1, 3], [0, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of matrix [[9, 6], [6, 9], [3, 12]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 6], [6, 9], [3, 12]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[7, 2], [4, 6], [1, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 2], [4, 6], [1, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for [[2, 0], [2, 2], [2, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 0], [2, 2], [2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[1, 1], [2, 2], [3, 3]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1], [2, 2], [3, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[10, 2], [5, 1], [0, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[10, 2], [5, 1], [0, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose the matrix [[2, 3], [5, 7], [1, 1]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3], [5, 7], [1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[2, 3, 1], [4, 6, 2], [0, 0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 1], [4, 6, 2], [0, 0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[4, 0, 0], [3, 3, 0], [2, 2, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 0, 0], [3, 3, 0], [2, 2, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 2, 4], [2, 3, 5], [3, 4, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 4], [2, 3, 5], [3, 4, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of matrix [[6, 5, 4], [3, 2, 1], [0, -1, -2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 5, 4], [3, 2, 1], [0, -1, -2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[8, 1, 6], [3, 5, 7], [4, 9, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 1, 6], [3, 5, 7], [4, 9, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[2, 4, 6], [1, 3, 5], [0, 2, 4]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 4, 6], [1, 3, 5], [0, 2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[5, 4, 3], [2, 1, 0], [-1, -2, -3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 4, 3], [2, 1, 0], [-1, -2, -3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[3, 1, 0], [0, 4, 2], [0, 0, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1, 0], [0, 4, 2], [0, 0, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[1, 3], [0, 4], [5, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3], [0, 4], [5, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[9, 0], [4, 1], [6, 2]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 0], [4, 1], [6, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[5, 5], [5, -5], [10, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 5], [5, -5], [10, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[2, 3, 4], [0, 1, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 4], [0, 1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[1, 0], [1, 1], [1, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0], [1, 1], [1, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2, 1], [1, 2], [0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1], [1, 2], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of matrix [[4, 3], [2, 1], [1, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 3], [2, 1], [1, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[0, 1], [1, 0], [1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [1, 0], [1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Determine QR decomposition for matrix [[3, 2, 1], [1, 0, 1], [4, 1, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 2, 1], [1, 0, 1], [4, 1, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1, 2, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[2, 3, 5], [4, 6, 10]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 5], [4, 6, 10]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[7, 0, 5], [0, 7, 1], [5, 1, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 0, 5], [0, 7, 1], [5, 1, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[5, 5, 5], [1, 1, 1], [3, 3, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 5, 5], [1, 1, 1], [3, 3, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[3, 4], [0, 5], [8, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 4], [0, 5], [8, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of matrix [[2, 0, 1], [1, 1, 1], [3, 5, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 0, 1], [1, 1, 1], [3, 5, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[9, 8, 7], [6, 5, 4], [3, 2, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[10, 0, 0], [0, 10, 0], [0, 0, 10]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[10, 0, 0], [0, 10, 0], [0, 0, 10]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1, 4], [2, 5], [3, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 4], [2, 5], [3, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of matrix [[0, 0, 1], [0, 1, 0], [1, 0, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[6, 1, 0], [1, 6, 1], [0, 1, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 1, 0], [1, 6, 1], [0, 1, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3, 2, 1], [6, 5, 4], [9, 8, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 2, 1], [6, 5, 4], [9, 8, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of matrix [[4, 3, 2], [1, 6, 5], [7, 8, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 3, 2], [1, 6, 5], [7, 8, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[1, 3], [2, 6], [3, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3], [2, 6], [3, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of matrix [[3, 0, 4], [0, 5, 0], [4, 0, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 0, 4], [0, 5, 0], [4, 0, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[2, 3, 1], [6, 9, 3], [1, 1, 1]] using QR.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 1], [6, 9, 3], [1, 1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 2], [2, 4], [3, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [2, 4], [3, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of matrix [[4, 1, 2], [2, 3, 0], [6, 5, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 1, 2], [2, 3, 0], [6, 5, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[2, 1, 3], [1, 1, 1], [0, 1, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1, 3], [1, 1, 1], [0, 1, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2, 2], [1, 3], [0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 2], [1, 3], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[4, 0], [3, 1], [2, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 0], [3, 1], [2, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of [[0, 1], [2, 2], [4, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [2, 2], [4, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 2, 3], [0, 1, 4], [5, 6, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[3, 0, 1], [1, 2, 3], [2, 1, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 0, 1], [1, 2, 3], [2, 1, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[4, 2], [3, 5], [1, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 2], [3, 5], [1, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[1, 0, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[2, 3], [2, 3], [2, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3], [2, 3], [2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[7, 1], [2, 5], [3, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 1], [2, 5], [3, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[3, 2], [1, 4], [6, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 2], [1, 4], [6, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[5, 1], [6, 2], [7, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 1], [6, 2], [7, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 4, 7], [2, 5, 8], [3, 6, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of [[3, 0, 1], [2, 4, 0], [1, 2, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 0, 1], [2, 4, 0], [1, 2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[6, 2], [3, 5], [0, 1]] using QR.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 2], [3, 5], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[2, 5, 8], [1, 3, 6], [0, 2, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 5, 8], [1, 3, 6], [0, 2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[0, 2, 1], [1, 0, 3], [2, 1, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 2, 1], [1, 0, 3], [2, 1, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[1, 2, 3], [4, 5, 6], [7, 8, 10]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2, 0], [2, 2], [1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 0], [2, 2], [1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[0, 1, 2], [2, 4, 6], [3, 6, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1, 2], [2, 4, 6], [3, 6, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[3, 5], [2, 4], [1, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 5], [2, 4], [1, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[5, 0], [4, 1], [3, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 0], [4, 1], [3, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[2, 1], [1, 2], [0, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1], [1, 2], [0, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[4, 4], [2, 2], [1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 4], [2, 2], [1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[1, 3, 5], [2, 4, 6], [0, 1, 2]] using QR.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3, 5], [2, 4, 6], [0, 1, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of matrix [[2, 4], [0, 3], [1, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 4], [0, 3], [1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[6, 1], [3, 5], [2, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 1], [3, 5], [2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[5, 5], [1, 2], [3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 5], [1, 2], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[1, 0], [2, 2], [3, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0], [2, 2], [3, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[4, 1], [1, 3], [5, 2]] using QR method.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 1], [1, 3], [5, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[1, 2, 3], [4, 5, 6], [7, 9, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 9, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[3, 1], [2, 6], [1, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1], [2, 6], [1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[4, 0, 1], [2, 1, 3], [0, 3, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 0, 1], [2, 1, 3], [0, 3, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3, 4, 5], [6, 7, 8], [9, 0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 4, 5], [6, 7, 8], [9, 0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of [[0, 2], [1, 4], [2, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 2], [1, 4], [2, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[5, 1], [6, 0], [7, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 1], [6, 0], [7, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[1, 1, 1], [2, 3, 4], [3, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1, 1], [2, 3, 4], [3, 5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[2, 3], [5, 1], [4, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3], [5, 1], [4, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[0, 1], [1, 0], [1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [1, 0], [1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[7, 8], [2, 3], [1, 4]] using QR.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 8], [2, 3], [1, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[3, 2, 1], [6, 5, 4], [9, 8, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 2, 1], [6, 5, 4], [9, 8, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[4, 6], [5, 3], [7, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 6], [5, 3], [7, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of matrix [[8, 3], [6, 4], [5, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 3], [6, 4], [5, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[2, 5], [1, 3], [3, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 5], [1, 3], [3, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[9, 2], [7, 4], [3, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 2], [7, 4], [3, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of [[1, 2], [3, 4], [4, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [3, 4], [4, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[1, 3, 2], [4, 1, 5], [6, 2, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3, 2], [4, 1, 5], [6, 2, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1, 4], [0, 2], [5, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 4], [0, 2], [5, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[2, 2], [4, 1], [1, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 2], [4, 1], [1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[1, 3], [2, 5], [4, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3], [2, 5], [4, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[2, 4, 6], [1, 3, 5], [0, 2, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 4, 6], [1, 3, 5], [0, 2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[4, 3], [2, 1], [6, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 3], [2, 1], [6, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of matrix [[7, 2], [4, 3], [5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 2], [4, 3], [5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[9, 1], [3, 7], [2, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 1], [3, 7], [2, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[3, 6], [5, 2], [7, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 6], [5, 2], [7, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[1, 0, 2], [0, 1, 3], [4, 5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0, 2], [0, 1, 3], [4, 5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of [[2, 0], [1, 2], [3, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 0], [1, 2], [3, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[6, 1], [3, 2], [1, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 1], [3, 2], [1, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[8, 3, 1], [2, 6, 4], [0, 5, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 3, 1], [2, 6, 4], [0, 5, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[5, 5], [3, 1], [0, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 5], [3, 1], [0, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[0, 6], [7, 2], [4, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 6], [7, 2], [4, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[1, 1, 1], [2, 4, 2], [3, 6, 3]] using QR.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1, 1], [2, 4, 2], [3, 6, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[3, 1], [0, 2], [4, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1], [0, 2], [4, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[2, 3, 1], [4, 5, 0], [6, 7, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 1], [4, 5, 0], [6, 7, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[1, 2], [3, 0], [5, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [3, 0], [5, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[1, 3, 5], [2, 4, 6], [0, 1, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3, 5], [2, 4, 6], [0, 1, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[7, 8], [2, 1], [3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 8], [2, 1], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[2, 1, 0], [4, 3, 5], [6, 7, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1, 0], [4, 3, 5], [6, 7, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of [[3, 0], [0, 4], [5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 0], [0, 4], [5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[1, 1], [2, 3], [3, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 1], [2, 3], [3, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[4, 2], [3, 1], [7, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 2], [3, 1], [7, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1, 0, 1], [2, 1, 2], [3, 2, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 0, 1], [2, 1, 2], [3, 2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[5, 4], [0, 3], [6, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 4], [0, 3], [6, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[3, 1], [6, 5], [2, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1], [6, 5], [2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2, 3, 1], [1, 0, 4], [5, 2, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3, 1], [1, 0, 4], [5, 2, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[4, 5], [2, 1], [6, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 5], [2, 1], [6, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1, 3], [4, 2], [7, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 3], [4, 2], [7, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of [[0, 1, 2], [3, 4, 5], [6, 7, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[2, 1], [3, 2], [4, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1], [3, 2], [4, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of matrix [[9, 8], [4, 3], [7, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 8], [4, 3], [7, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of [[2, 4, 1], [0, 5, 3], [1, 2, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 4, 1], [0, 5, 3], [1, 2, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3, 5], [1, 2], [6, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 5], [1, 2], [6, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of matrix [[5, 0, 1], [2, 3, 4], [6, 7, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 0, 1], [2, 3, 4], [6, 7, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[4, 2], [0, 3], [5, 6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 2], [0, 3], [5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1, 5, 3], [2, 6, 4], [3, 7, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 5, 3], [2, 6, 4], [3, 7, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of [[8, 2], [1, 3], [5, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 2], [1, 3], [5, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3, 6], [2, 5], [7, 8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 6], [2, 5], [7, 8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[1, 4, 7], [2, 5, 8], [3, 6, 9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 4, 7], [2, 5, 8], [3, 6, 9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[4, 0], [3, 2], [1, 5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 0], [3, 2], [1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[5, 1, 0], [6, 2, 1], [7, 3, 2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 1, 0], [6, 2, 1], [7, 3, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[2, 3], [4, 5], [0, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3], [4, 5], [0, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[7, 8], [5, 2], [3, 1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 8], [5, 2], [3, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[0, 1], [1, 2], [2, 3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0, 1], [1, 2], [2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of matrix [[6, 5, 4], [3, 2, 1], [9, 8, 7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 5, 4], [3, 2, 1], [9, 8, 7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[1, 2], [2, 3], [3, 4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [2, 3], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3, 1, 2], [4, 2, 1], [5, 3, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 1, 2], [4, 2, 1], [5, 3, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[8, 4], [2, 1], [3, 0]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 4], [2, 1], [3, 0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[6.12, 3.94, 2.25], [0.78, 4.34, 0.14], [7.17, 5.1, 4.4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.12, 3.94, 2.25], [0.78, 4.34, 0.14], [7.17, 5.1, 4.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[7.46, 2.0, 6.7], [6.49, 5.83, 0.2], [0.26, 1.08, 4.69]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.46, 2.0, 6.7], [6.49, 5.83, 0.2], [0.26, 1.08, 4.69]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[4.47, 6.76, 5.27], [7.36, 2.7, 5.28], [0.59, 2.38, 3.34]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.47, 6.76, 5.27], [7.36, 2.7, 5.28], [0.59, 2.38, 3.34]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[1.56, 4.82, 6.19], [3.91, 2.85, 5.6], [4.8, 7.1, 1.09]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.56, 4.82, 6.19], [3.91, 2.85, 5.6], [4.8, 7.1, 1.09]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[5.99, 1.72, 4.46], [4.89, 2.33, 7.91], [1.77, 3.8, 5.62]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.99, 1.72, 4.46], [4.89, 2.33, 7.91], [1.77, 3.8, 5.62]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[6.42, 4.78, 2.56], [3.96, 1.19, 5.37], [7.81, 6.92, 0.64]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.42, 4.78, 2.56], [3.96, 1.19, 5.37], [7.81, 6.92, 0.64]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2.13, 5.42, 3.31], [4.78, 6.23, 0.58], [1.9, 2.95, 4.26]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.13, 5.42, 3.31], [4.78, 6.23, 0.58], [1.9, 2.95, 4.26]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[7.67, 2.15, 6.78], [4.36, 5.27, 1.46], [3.88, 4.44, 2.96]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.67, 2.15, 6.78], [4.36, 5.27, 1.46], [3.88, 4.44, 2.96]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[1.35, 3.9, 6.04], [2.64, 4.73, 0.72], [6.88, 2.95, 1.81]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.35, 3.9, 6.04], [2.64, 4.73, 0.72], [6.88, 2.95, 1.81]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[4.9, 1.26, 7.13], [5.85, 6.77, 3.25], [0.38, 2.49, 1.62]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.9, 1.26, 7.13], [5.85, 6.77, 3.25], [0.38, 2.49, 1.62]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[6.22, 2.53, 4.75], [0.83, 3.67, 5.04], [5.91, 6.13, 0.79]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.22, 2.53, 4.75], [0.83, 3.67, 5.04], [5.91, 6.13, 0.79]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2.18, 6.31, 3.94], [5.27, 3.07, 2.16], [7.74, 0.98, 4.88]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.18, 6.31, 3.94], [5.27, 3.07, 2.16], [7.74, 0.98, 4.88]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[5.33, 4.19, 6.42], [1.97, 3.85, 0.64], [2.91, 5.17, 7.53]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.33, 4.19, 6.42], [1.97, 3.85, 0.64], [2.91, 5.17, 7.53]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[6.11, 2.88, 5.93], [7.28, 4.91, 1.3], [0.55, 3.67, 2.48]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.11, 2.88, 5.93], [7.28, 4.91, 1.3], [0.55, 3.67, 2.48]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[1.89, 7.04, 3.27], [2.46, 5.62, 4.15], [3.61, 0.98, 6.79]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.89, 7.04, 3.27], [2.46, 5.62, 4.15], [3.61, 0.98, 6.79]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[0.96, 3.48, 6.79], [4.55, 1.89, 7.25], [2.73, 6.01, 0.77]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.96, 3.48, 6.79], [4.55, 1.89, 7.25], [2.73, 6.01, 0.77]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[7.85, 2.14, 5.66], [3.32, 4.58, 1.12], [6.47, 3.79, 2.83]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.85, 2.14, 5.66], [3.32, 4.58, 1.12], [6.47, 3.79, 2.83]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[1.24, 5.91, 2.47], [6.81, 3.03, 4.62], [3.89, 0.78, 7.18]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.24, 5.91, 2.47], [6.81, 3.03, 4.62], [3.89, 0.78, 7.18]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[4.26, 6.38, 0.94], [2.67, 1.88, 5.27], [5.9, 3.61, 4.05]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.26, 6.38, 0.94], [2.67, 1.88, 5.27], [5.9, 3.61, 4.05]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[3.74, 1.82, 6.54], [4.97, 7.09, 0.68], [2.45, 5.16, 3.27]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.74, 1.82, 6.54], [4.97, 7.09, 0.68], [2.45, 5.16, 3.27]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2.34, 4.25, 5.91], [6.13, 0.67, 3.86], [1.29, 7.42, 2.78]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.34, 4.25, 5.91], [6.13, 0.67, 3.86], [1.29, 7.42, 2.78]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[5.48, 3.3, 1.76], [2.53, 6.86, 4.18], [7.07, 0.94, 5.92]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.48, 3.3, 1.76], [2.53, 6.86, 4.18], [7.07, 0.94, 5.92]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[3.05, 6.14, 2.97], [5.74, 1.26, 4.87], [0.93, 3.78, 7.61]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.05, 6.14, 2.97], [5.74, 1.26, 4.87], [0.93, 3.78, 7.61]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[2.64, 7.53, 1.48], [3.25, 4.61, 5.98], [6.87, 2.49, 3.65]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.64, 7.53, 1.48], [3.25, 4.61, 5.98], [6.87, 2.49, 3.65]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[6.03, 1.18, 3.79], [5.45, 4.62, 2.34], [0.67, 6.95, 7.22]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.03, 1.18, 3.79], [5.45, 4.62, 2.34], [0.67, 6.95, 7.22]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[4.21, 3.17, 6.88], [0.88, 5.69, 2.31], [6.49, 1.85, 7.67]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.21, 3.17, 6.88], [0.88, 5.69, 2.31], [6.49, 1.85, 7.67]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[7.55, 2.62, 4.41], [1.38, 3.53, 6.11], [5.6, 0.84, 3.96]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.55, 2.62, 4.41], [1.38, 3.53, 6.11], [5.6, 0.84, 3.96]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[1.5, 2.3], [3.1, 4.7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.5, 2.3], [3.1, 4.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose the matrix [[0.9, 1.4, 2.1], [3.2, 0.5, 1.3]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.9, 1.4, 2.1], [3.2, 0.5, 1.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Calculate the QR decomposition of [[2.4, 0.6], [1.8, 3.3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.4, 0.6], [1.8, 3.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[3.5, 1.1], [2.2, 4.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.5, 1.1], [2.2, 4.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of the matrix [[1.2, 0.7, 2.6], [3.5, 4.2, 1.9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.2, 0.7, 2.6], [3.5, 4.2, 1.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for [[2.1, 1.1], [1.3, 3.7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.1, 1.1], [1.3, 3.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[4.5, 2.1], [0.3, 1.7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.5, 2.1], [0.3, 1.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of [[1.6, 0.9], [2.2, 4.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.6, 0.9], [2.2, 4.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of the matrix [[3.1, 2.7], [0.4, 1.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.1, 2.7], [0.4, 1.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for matrix [[2.9, 0.8, 3.3], [1.1, 2.6, 0.4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.9, 0.8, 3.3], [1.1, 2.6, 0.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[0.6, 3.4], [2.5, 1.9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.6, 3.4], [2.5, 1.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1.3, 2.1, 0.5], [3.6, 4.1, 1.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.3, 2.1, 0.5], [3.6, 4.1, 1.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR decomposition on matrix [[4.2, 0.9], [3.3, 1.5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.2, 0.9], [3.3, 1.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[1.5, 3.2], [2.8, 0.4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.5, 3.2], [2.8, 0.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[0.2, 1.1, 2.9], [3.4, 0.7, 1.2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.2, 1.1, 2.9], [3.4, 0.7, 1.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[2.6, 1.3], [4.0, 2.5]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.6, 1.3], [4.0, 2.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[1.8, 2.2], [3.9, 0.6]] using QR method.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.8, 2.2], [3.9, 0.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[0.4, 1.9, 2.5], [3.7, 2.6, 1.1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.4, 1.9, 2.5], [3.7, 2.6, 1.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2.2, 3.6], [1.0, 4.4]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.2, 3.6], [1.0, 4.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for matrix [[3.0, 1.5], [2.1, 0.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.0, 1.5], [2.1, 0.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of matrix [[4.1, 2.3], [0.8, 1.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.1, 2.3], [0.8, 1.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[0.3, 1.6, 2.8], [3.9, 0.4, 1.7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.3, 1.6, 2.8], [3.9, 0.4, 1.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[1.9, 2.3], [0.5, 3.2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.9, 2.3], [0.5, 3.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[2.0, 3.1], [4.3, 1.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.0, 3.1], [4.3, 1.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[3.2, -4.5], [1.1, 2.6]] and print Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.2, -4.5], [1.1, 2.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[-5.1, 3.3], [2.7, -1.4]] and display Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[-5.1, 3.3], [2.7, -1.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Using QR decomposition, decompose the matrix [[4.5, 7.2], [1.3, -2.1]] and print the result.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.5, 7.2], [1.3, -2.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose the matrix [[6.1, -3.2, 4.4], [2.9, 7.3, -1.1], [1.5, 0.6, 3.2]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.1, -3.2, 4.4], [2.9, 7.3, -1.1], [1.5, 0.6, 3.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find Q and R from the QR decomposition of [[1.2, 2.5], [3.1, 4.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.2, 2.5], [3.1, 4.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the 3x3 matrix [[7.4, -2.1, 3.6], [1.3, 6.2, -4.9], [5.2, -3.8, 1.1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.4, -2.1, 3.6], [1.3, 6.2, -4.9], [5.2, -3.8, 1.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Using QR decomposition, decompose the matrix [[0.5, 2.4], [3.3, 1.1]] and print Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.5, 2.4], [3.3, 1.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[5.5, 6.7], [7.1, 8.2]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.5, 6.7], [7.1, 8.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[-3.2, 4.6], [2.1, -5.5]] using QR decomposition and print Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[-3.2, 4.6], [2.1, -5.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[3.7, -0.8], [1.9, 2.3]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.7, -0.8], [1.9, 2.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[4.5, 5.5, 6.6], [1.1, 2.2, 3.3], [7.7, 8.8, 9.9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.5, 5.5, 6.6], [1.1, 2.2, 3.3], [7.7, 8.8, 9.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR decomposition to decompose [[1.5, 0.5], [0.7, 1.9]] and show Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.5, 0.5], [0.7, 1.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Calculate QR decomposition for matrix [[2.3, -3.4], [1.2, 4.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.3, -3.4], [1.2, 4.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find Q and R by decomposing [[9.1, 1.3], [2.4, 8.7]] using QR decomposition.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9.1, 1.3], [2.4, 8.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[0.2, 3.4], [5.6, -1.1]] and display Q and R.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.2, 3.4], [5.6, -1.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition for [[-1.2, -3.3], [4.5, 6.7]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[-1.2, -3.3], [4.5, 6.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR decomposition to decompose matrix [[1.4, -2.3], [3.6, 5.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.4, -2.3], [3.6, 5.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[-6.2, 0.9], [3.4, -7.8]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[-6.2, 0.9], [3.4, -7.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[1.2, 2.4], [3.5, 4.7]] and print both matrices.",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.2, 2.4], [3.5, 4.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R matrices by decomposing [[0.6, 1.3], [2.8, 3.9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.6, 1.3], [2.8, 3.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition for [[7.2, 5.3], [6.6, 2.1]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.2, 5.3], [6.6, 2.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[3.9, -2.4], [1.8, 5.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.9, -2.4], [1.8, 5.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR decomposition to find Q and R of [[4.4, 1.5], [0.3, 2.9]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.4, 1.5], [0.3, 2.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition of [[2.5, -0.9], [4.1, 6.6]].",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.5, -0.9], [4.1, 6.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on the matrix [[1.2, 2.5], [3.6, 4.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.2, 2.5], [3.6, 4.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of the matrix [[5.1, 2.2], [1.0, 3.3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.1, 2.2], [1.0, 3.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of [[2.4, 3.6], [1.1, 5.9]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.4, 3.6], [1.1, 5.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find Q and R for matrix [[0.9, 4.2], [3.3, 1.7]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.9, 4.2], [3.3, 1.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR decomposition on the matrix [[3.8, 2.6], [6.1, 1.3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.8, 2.6], [6.1, 1.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Do QR decomposition on [[7.4, 2.1], [3.6, 0.4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.4, 2.1], [3.6, 0.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Calculate QR decomposition for [[4.2, 5.5], [2.3, 3.4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.2, 5.5], [2.3, 3.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break down matrix [[6.5, 7.2], [1.3, 0.8]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.5, 7.2], [1.3, 0.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR for [[3.3, 2.2], [4.4, 5.5]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.3, 2.2], [4.4, 5.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[2.6, 4.8], [5.5, 1.2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.6, 4.8], [5.5, 1.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[8.1, 3.3], [4.6, 1.5]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8.1, 3.3], [4.6, 1.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR method to decompose [[9.2, 2.7], [4.1, 6.6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9.2, 2.7], [4.1, 6.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[5.3, 6.6], [2.8, 3.7]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.3, 6.6], [2.8, 3.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[7.7, 4.4], [5.5, 1.1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.7, 4.4], [5.5, 1.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "What is the QR decomposition of [[3.5, 1.6], [2.2, 4.3]]?",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.5, 1.6], [2.2, 4.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[4.5, 2.2], [6.6, 1.4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.5, 2.2], [6.6, 1.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R matrices from QR decomposition of [[1.2, 0.5], [2.3, 3.8]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.2, 0.5], [2.3, 3.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[0.8, 2.2], [5.5, 3.1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.8, 2.2], [5.5, 3.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[6.2, 1.9], [2.4, 0.6]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.2, 1.9], [2.4, 0.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[5.0, 3.3], [7.1, 2.8]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.0, 3.3], [7.1, 2.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break [[3.9, 4.4], [6.6, 7.3]] into Q and R using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.9, 4.4], [6.6, 7.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[2.7, 1.8], [0.9, 4.1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.7, 1.8], [0.9, 4.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R from QR decomposition of [[6.4, 3.2], [4.5, 1.2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.4, 3.2], [4.5, 1.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition for [[3.1, 6.2], [1.1, 2.2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.1, 6.2], [1.1, 2.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Calculate QR decomposition for [[7.2, 1.3], [4.6, 3.9]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.2, 1.3], [4.6, 3.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2.5, 3.2], [4.1, 1.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.5, 3.2], [4.1, 1.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[0.8, 5.4], [3.3, 2.2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.8, 5.4], [3.3, 2.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR method to decompose [[6.6, 1.5], [2.8, 3.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.6, 1.5], [2.8, 3.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Calculate QR decomposition of [[4.4, 2.9], [5.1, 3.3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.4, 2.9], [5.1, 3.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R matrices for [[2.3, 1.1], [6.4, 3.8]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.3, 1.1], [6.4, 3.8]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[7.2, 4.5], [1.8, 0.9]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7.2, 4.5], [1.8, 0.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break matrix [[6.3, 1.2], [5.5, 3.4]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.3, 1.2], [5.5, 3.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of [[1.7, 3.3], [2.9, 6.1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.7, 3.3], [2.9, 6.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition of [[3.6, 2.5], [0.7, 4.9]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.6, 2.5], [0.7, 4.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2.2, 1.6], [3.8, 4.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.2, 1.6], [3.8, 4.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Use QR to break [[5.2, 6.3], [1.1, 0.4]] into Q and R",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.2, 6.3], [1.1, 0.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR decomposition of [[3.4, 2.2], [1.5, 7.1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.4, 2.2], [1.5, 7.1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get the QR decomposition of matrix [[4.6, 1.3], [5.8, 2.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.6, 1.3], [5.8, 2.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on [[6.9, 5.1], [2.0, 1.5]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.9, 5.1], [2.0, 1.5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose matrix [[0.7, 4.4], [6.6, 1.2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.7, 4.4], [6.6, 1.2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break down [[2.8, 6.2], [3.3, 1.6]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.8, 6.2], [3.3, 1.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find Q and R matrices from QR decomposition of [[5.5, 3.8], [0.9, 2.6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5.5, 3.8], [0.9, 2.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[1.3, 0.5], [2.2, 3.3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1.3, 0.5], [2.2, 3.3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR decomposition for [[6.7, 2.1], [3.9, 4.4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6.7, 2.1], [3.9, 4.4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose [[4.1, 5.9], [1.8, 6.0]] using QR method",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.1, 5.9], [1.8, 6.0]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[3.7, 0.9], [7.2, 3.6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3.7, 0.9], [7.2, 3.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Do QR decomposition on matrix [[2.4, 3.5], [5.1, 0.6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2.4, 3.5], [5.1, 0.6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break [[0.8, 1.7], [2.6, 4.9]] into Q and R using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[0.8, 1.7], [2.6, 4.9]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[4.8, 3.2], [1.0, 5.7]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4.8, 3.2], [1.0, 5.7]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR decomposition on matrix [[2, 1], [1, 3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 1], [1, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[4, 2], [3, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 2], [3, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R matrices from [[5, 4], [2, 1]] using QR decomposition",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 4], [2, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the QR decomposition of matrix [[1, 7], [2, 6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 7], [2, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute the QR decomposition of [[3, 5], [2, 4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 5], [2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[6, 1], [2, 3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 1], [2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of [[7, 2], [4, 3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 2], [4, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break matrix [[1, 2], [3, 4]] using QR method",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [3, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Perform QR on matrix [[3, 2], [7, 4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 2], [7, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[8, 5], [1, 3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 5], [1, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Decompose matrix [[2, 6], [5, 3]] using QR",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 6], [5, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR for matrix [[9, 4], [2, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 4], [2, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get Q and R from [[6, 7], [5, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 7], [5, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Break [[4, 8], [1, 6]] into QR form",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 8], [1, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose the matrix [[5, 2], [6, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[5, 2], [6, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR method on matrix [[3, 4], [7, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 4], [7, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Apply QR on matrix [[2, 3], [1, 5]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[2, 3], [1, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR decomposition of [[1, 5], [3, 2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 5], [3, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Compute QR of [[4, 7], [2, 3]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[4, 7], [2, 3]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decompose [[8, 2], [5, 6]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[8, 2], [5, 6]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "QR decomposition of [[3, 6], [4, 2]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[3, 6], [4, 2]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Do QR decomposition on [[7, 5], [2, 4]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[7, 5], [2, 4]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Apply QR method on [[1, 2], [6, 5]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[1, 2], [6, 5]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Get QR matrices from [[9, 3], [7, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[9, 3], [7, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find QR of [[6, 4], [3, 1]]",
    "output": "import numpy as np\nfrom scipy.linalg import qr\nA = np.array([[6, 4], [3, 1]])\nQ, R = qr(A)\nprint(\"Q =\", Q)\nprint(\"R =\", R)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[5, 4, 2], [0, 5, 1], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 4, 2], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[2, 1, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[4, 0, 1], [0, 4, 0], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 0, 1], [0, 4, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[1, 1], [0, 1]].",
    "output": "from sympy import Matrix\nA = Matrix([[1, 1], [0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[1, 2, 0], [0, 1, 2], [0, 0, 1]].",
    "output": "from sympy import Matrix\nA = Matrix([[1, 2, 0], [0, 1, 2], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[0, 1], [-1, 0]].",
    "output": "from sympy import Matrix\nA = Matrix([[0, 1], [-1, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[6, 2, 1], [0, 6, 2], [0, 0, 6]].",
    "output": "from sympy import Matrix\nA = Matrix([[6, 2, 1], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [1, 0, 0]].",
    "output": "from sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [1, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute Jordan form of A = [[4, 1], [0, 4]].",
    "output": "from sympy import Matrix\nA = Matrix([[4, 1], [0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[7, 5, 0], [0, 7, 5], [0, 0, 7]].",
    "output": "from sympy import Matrix\nA = Matrix([[7, 5, 0], [0, 7, 5], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[0, 1], [0, 0]].",
    "output": "from sympy import Matrix\nA = Matrix([[0, 1], [0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[3, 2], [0, 3]].",
    "output": "from sympy import Matrix\nA = Matrix([[3, 2], [0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[2, 0], [0, 2]].",
    "output": "from sympy import Matrix\nA = Matrix([[2, 0], [0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute Jordan Normal Form of A = [[5, 1, 0], [0, 5, 1], [0, 0, 5]].",
    "output": "from sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find Jordan form of A = [[-2, 1], [0, -2]].",
    "output": "from sympy import Matrix\nA = Matrix([[-2, 1], [0, -2]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Jordan Normal Form of A = [[1, 1, 0], [0, 1, 1], [0, 0, 1]].",
    "output": "from sympy import Matrix\nA = Matrix([[1, 1, 0], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Jordan form of A = [[2, 1, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "from sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find Jordan form of A = [[3, 0], [0, 4]].",
    "output": "from sympy import Matrix\nA = Matrix([[3, 0], [0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find Jordan form of A = [[1, 0], [0, 1]].",
    "output": "from sympy import Matrix\nA = Matrix([[1, 0], [0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "from sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Jordan form of A = [[5, 1, 1], [0, 5, 1], [0, 0, 5]].",
    "output": "from sympy import Matrix\nA = Matrix([[5, 1, 1], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[-1, 1], [0, -1]].",
    "output": "from sympy import Matrix\nA = Matrix([[-1, 1], [0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Jordan form of A = [[0, 1], [1, 0]].",
    "output": "from sympy import Matrix\nA = Matrix([[0, 1], [1, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan Normal Form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[2, 3, 1], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 3, 1], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Form of the matrix A = [[4, 2, 0], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 2, 0], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form for A = [[-1, 1, 0], [0, -1, 1], [0, 0, -1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-1, 1, 0], [0, -1, 1], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[3, 1, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 0], [0, 3, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[5, 0, 1], [0, 5, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 0, 1], [0, 5, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[6, 4, 1], [0, 6, 0], [0, 0, 6]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 4, 1], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Evaluate the Jordan Normal Form of matrix A = [[0, 0, 1], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 1], [0, 0, 0], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan form of A = [[2, 0, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for A = [[-2, 1, 0], [0, -2, 1], [0, 0, -2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-2, 1, 0], [0, -2, 1], [0, 0, -2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Form of matrix A = [[3, 0, 1], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 1], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[10, 2, 0], [0, 10, 2], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 2, 0], [0, 10, 2], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Evaluate the Jordan Normal Form of A = [[1, 1, 1], [0, 1, 1], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 1], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Form of matrix A = [[-1, 0, 1], [0, -1, 0], [0, 0, -1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-1, 0, 1], [0, -1, 0], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[4, 1, 1], [0, 4, 0], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 1, 1], [0, 4, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Form of matrix A = [[7, 0, 0], [0, 7, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Evaluate the Jordan Normal Form of A = [[8, 3, 0], [0, 8, 3], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 3, 0], [0, 8, 3], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Form of matrix A = [[6, 2, 2], [0, 6, 2], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 2, 2], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[-3, 0, 1], [0, -3, 1], [0, 0, -3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-3, 0, 1], [0, -3, 1], [0, 0, -3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[11, 4, 4], [0, 11, 4], [0, 0, 11]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[11, 4, 4], [0, 11, 4], [0, 0, 11]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of A = [[12, 0, 2], [0, 12, 2], [0, 0, 12]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[12, 0, 2], [0, 12, 2], [0, 0, 12]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of matrix A = [[14, 5, 0], [0, 14, 5], [0, 0, 14]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[14, 5, 0], [0, 14, 5], [0, 0, 14]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 1, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 0, 1], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 1], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[-1, 1, 0], [0, -1, 1], [0, 0, -1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-1, 1, 0], [0, -1, 1], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[5, 1, 1], [0, 5, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 1], [0, 5, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[4, 2, 1], [0, 4, 2], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 2, 1], [0, 4, 2], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[0, 0, 0], [1, 0, 0], [0, 1, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 0], [1, 0, 0], [0, 1, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[7, 3, 0], [0, 7, 3], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 3, 0], [0, 7, 3], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[6, 2, 0], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 2, 0], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[3, 2, 0], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 2, 0], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[1, 1, 1], [0, 1, 1], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 1], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[-3, 1, 0], [0, -3, 1], [0, 0, -3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-3, 1, 0], [0, -3, 1], [0, 0, -3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 2, 1], [0, 2, 2], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 2, 1], [0, 2, 2], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[9, 4, 2], [0, 9, 4], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 4, 2], [0, 9, 4], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[0, 2, 0], [0, 0, 2], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 2, 0], [0, 0, 2], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[1, 0, 1], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 1], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[8, 3, 1], [0, 8, 3], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 3, 1], [0, 8, 3], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[5, 0, 2], [0, 5, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 0, 2], [0, 5, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[-2, 1, 0], [0, -2, 1], [0, 0, -2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-2, 1, 0], [0, -2, 1], [0, 0, -2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[4, 0, 0], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 0, 0], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[6, 1, 1], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 1], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 0, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[1, 0, 2], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 2], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[-1, 2, 1], [0, -1, 2], [0, 0, -1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-1, 2, 1], [0, -1, 2], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[3, 1, 1], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 1], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[1, 1, 0], [0, 1, 1], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 0], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[2, 1, 1], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 1], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 2, 0], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 2, 0], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[4, 0, 1], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 0, 1], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[5, 1, 0], [0, 5, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[6, 0, 0], [1, 6, 0], [0, 1, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 0, 0], [1, 6, 0], [0, 1, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[7, 1, 0], [0, 7, 1], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 1, 0], [0, 7, 1], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[8, 2, 0], [0, 8, 0], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 2, 0], [0, 8, 0], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[9, 0, 0], [0, 9, 0], [1, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 0], [0, 9, 0], [1, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[10, 0, 1], [0, 10, 0], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 0, 1], [0, 10, 0], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[4, 4, 0], [0, 4, 4], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 4, 0], [0, 4, 4], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[5, 2, 2], [0, 5, 2], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 2, 2], [0, 5, 2], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[6, 0, 0], [0, 6, 2], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 0, 0], [0, 6, 2], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[7, 0, 2], [0, 7, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 2], [0, 7, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[8, 3, 0], [0, 8, 3], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 3, 0], [0, 8, 3], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[-2, 1, 0], [0, -2, 1], [0, 0, -2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-2, 1, 0], [0, -2, 1], [0, 0, -2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[1, 1, 1], [0, 1, 1], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 1], [0, 1, 1], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[0, 0, 1], [0, 0, 0], [1, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 1], [0, 0, 0], [1, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[1, 0, 1], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 1], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[2, 0, 0], [2, 2, 0], [0, 2, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [2, 2, 0], [0, 2, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[1, 2, 0], [0, 1, 2], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 2, 0], [0, 1, 2], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[2, 0, 1], [0, 2, 0], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 1], [0, 2, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[3, 1, 1], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 1], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[4, 0, 0], [0, 4, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 0, 0], [0, 4, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[5, 1, 0], [0, 5, 1], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[6, 1, 1], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 1], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[7, 0, 0], [0, 7, 0], [1, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [0, 7, 0], [1, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[8, 2, 0], [0, 8, 1], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 2, 0], [0, 8, 1], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[9, 1, 1], [0, 9, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 1, 1], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[10, 0, 2], [0, 10, 2], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 0, 2], [0, 10, 2], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[1.5, 1, 0], [0, 1.5, 1], [0, 0, 1.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.5, 1, 0], [0, 1.5, 1], [0, 0, 1.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[2.2, 0, 1], [0, 2.2, 0], [0, 0, 2.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.2, 0, 1], [0, 2.2, 0], [0, 0, 2.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[-3, 0, 1], [0, -3, 0], [0, 0, -3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-3, 0, 1], [0, -3, 0], [0, 0, -3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[0, 1, 1], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 1], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[1, 1, 0], [0, 1, 0], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 1, 0], [0, 1, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 0, 0], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 0, 0], [0, 3, 0], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 0], [0, 3, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[4, 1, 0], [0, 4, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 1, 0], [0, 4, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[5, 0, 0], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 0, 0], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[6, 1, 0], [0, 6, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 0], [0, 6, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[7, 0, 0], [0, 8, 1], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [0, 8, 1], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[8, 0, 1], [0, 8, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 0, 1], [0, 8, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[9, 2, 0], [0, 9, 0], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 2, 0], [0, 9, 0], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[10, 0, 0], [0, 10, 1], [0, 0, 11]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 0, 0], [0, 10, 1], [0, 0, 11]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 1, 0], [0, 2, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 2, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[4, 2, 0], [0, 4, 0], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4, 2, 0], [0, 4, 0], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[3.3, 1, 0], [0, 3.3, 0], [0, 0, 4.4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3.3, 1, 0], [0, 3.3, 0], [0, 0, 4.4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[1, 0, 0], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 0, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[5, 0, 0], [0, 5, 0], [1, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 0, 0], [0, 5, 0], [1, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[-1, 2, 0], [0, -1, 2], [0, 0, -1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[-1, 2, 0], [0, -1, 2], [0, 0, -1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[0.5, 1, 1], [0, 0.5, 1], [0, 0, 0.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0.5, 1, 1], [0, 0.5, 1], [0, 0, 0.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 0, 0], [0, 3, 1], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 0], [0, 3, 1], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[7, 0, 0], [1, 7, 0], [0, 0, 8]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [1, 7, 0], [0, 0, 8]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[9, 1, 0], [0, 9, 1], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 1, 0], [0, 9, 1], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[10, 0, 2], [0, 10, 0], [0, 0, 10]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[10, 0, 2], [0, 10, 0], [0, 0, 10]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2, 1, 0], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 0], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[3, 0, 1], [0, 4, 0], [0, 0, 4]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 1], [0, 4, 0], [0, 0, 4]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[5, 1, 0], [0, 6, 1], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 6, 1], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[7, 0, 0], [0, 7, 0], [0, 1, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7, 0, 0], [0, 7, 0], [0, 1, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[8, 2, 1], [0, 8, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 2, 1], [0, 8, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[1.1, 0, 1], [0, 1.1, 0], [0, 0, 2.2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1.1, 0, 1], [0, 1.1, 0], [0, 0, 2.2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[2.5, 1, 0], [0, 2.5, 0], [0, 0, 2.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2.5, 1, 0], [0, 2.5, 0], [0, 0, 2.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[0, 0, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[3, 1, 0], [0, 4, 1], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 0], [0, 4, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[6, 0, 0], [0, 6, 0], [0, 0, 7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 0, 0], [0, 6, 0], [0, 0, 7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[8, 0, 1], [0, 9, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 0, 1], [0, 9, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of the matrix A = [[1, 2, 0], [0, 1, 0], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 2, 0], [0, 1, 0], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of the matrix A = [[3, 0, 2], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 0, 2], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of the matrix A = [[2, 0, 0], [1, 2, 0], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 0, 0], [1, 2, 0], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[0, 1, 0], [0, 0, 1], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for A = [[6, 1, 0], [0, 6, 0], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6, 1, 0], [0, 6, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[3, 1, 1], [0, 3, 0], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 1, 1], [0, 3, 0], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of matrix A = [[1, 2, 3], [0, 1, 4], [0, 0, 1]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[1, 2, 3], [0, 1, 4], [0, 0, 1]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "What is the Jordan Normal Form of matrix A = [[2, 2, 0], [0, 2, 1], [0, 0, 2]]?",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 2, 0], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form of A = [[4.5, 0, 0], [0, 4.5, 1], [0, 0, 4.5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[4.5, 0, 0], [0, 4.5, 1], [0, 0, 4.5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form for matrix A = [[5, 1, 1], [0, 5, 1], [0, 0, 5]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 1], [0, 5, 1], [0, 0, 5]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of A = [[3, 2, 1], [0, 3, 1], [0, 0, 3]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[3, 2, 1], [0, 3, 1], [0, 0, 3]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of matrix A = [[6.6, 1.1, 0], [0, 6.6, 1.1], [0, 0, 6.6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[6.6, 1.1, 0], [0, 6.6, 1.1], [0, 0, 6.6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for A = [[2, 1, 1], [0, 2, 1], [0, 0, 2]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[2, 1, 1], [0, 2, 1], [0, 0, 2]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of A = [[9, 0, 1], [0, 9, 1], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[9, 0, 1], [0, 9, 1], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Calculate the Jordan Normal Form of matrix A = [[5, 1, 0], [0, 5, 0], [0, 0, 6]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[5, 1, 0], [0, 5, 0], [0, 0, 6]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Find the Jordan Normal Form for A = [[7.7, 0, 0], [0, 7.7, 1], [0, 0, 7.7]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[7.7, 0, 0], [0, 7.7, 1], [0, 0, 7.7]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Determine the Jordan Normal Form of A = [[0, 0, 1], [0, 0, 0], [0, 0, 0]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[0, 0, 1], [0, 0, 0], [0, 0, 0]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  },
  {
    "input": "Compute the Jordan Normal Form of matrix A = [[8, 1, 0], [0, 8, 0], [0, 0, 9]].",
    "output": "import numpy as np\nfrom sympy import Matrix\nA = Matrix([[8, 1, 0], [0, 8, 0], [0, 0, 9]])\nJ, P = A.jordan_form()\nprint(\"Jordan form:\", J)"
  }
]